Under review as a conference paper at ICLR 2018
CGANS WITH PROJECTION DISCRIMINATOR
Anonymous authors Paper under double-blind review
ABSTRACT
We propose a novel, projection based way to incorporate the conditional information into the discriminator of GANs that respects the role of the conditional information in the underlining probabilistic model. This approach is in contrast with most frameworks of conditional GANs used in application today, which use the conditional information by concatenating the (embedded) conditional vector to the feature vectors. With this modification, we were able to significantly improve the quality of the class conditional image generation on ILSVRC2012 (ImageNet) dataset from the current state-of-the-art result, and we achieved this with a single pair of a discriminator and a generator. We were also able to extend the application to super-resolution and succeeded in producing highly discriminative super-resolution images. This new structure also enabled high quality category transformation based on parametric functional transformation of conditional batch normalization layers in the generator.
1 INTRODUCTION
Generative Adversarial Networks (GANs) (Goodfellow et al., 2014) are a framework to construct a generative model that can mimic the target distribution, and in recent years it has given birth to arrays of state-of-the-art algorithms of generative models on image domain (Radford et al., 2016; Salimans et al., 2016; Ledig et al., 2016; Zhang et al., 2017; Reed et al., 2016). The most distinctive feature of GANs is the discriminator D(x) that evaluates the divergence between the current generative distribution pG(x) and the target distribution q(x) (Goodfellow et al., 2014; Nowozin et al., 2016; Arjovsky et al., 2017). The algorithm of GANs trains the generator model by iteratively training the discriminator and generator in turn, with the discriminator acting as an increasingly meticulous critic of the current generator.
Conditional GANs (cGANs) are a type of GANs that use conditional information (Mirza & Osindero, 2014) for the discriminator and generator, and they have been drawing attention as a promising tool for class conditional image generation (Odena et al., 2017), the generation of the images from text (Reed et al., 2016; Zhang et al., 2017), and image to image translation (Zhu et al., 2017). Unlike in standard GANs, the discriminator of cGANs discriminates between the generator distribution and the target distribution on the set of the pairs of generated samples x and its intended conditional variable y. To the authors' knowledge, most frameworks of discriminators in cGANs at the time of writing feeds the pair the conditional information y into the discriminator by naively concatenating (embedded) y to the input or to the feature vector at some middle layer (Mirza & Osindero, 2014; Reed et al., 2016; Zhang et al., 2017; Perarnau et al., 2016; Saito et al., 2017; Dumoulin et al., 2017; Sricharan et al., 2017). We would like to however, take into account the structure of the assumed conditional probabilistic models underlined by the structure of the discriminator, which is a function that measures the information theoretic distance between the generative distribution and the target distribution.
By construction, any assumption about the form of the distribution would act as a regularization on the choice of the discriminator. In this paper, we propose a specific form of the discriminator, a form motivated by a probabilistic model in which the distribution of the conditional variable y given x is discrete or uni-modal continuous distributions. This model assumption is in fact common in many real world applications, including class-conditional image generation and super-resolution.
As we will explain in the next section, adhering to this assumption will give rise to a structure of the discriminator that requires us to take an inner product between the embedded condition vector y and
1

Under review as a conference paper at ICLR 2018

(a) cGANs, input concat
Adversarial loss
Concat
xy

(b) cGANs, hidden concat
Adversarial loss
0
Concat
y
x

(c) AC-GANs (Odena et al., 2017)
Adversarial Classificaition loss loss

(d) (ours) Projection
Adversarial loss

Inner
y product y

xx

Figure 1: Discriminator models when y is a categorical variable

(a) Images generated with the projection model. (left) Tibetan terrier and (right) mushroom.

(b) (left) Consecutive category morphing with fixed z. geyser  Tibetan terrier  mushroom  robin. (right) category morphing from Tibetan terrier to mushroom with different value of fixed z
Figure 2: The generator trained with the projection model can generate diverse set of images. For more results, in the experiment section and the appendix section.

the feature vector (Figure 1d). With this modification, we were able to significantly improve the quality of the class conditional image generation on 1000-class ILSVRC2012 dataset (Russakovsky et al., 2015) with a single pair of a discriminator and generator (see the generated examples in Figure 2). Also, when we applied our model of cGANs to a super-resolution task, we were able to produce high quality super-resolution images that are more discriminative in terms of the accuracy of the label classifier than the cGANs based on concatenation, as well as the bilinear and the bicubic method.

2 THE ARCHITECTURE OF THE CGAN DISCRIMINATOR WITH A
PROBABILISTIC MODEL ASSUMPTIONS

Let us denote the input vector by x and the conditional information by y1. We also denote the cGAN discriminator by D(x, y; ) := A(f (x, y; )), where f is a function of x and y,  is the parameters of f , and A is an activation function of the users' choice. The standard adversarial loss
for the discriminator is:

L(D) = -Eq(y) Eq(x|y) [log(D(x, y))] - Ep(y) Ep(x|y) [log(1 - D(x, y))] ,

(1)

where p(x|y) and p(y) are given the generator models, and A of D is the sigmoid function. By construction, the nature of the `critic' D significantly affects the performance of G. A conventional way of feeding y to D until now has been to concatenate the vector y to the feature vector x, either at the input layer (Mirza & Osindero, 2014; Saito et al., 2017), or at some hidden layer (Reed et al.,
2016; Zhang et al., 2017; Perarnau et al., 2016; Dumoulin et al., 2017; Sricharan et al., 2017) (see
Figure 1a and Figure 1b). We would like to propose an alternative to this approach by observing the

1When y is discrete label information, we can assume that it is encoded as a one-hot vector.

2

Under review as a conference paper at ICLR 2018

form of the optimal solution for the loss function (1), which is given by (Goodfellow et al., 2014):

f (x, y)

=

r(x, y)

:=

log

q(x|y)q(y) p(x|y)p(y)

=

log

q(y|x) p(y|x)

+

log

q(x) p(x)

=

r(y|x)

+

r(x)

(2)

and we can model r(y|x) and r(x) by some parametric functions f1 and f2 respectively. If we make a standing assumption that p(y|x) and q(y|x) are simple distributions like those that are Gaussian or discrete log linear on the feature space, then, as we will show, the parametrization of the following
form becomes natural:

f (x, y; ) := f1(x, y; ) + f2(x; ) = yTV (x; ) + ((x; ); ),

(3)

where V is the embedding matrix of y, (·, ) is a vector output function of x, and (·, ) is a scalar function of the same (x; ) that appears in f1 (see Figure 1d). The learned parameters  = {V, , } are to be trained to optimize the adversarial loss. From this point on, we will refer to this model of the discriminator as projection for short. In the next section, we would like to
elaborate on how we can arrive at this form.

3 MOTIVATION BEHIND THE projection DISCRIMINATOR

In this section, we will begin from specific, often recurring, models and show that, with certain
regularity assumption, we can write the optimal solution of the discriminator objective function in the form of (3). Let us first consider the a case of categorical variable. Assume that y is a categorical variable taking a value in {1, . . . , C}, which is often common for a class conditional image generation task. The most popular model for p(y|x) is the following log linear model:


C



log p(y = c|x) := vcpT(x) - log  exp vjpT(x)  = vcpT(x) - log Z((x)),

j=1

(4)

where Z((x)) :=

C j=1

exp

vjpT(x)

is the partition function, and  : x  RdL is the

input to the final layer of the network model. Here, let us further assume that the network model can

be shared within p(y|x) and q(y|x). This way, the log density ratio of q(y = c|x) and p(y = c|x)

becomes

r(y|x)

=

log

q(y p(y

= =

c|x) c|x)

=

(vcq

-

vcp)T(x)

-

(log

Z q ((x))

-

log Zp((x))) .

(5)

If we make the values of (vcq, vcp) implicit and put vc := (vcq - vcp), we can write f1(x, y = c) = vcT(x). Now, if we can put together the normalization constant - (log Zq((x)) - log Zp((x))) and r(x) into one expression ((x)), we can rewrite the equation above as

f (x, y) := yTV (x) + ((x)).

(6)

by using y to denote a one-hot vector of the label y and using V to denote the matrix consisting of the row vectors vc. Most notably, this formulation introduces the label information via an inner product, as opposed to concatenation. The form (6) is indeed the form we proposed in (3).

We can also arrive at the form (3) for unimodal continuous distributions p(y|x) as well. Let y  Rd be a d-dimensional continuous variable, and let us assume that conditional q(y|x) and p(y|x) are both given by Gaussian distributions, so that q(y|x) = N (y|µq(x), -q 1) and p(y|x) = N (y|µp(x), -p 1) where µq(x) := W q(x) and µp(x) := W p(x). Then the log
density ratio r(y|x) = log(q(y|x)/p(y|x)) is given by:

r(y|x)

=

-

1 2

yT

(q

-

p)

y

+

yT (q W

q

-

pW

p)(x)

+

((x)),

(7)

where ((x)) represents the terms independent of y. Now, if we assume that q = p := , we can ignore the quadratic term. If we further express qW q - pW p in the form V , we can arrive at the form (3) again. Indeed, however, the way that this regularization affects the training of the generator G is a little unclear in its formulation. As we have repeatedly explained, our discriminator measures the divergence between the generator distribution p and the target distribution

3

Under review as a conference paper at ICLR 2018

q on the assumption that p(y|x) and q(y|x) are relatively simple, and it is highly possible that we are gaining stability in the training process by imposing a regularity condition on the divergence measure. Meanwhile, however, the actual p(y|x) can only be implicitly derived from p(x, y) in computation, and can possibly take numerous forms other than the ones we have considered here. We must admit that there is a room here for an important theoretical work to be done in order to assess the relationship between the choice of the function space for the discriminator and training process of the generator.

4 COMPARISON WITH OTHER METHODS
As described above, (3) is a form that is true for frequently occurring situations. In contrast, incorporation of the conditional information by concatenation is rather arbitrary and can possibly include into the pool of candidate functions some sets of functions for which it is difficult to find a logical basis. Indeed, if the situation calls for multimodal p(y|x), it might be smart not to use the model that we suggest here. Otherwise, however, we expect our model to perform better; in general, it is preferable to use a discriminator that respects the presumed form of the probabilistic model.
Still another way to incorporate the conditional information into the training procedure is to directly manipulate the loss function. The algorithm of AC-GANs (Odena et al., 2017) use a discriminator (D1) that shares a part of its structure with the classifier(D2), and incorporates the label information into the objective function by augmenting the original discriminator objective with the likelihood score of the classifier on both the generated and training dataset (see Figure 1c). Plug and Play Generative models (PPG) (Nguyen et al., 2017) is another approach for the generative model that uses an auxiliary classifier function. It is a method that endeavors to make samples from p(x|y) using an MCMC sampler based on the Langevin equation with drift terms consisting of the gradient of an autoencoder prior p(x) and a pretrained auxiliary classifier p(y|x). With these method, one can generate generate a high quality image. However, these ways of using auxiliary classifier may unwittingly encourage the generator to produce images that are particularly easy for the auxiliary classifier to classify, and deviate the final p(x|y) from the true q(x|y). In fact, Odena et al. (2017) reports that this problem has a tendency to exacerbate with increasing number of labels. We were able to reproduce this phenomena in our experiments; when we implemented their algorithm on a dataset with 1000 class categories, the final trained model was able to generate only one image for most classes. Nguyen et al.'s PPG is also likely to suffer from the same problem because they are using an order of magnitude greater coefficient for the term corresponding to p(y|x) than for the other terms in the Langevin equation.

5 EXPERIMENTS

In order to evaluate the effectiveness of our newly proposed architecture for the discriminator, we conducted two sets of experiments: class conditional image generation and super-resolution on ILSVRC2012 (ImageNet) dataset (Russakovsky et al., 2015). For both tasks, we used the ResNet (He et al., 2016b) based discriminator and the generator used in Gulrajani et al. (2017), and applied spectral normalization (Miyato et al., 2017) to the all of the weights of the discriminator to regularize the Lipschitz constant. For the objective function, we used the following hinge version of the standard adversarial loss (1) (Lim & Ye, 2017; Tran et al., 2017)

L(G^, D) = Eq(y) Eq(x|y) [max(0, 1 - D(x, y)] + Eq(y) Ep(z) max(0, 1 + D G^(z, y), y) ,

L(G, D^ ) = -Eq(y) Ep(z) D^ (G(z, y), y)) ,

(8)

where the last activation function A of D is identity function. p(z) is standard Gaussian distribution and G(z, y) is the generator network. For all experiments, we used Adam optimizer (Kingma & Ba, 2015) with hyperparameters set to  = 0.0002, 1 = 0, 2 = 0.9. We updated the discriminator five times per each update of the generator. We will use concat to designate the models (Figure 1b)2,
and use projection to designate the proposed model (Figure 1d).

2in the preliminary experiments of the image geneation task on CIFAR-10 (Torralba et al., 2008) and CIFAR-100 (Torralba et al., 2008), we confirmed that hidden concatenation is better than input concatenation in terms of the inception scores.

4

Under review as a conference paper at ICLR 2018

inception score Projection Projection

35 Projection
30 Concat

25

20

15

100.0 1.0 2.0 3.0 4.04.5

iteration

1e5

500 400 300 200 100
00 100 200 300 400 500 Concat
(a) concat vs projection

600 500 400 300 200 100
00 100 200 300 400 500 600 ACGANs
(b) AC-GANs vs projection

Figure 3: Learning curves of cGANs with concat and projection on ImageNet.

Figure 4: Comparison of intra FID concat, and AC-GANs on ImageNet. to a class.

scores for projection Each dot corresponds

5.1 CLASS-CONDITIONAL IMAGE GENERATION

The ImageNet dataset used in the experiment of class conditional image generation consisted of 1,000 image classes of approximately 1,300 pictures each. Unlike for AC-GANs3 we used a single pair of a ResNet-based generator and a discriminator. Also, we used conditional batch normalization (Dumoulin et al., 2017) for the generator. As for the architecture of the generator network used in the experiment, please see Figure 12 for more detail. Our proposed projection model discriminator is equipped with a `projection layer' that takes inner product between the embedded one-hot vector y and the intermediate output (Figure 12a). As for the structure of the the concat model discriminator to be compared against, we used the identical bulk architecture as the projection model discriminator, except that we removed the projection layer from the structure and concatenated the spatially replicated embedded conditional vector y to the output of fourth ResBlock. We also experimented with AC-GANs as the current state of the art model. For AC-GANs, we placed the softmax layer classifier to the same structure shared by concat and projection. For each method, we updated the generator 450K times, and applied linear decay for the learning rate after 400K iterations so that the rate would be 0 at the end.

We used inception score (Salimans et al., 2016) for the evaluation of the visual appearance of the

generated images. It is in general difficult to evaluate how `good' the generative model is. Indeed,

however, either subjective or objective, some definite measures of `goodness' exists, and essen-

tial two of them are `diversity' and the sheer visual quality of the images. One possible candidate

for quantitative measure of diversity and visual appearance is FID (Heusel et al., 2017). We com-

puted FID between the generated images and dataset images within each class, and designated the

values as intra FIDs. More precisely, FID (Heusel et al., 2017) measures the 2-Wasserstein dis-

tance between the two distributions qy and py, and is given by F (qy, py) =

µqy - µpy

2 2

+

trace Cqy + Cpy - 2(Cqy Cpy )1/2 , where {µqy , Cqy }, {µpy , Cpy } are respectively the mean and

the covariance of the final feature vectors produced by the inception model (Szegedy et al., 2015)

from the true samples and generated samples of class y. When the set of generated examples have

collapsed modes, the trace of Cpy becomes small and the trace term itself becomes large. In order to compute Cqy we used all samples in the training data belonging to the class of concern, and used 5000 generated samples for the computation of Cpy . We empirically observed in our experiments
that intra FID is, to a certain extent, serving its purpose well in measuring the diversity and the visual

quality.

To highlight the effectiveness of our inner-product based approach (projection) of introducing the conditional information into the model, we compared our method against the state of the art ACGANs as well as the conventional incorporation of the conditional information via concatenation at hidden layer (concat). As we can see in the training curves Figure 3, projection outperforms inception score than concat throughout the training. Table 1 compares the intra class FIDs of the images generated by each method. The result shown here for the AC-GANs is that of the model at its prime in terms of the inception score, because the training collapsed at the end. We see that the images generated by projection have lower intra FID scores than both adversaries, indicating that the Wasserstein distance between the generative distribution by projection to the target distribution

3For AC-GANs, the authors prepared a pair of discriminator and generator for each set classes of size 10.

5

Under review as a conference paper at ICLR 2018

Table 1: Inception score and intra FIDs on ImageNet.

Method
AC-GANs concat projection

Inception Score
28.7 21.9 30.3

Intra FID
252.0 142.1 103.3

Figure 5: comparison of the images generated by (a) ACGANs and (b) projection.

Figure 6: Collapsed images on the concat model.

is smaller. Figure 10a and 10b shows the set of classes for which (a) projection yielded results with better intra FIDs than the concat and (b) the reverse. From the top, the figures are listed in descending order of the ratio between the intra FID score between the two methods. Note that when the concat outperforms projection it only wins by a slight margin, whereas the projection outperforms concat by large margin in the opposite case. A quick glance on the cases in which the concat outperforms the projection suggests that the FID is in fact measuring the visual quality, because both sets looks similar to the human eyes in terms of appearance. Figure 5 shows an arbitrarily selected set of results yielded by AC-GANs from variety of zs. We can clearly observe the mode-collapse on this batch. This is indeed a tendency reported by the inventors themselves Odena et al. (2017). ACGANs can generate easily recognizable (i.e classifiable) images, but at the cost of losing diversity and hence at the cost of constructing a generative distribution that is significantly different from the target distribution as a whole. We can also assess the low FID score of projection from different perspective. By construction, the trace term of intra FID measures the degree of diversity within the class. Thus, our result on the intra FID scores also indicates that that our projection is doing better in reproducing the diversity of the original. The concat method also suffered from mode-collapse for some classes (see Figure 6). For the set of images generated by projection, we were not able to detect any notable mode-collapse.
Figure 7a shows the samples generated with the projection model for the classes on which the cGAN achieved lowest intra FID scores (that is the classes on which the generative distribution were particularly close to target conditional distribution), and Figure 7b the reverse. While most of the images listed in Figure 7a are of relatively high quality, we still observe some degree of mode-collapse. Note that the images in the classes with high FID are featuring complex objects like human; that is, one can expect the diversity within the class to be wide. However, we note that we did not use the most complicated neural network available for the experiments presented on this paper, because we prioritized the completion of the training within a reasonable time frame. It is very possible that, by increasing the complexity of the model, we will be able to further improve the visual quality of the images and the diversity of the distribution. In Appendix C, we list images of numerous classes generated by cGANs trained with our projection model.
Category Morphing With our new architecture, we were also able to successfully perform category morphism. When there are classes y1 and y2, we can create an interpolated generator by simply mixing the parameters of conditional batch normalization layers of the conditional generator corresponding to these two classes. Figure 8 shows the output of the interpolated generator with the same z. Interestingly, the combination is also yielding meaningful images when y1 and y2 are significantly different.
Fine-tuning with the pretrained model on the ILSVRC2012 classification task. As we mentioned in Section 4, the authors of Plug and Play Generative model (PPG) (Nguyen et al., 2017) were able to improve the visual appearance of the model by augmenting the cost function with that of the
6

Under review as a conference paper at ICLR 2018

(a) Generated images on the class with `low' FID scores.

(b) generated images on the class with `high' FID scores.
Figure 7: 128×128 pixel images generated by the projection method for the classes with (a) bottom five FID scores and (b) top five FID scores. The string and the value above each panel are respectively the name of the corresponding class and the FID score. The second row in each panel corresponds to the original dataset.

Figure 8: Category morphing. More results are in the appendix section.

label classifier. We also followed their footstep and augmented the original generator loss with an additional auxiliary classifier loss. As warned earlier regarding this type of approach, however, this type of modification tends to only improve the visual performance of the images that are easy for the pretrained model to classify. In fact, as we can see in Appendix B, we were able to improve the visual appearance the images with the augmentation, but at the cost of diversity.

5.2 SUPER-RESOLUTION

We also evaluated the effectiveness of (3) in its application to the super-resolution task. Put formally, the super-resolution task is to infer the high resolution RGB image of dimension x  RRH×RH×3 from the low resolution RGB image of dimension y  RRL×RL×3; RH > RL. This task is very much the case that we presumed in our model construction, because p(y|x) is most likely unimodal even if p(x|y) is multimodal. For the super-resolution task, we used the following formulation for
discriminator function:

f (x, y; ) = (yijkFijk((x; ))) + ((x; ); ),
i,j,k

(9)

where F ((x; )) = V  (x; ) where V is a convolutional kernel and  stands for convolution operator. Please see Figure 13 in the appendix section for the actual network architectures we used
for this task. For this set of experiments, we constructed the concat model by removing the module in
the projection model containing the the inner product layer and the accompanying convolution layer altogether, and simply concatenated y to the output of the ResBlock preceding the inner product

7

Under review as a conference paper at ICLR 2018

Figure 9: 32x32 to 128x128 super-resolution by different methods

Table 2: Inception accuracy and MS-SSIM on different super-resolution methods. We picked up dataset images from the validation set.

Method
Inception Acc.(%) MS-SSIM

biliear
24 0.835

bicubic
32.1 0.859

concat
10.1 0.829

projection
35.2 0.862

projection (10 MC)
36.7 -

module in the original. As for the resolutions of the image datasets, we chose RH = 128 and RL = 32, and created the low resolution images by applying bilinear downsampling on high resolution images. We updated the generators 100K times for all methods, and applied linear decay for the learning rate after 50K iterations so that the final learning rate was 0 at 100K-th iteration.
Figure 9 shows the result of our super-resolution. The bicubic super-resolution is very blurry, and concat result is suffering from excessively sharp and rough edges. On the other hand, the edges of the images generated by our projection method are much clearer and smoother, and the image itself is much more faithful to the original high resolution images. In order to qualitatively compare the performances of the models, we checked MS-SSIM (Wang et al., 2003) and the classification accuracy of the inception model on the generated images using the validation set of the ILSVRC2012 dataset. As we can see in Table 2, our projection model was able to achieve high inception accuracy and high MS-SSIM when compared to bicubic and concat. Note that the performance of superresolution with concat model even falls behind those of the bilinear and bicubic super-resolutions in terms of the inception accuracy. Also, we used projection model to generate multiple batches of images with different random values of z to be fed to the generator and computed the average of the logits of the inception model on these batches (MC samples). We then used the so-computed average logits to make prediction of the labels. With an ensemble over 10 seeds (10 MC in Table 2), we were able to improve the inception accuracy even further. This result indicates that our GANs are learning the super-resolution as an distribution, as opposed to deterministic function. Also, the success with the ensemble also suggests a room for a new way to improve the accuracy of classification task on low resolution images.
6 CONCLUSION
Any specification on the form of the discriminator imposes a regularity condition for the choice for the generator distribution and the target distribution. In this research, we proposed a model for the discriminator of cGANs that is motivated by a commonly occurring family of probabilistic models. This simple modification was able to significantly improve the performance of the trained generator on conditional image generation task and super-resolution task. The result presented in this paper is strongly suggestive of the importance of the choice of the form of the discriminator and the design of the distributional metric. We plan to extend this approach to other applications of cGANs, such as semantic segmentation tasks and image to image translation tasks.
8

Under review as a conference paper at ICLR 2018

(a) Images better with projection than concat.

(b) Images better with concat than projection.

Figure 10: Comparison of concat vs. projection. The value attached above each panel represents the achieved FID score.

REFERENCES
Martin Arjovsky, Soumith Chintala, and Le´on Bottou. Wasserstein generative adversarial networks. In ICML, pp. 214­223, 2017.
Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier Mastropietro, and Aaron Courville. Adversarially learned inference. In ICLR, 2017.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Advances in neural information processing systems, pp. 2672­2680, 2014.
Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville. Improved training of wasserstein GANs. arXiv preprint arXiv:1704.00028, 2017.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. In CVPR, 2016a.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Identity mappings in deep residual networks. In European Conference on Computer Vision, pp. 630­645. Springer, 2016b.
Martin Heusel, Hubert Ramsauer, Thomas Unterthiner, Bernhard Nessler, Gu¨nter Klambauer, and Sepp Hochreiter. Gans trained by a two time-scale update rule converge to a nash equilibrium. arXiv preprint arXiv:1706.08500, 2017.
Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015. Christian Ledig, Lucas Theis, Ferenc Husza´r, Jose Caballero, Andrew Cunningham, Alejandro Acosta, Andrew
Aitken, Alykhan Tejani, Johannes Totz, Zehan Wang, et al. Photo-realistic single image super-resolution using a generative adversarial network. arXiv preprint arXiv:1609.04802, 2016.
9

Under review as a conference paper at ICLR 2018
Jae Hyun Lim and Jong Chul Ye. Geometric gan. arXiv preprint arXiv:1705.02894, 2017. Mehdi Mirza and Simon Osindero. Conditional generative adversarial nets. arXiv preprint arXiv:1411.1784,
2014. Takeru Miyato, Toshiki Kataoka, Masanori Koyama, and Yuichi Yoshida. Spectral normalization for generative
adversarial networks. ICML Implicit Models Workshop, 2017. Anh Nguyen, Jeff Clune, Yoshua Bengio, Alexey Dosovitskiy, and Jason Yosinski. Plug & play generative
networks: Conditional iterative generation of images in latent space. In CVPR, 2017. Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-GAN: Training generative neural samplers using
variational divergence minimization. In NIPS, pp. 271­279, 2016. Augustus Odena, Christopher Olah, and Jonathon Shlens. Conditional image synthesis with auxiliary classifier
GANs. In ICML, pp. 2642­2651, 2017. Guim Perarnau, Joost van de Weijer, Bogdan Raducanu, and Jose M A´ lvarez. Invertible conditional gans for
image editing. In NIPS Workshop on Adversarial Training, 2016. Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with deep convolutional
generative adversarial networks. In ICLR, 2016. Scott Reed, Zeynep Akata, Xinchen Yan, Lajanugen Logeswaran, Bernt Schiele, and Honglak Lee. Generative
adversarial text to image synthesis. arXiv preprint arXiv:1605.05396, 2016. Olga Russakovsky, Jia Deng, Hao Su, Jonathan Krause, Sanjeev Satheesh, Sean Ma, Zhiheng Huang, Andrej
Karpathy, Aditya Khosla, Michael Bernstein, Alexander C. Berg, and Li Fei-Fei. ImageNet Large Scale Visual Recognition Challenge. International Journal of Computer Vision (IJCV), 115(3):211­252, 2015. doi: 10.1007/s11263-015-0816-y. Masaki Saito, Eiichi Matsumoto, and Shunta Saito. Temporal generative adversarial nets with singular value clipping. In ICCV, 2017. Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen. Improved techniques for training GANs. In NIPS, pp. 2226­2234, 2016. Kumar Sricharan, Raja Bala, Matthew Shreve, Hui Ding, Kumar Saketh, and Jin Sun. Semi-supervised conditional GANs. arXiv preprint arXiv:1708.05789, 2017. Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed, Dragomir Anguelov, Dumitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich. Going deeper with convolutions. In CVPR, pp. 1­9, 2015. Antonio Torralba, Rob Fergus, and William T Freeman. 80 million tiny images: A large data set for nonparametric object and scene recognition. IEEE transactions on pattern analysis and machine intelligence, 30 (11):1958­1970, 2008. Dustin Tran, Rajesh Ranganath, and David M Blei. Deep and hierarchical implicit models. arXiv preprint arXiv:1702.08896, 2017. Zhou Wang, Eero P Simoncelli, and Alan C Bovik. Multiscale structural similarity for image quality assessment. In Asilomar Conference on Signals, Systems and Computers, pp. 1398­1402, 2003. Han Zhang, Tao Xu, Hongsheng Li, Shaoting Zhang, Xiaolei Huang, Xiaogang Wang, and Dimitris Metaxas. Stackgan: Text to photo-realistic image synthesis with stacked generative adversarial networks. In ICCV, 2017. Jun-Yan Zhu, Taesung Park, Phillip Isola, and Alexei A Efros. Unpaired image-to-image translation using cycle-consistent adversarial networks. arXiv preprint arXiv:1703.10593, 2017.
10

Under review as a conference paper at ICLR 2018
A MODEL ARCHITECTURES

Conv 3x3 ReLU
Conv 3x3 ReLU

BN ReLU Conv 3x3
BN ReLU

(a) ResBlock architecture for the discriminator. Spectral normalization (Miyato et al., 2017) was applied to each conv layer.

Conv 3x3 (b) ResBlock for the generator.

Figure 11: Architecture of the ResBlocks used in all experiments. For the generator generator's Resblock, conditional batch normalization layer (Dumoulin et al., 2017) was used in place of the standard batch normalization layer. For the ResBlock in the generator for the super resolution tasks that implements the upsampling, the random vector z was fed to the model by concatenating the vector to the embedded low resolution image vector y prior to the first convolution layer within the block. For the procedure of downsampling and upsampling, we followed the implementation by Gulrajani et al. (2017). For the discriminator, we performed downsampling (average pool) after the second conv of the ResBlock. For the generator, we performed upsampling before the first conv of the ResBlock. For the ResBlock that is performing the downsampling, we replaced the identity mapping with 1x1 conv layer followed by downsampling to balance the dimension. We did the essentially same for the Resblock that is performing the upsampling, except that we applied the upsampling before the 1x1 conv .

11

Under review as a conference paper at ICLR 2018

Linear

Inner product

ReLU Global sum pooling
ResBlock, 1024 ResBlock, Down, 1024 ResBlock, Down, 512 ResBlock, Down, 256 ResBlock, Down, 128 ResBlock, Down, 128
ResBlock, Down, 64

Embed
y

z
Linear, 1024x4x4 ResBlock, Up, 1024 ResBlock, Up, 512 ResBlock, Up, 256 ResBlock, Up, 128 ResBlock, Up, 128
ResBlock, Up, 64 BN, ReLU, Conv 3x3

y

x
(b) Generator
x
(a) Discriminator
Figure 12: The models we used for the conditional image generation task.

12

Under review as a conference paper at ICLR 2018

ReLU, Linear Global sum pooling
ResBlock, 1024 ResBlock, Down, 1024 ResBlock, Down, 512 ResBlock, Down, 256 ResBlock, Down, 128
ResBlock, 128 ResBlock, Down, 128
ResBlock, 64 ResBlock, Down, 64

y

Inner product Conv 3x3
y

ResBlock, 256 ResBlock, 256 ResBlock, 256 ResBlock, 256 ResBlock, Up, 128 ResBlock, 128 ResBlock, Up, 64 ResBlock,64 BN, ReLU, Conv 3x3

z z'

x
(a) Discriminator

x
(b) Generator

Figure 13: The models we used for the super resolution task.

13

Under review as a conference paper at ICLR 2018

Figure 14: Effect of the finetuning with auxiliary classifier loss. Same coordinate in panel (a) and (b) corresponds to same value of z

Table 3: Inception score and intra FIDs on ImageNet with a pretrained model on classification tasks for ILSVRC2012 dataset. Nguyen et al. (2017)

Method
PPG projection(finetuned)

Inception Score
47.4 210

Intra FID
N/A 52.3

B OBJECTIVE FUCNTION WITH AN AUXILLARY CLASSIFIER COST

In this experiment, we followed the footsteps Plug and Play Generative model (PPG) (Nguyen et al., 2017) and augmented the original generator loss with an additional auxiliary classifier loss. In particular, we used the losses given by :

L G, D^ , p^pre(y|x) = -Eq(y) Ep(z) D^ (G(z, y), y) - LC (p^pre(y|G(z, y))) ,

(10)

where p^pre(y|x) is the fixed model pretrained for ILSVRC2012 classification task. For the actual experiment, we trained the generator with the original adversarial loss for the first 400K updates, and used the augmented loss for the last 50K updates. For the learning rate hyper parameter, we adopted the same values as other experiments we described above. For the pretrained classifier, we used ResNet50 model used in He et al. (2016a). Figure 14 compares the results generated by vanilla objective function and the results generated by the augmented objective function. As we can see in Table 3, we were able to significantly outperform PPG in terms of inception score. However, note that the images generated here are images that are easy to classify. The method with auxiliary classifier loss seems effective in improving the visual appearance, but not in training faithful generative model.

14

Under review as a conference paper at ICLR 2018
C MORE RESULTS ON THE CONDITIONAL IMAGE GENERATION TASK
Figure 15: 128×128 generated examples on various categories with projection method. Each panel corresponds to a class.
15

Under review as a conference paper at ICLR 2018
Figure 16: 128×128 generated examples on various categories with projection method. Each panel corresponds to a class. From top to bottom, tench, papillon, grey whale, desktop computer, altar, whiskey jug and volcano.
16

Under review as a conference paper at ICLR 2018
D RESULTS OF CATEGORY MORPHING
(a) to Persian cat
(b) to Electric locomotive
(c) to Alp
(d) to Castle
(e) to Chiffonier Figure 17: Dog (Lhasa apso) to different categories
17

Under review as a conference paper at ICLR 2018
(a) Hip to Yellow lady's slipper (b) Pirate ship to Yawl (c) Yurt to Castle
(d) Chiffonier to Chinese cabinet (e) Valley to Sandbar
Figure 18: Morphing between different categories 18

Under review as a conference paper at ICLR 2018
E MORE RESULTS WITH SUPER-RESOLUTION
Figure 19: 32x32 to 128x128 super-resolution results 19

