Under review as a conference paper at ICLR 2018
ANOMALY DETECTION WITH GENERATIVE ADVERSARIAL NETWORKS
Anonymous authors Paper under double-blind review
ABSTRACT
Many anomaly detection methods exist that perform well on low-dimensional problems however there is a notable lack of effective methods for highdimensional spaces, such as images. Inspired by recent successes in deep learning we propose a novel approach to anomaly detection using generative adversarial networks. Given a sample under consideration, our method is based on searching for a good representation of that sample in the latent space of the generator; if such a representation is not found, the sample is deemed anomalous. We achieve stateof-the-art performance on standard image benchmark datasets and visual inspection of the most anomalous samples reveals that our method does indeed return anomalies.
1 INTRODUCTION
Given a collection of data it is often desirable to automatically determine which instances of it are unusual. Commonly referred to as anomaly detection, this is a fundamental machine learning task with numerous applications in fields such as astronomy (Protopapas et al., 2006; Dutta et al., 2007), medicine (Campbell & Bennett, 2001; Wong et al., 2003; Schlegl et al., 2017), fault detection (Go¨rnitz et al., 2015), and intrusion detection (Eskin, 2000; Hu et al., 2003). Traditional algorithms primarily focus on the low-dimensional regime and often fail when applied to high-dimensional objects such as images or speech. Second to that, they require the manual engineering of features.
Deep learning omits manual feature engineering and has become the de-facto approach for tackling many high-dimensional machine learning tasks. The latter is largely a testament of its experimental performance: deep learning has helped to achieve impressive results in image classification (Krizhevsky et al., 2012), and is setting new standards in domains such as natural language processing (Le & Mikolov, 2014; Sutskever et al., 2014) and speech recognition (Bahdanau et al., 2015).
In this paper we present a novel deep learning based approach to anomaly detection which uses generative adversarial networks (GANs) (Goodfellow et al., 2014). GANs have achieved state-ofthe-art performance in high-dimensional generative modeling. In a GAN, two neural networks ­ the discriminator and the generator ­ are pitted against each other. In the process the generator learns to map random samples from a low-dimensional to a high-dimensional space, mimicking the target dataset. If the generator has successfully learned a good approximation of the training data's distribution it is reasonable to assume that, for a sample drawn from the data distribution, there exists some point in the GAN's latent space which, after passing it through the generator network, should closely resembles this sample. We use this correspondence to perform anomaly detection with GANs (ADGAN).
In Section 2 we give an overview of previous work on anomaly detection and discuss the modeling assumptions to this paper. Section 3 contains a description of our proposed algorithm. In our experiments, see Section 4, we both validate our method against traditional methods and showcase ADGAN's ability to detect anomalies in high-dimensional data.
2 BACKGROUND
Here we briefly review previous work on anomaly detection, touch on generative models, and highlight the methodology of GANs.
1

Under review as a conference paper at ICLR 2018

2.1 RELATED WORK
Anomaly detection. Research on anomaly detection has a long history with early work going back as far as Edgeworth (1887), and is concerned with finding unusual or anomalous samples in a corpus of data. An extensive overview over traditional anomaly detection methods as well as open challenges can be found in Chandola et al. (2009). For a recent empirical comparison of various existing approaches, see Emmott et al. (2013).
Generative models yield a whole family of anomaly detectors through estimation of the data distribution p. Given data, we estimate p^  p and declare those samples which are unlikely under p^ as anomalous. This guideline is roughly followed by traditional non-parametric methods such as kernel density estimation (KDE) (Parzen, 1962), which were applied to intrusion detection in Yeung & Chow (2002). Other research targeted mixtures of Gaussians for active learning of anomalies (Pelleg & Moore, 2005), hidden Markov models for registering network attacks (Ourston et al., 2003), and dynamic Bayesian networks for traffic incident detection (Singliar & Hauskrecht, 2006).
Deep generative models. Recently, variational autoencoders (VAEs) (Kingma & Welling, 2013) have been proposed as a deep generative model. By optimizing over a variational lower bound on the likelihood of the data, the parameters of a neural network are tuned in such a way that samples resembling the data may be generated from a Gaussian prior. Another generative approach is to train a pair of deep convolutional neural networks in an autoencoder setup (DCAE) (Masci et al., 2011) and producing samples by decoding random points on the compression manifold. Unfortunately, none of these approaches yield a tractable way of estimating p. Our approach uses a deep generative model in the context of anomaly detection.
Deep learning for anomaly detection. Non-parametric anomaly detection methods suffer from the curse of dimensionality and are thus inadequate tools for the interpretation and analysis of highdimensional data. Deep neural networks have been found to obviate many problems that arise in this context. As a hybrid between the two approaches, deep belief networks were coupled with one-class support vector machines to detect anomalies in Erfani et al. (2016). We found that this technique did not work well for image datasets, and indeed the authors included no such experiments in their paper.
Recently GANs, which we discuss in greater depth in the next section, have garnered much attention with performance surpassing previous deep generative methods. Concurrently to this work, Schlegl et al. (2017) developed an anomaly detection framework that uses GANs in a similar way as we do. We discuss the differences between our work and theirs in Section 3.2.
2.2 GENERATIVE ADVERSARIAL NETWORKS
GANs, which lie at the heart of ADGAN, have set a new state-of-the-art in generative image modeling. They provide a framework to generate samples that are approximately distributed to p, the distribution of the training data {xi}ni=1 X  Rd. To achieve this, GANs attempt to learn the parametrization of a neural network, the so-called generator g, that maps low-dimensional samples drawn from some simple noise prior pz (e.g. a multivariate Gaussian) to samples in the image space, thereby inducing a distribution q (the push-forward of pz with respect to g) that approximates p. To achieve this a second neural network, the discriminator d, learns to classify the data from p and q. Through an alternating training procedure the discriminator becomes better at separating samples from p and samples from q, while the generator adjusts  in order to fool the discriminator, thereby approximating p more closely. The objective function of the GAN framework is thus:

min max


V (, ) = Exp[log d(x)] + Ezpz [log(1 - d(g(z)))] ,

2

(1)

Under review as a conference paper at ICLR 2018

z0 g0

z1 g1

. . . zk gk
...

x

z0 g0

z1 g1

. . . zk gk
...

x

Figure 1: An illustration of ADGAN. In this example, ones from MNIST are considered normal.
After an initial draw from pz, the loss between the first generation g0 (z0) and the image x whose anomaly we are assessing is computed. This information is used to generate a consecutive image
g1 (z1) more alike x. After k steps, samples are scored. If x is similar to the training data (blue example), then a similar object should be contained in the image of gk . For a dissimilar x (red example), no similar image is found, resulting in a large loss.

where z are vectors that reside in a latent space of dimensionality d d.1 A recent work showed that this minmax optimization (1) equates to an empirical lower bound of an f -divergence (Nowozin et al., 2016).2
GAN training is difficult in practice, which has been shown to be a consequence of vanishing gradients in high-dimensional spaces (Arjovsky & Bottou, 2017). These instabilities can be countered by training on integral probability metrics (IPMs) (Mu¨ller, 1997; Sriperumbudur et al., 2009), one instance of which is the 1-Wasserstein distance.3 This distance, informally defined, is the amount of work to pull one density onto another, and is the basis of the Wasserstein GAN (WGAN) (Arjovsky et al., 2017). The objective function for WGANs is

min max
 

W (, ) = Exp[d(x)] - Ezpz [d(g(z))] ,

(2)

where the parametrization of the discriminator is restricted to allow only 1-Lipschitz functions, i.e.  = { : d L  1}. When compared to classic GANs, we have observed that WGAN training is extremely stable and is thus used in our experiments, see Section 4.

3 ALGORITHM
Our proposed method (ADGAN, see Alg. 1) sets in after GAN training has converged. If the generator has indeed captured the distribution of the training data then, given a new sample x  p, there should exist a point z in the latent space, such that g(z)  x. If such a z does not exist then it can be inferred that x was not distributed according to p, i.e. it is anomalous. Our algorithm hinges on this search through the latent space. We illustrate this in Fig. 1.
3.1 ADGAN
To find z, we initialize from z0  pz, where pz is the same noise prior also used during GAN training. For l = 1, . . . , k steps, we backpropagate the reconstruction loss between g(zl) and x, making the subsequent generation g(zl+1) more like x. At each iteration, we also allow a small amount of flexibility to the parametrization of the generator, resulting in a series of mappings from the latent space g0 (z0), . . . , gk (zk) that more and more closely resemble x. Adjusting  gives the generator additional representative capacity, which we found to improve the algorithm's performance. To limit the risk of seeding in unsuitable regions and address the non-convex nature of the underlying optimization problem, the search is initialized from nseed individual points. The key
1That p may be approximated via transformations from a low-dimensional space is an assumption that is implicitly motivated from the manifold hypothesis (Narayanan & Mitter, 2010).
2This lower bound becomes tight for an optimal discriminator, making apparent that V (, )  JS[p|q]. 3This is achieved by restricting the class over which the IPM is optimized to functions that have Lipschitz constant less than one. Note that in Wasserstein GANs, an expression corresponding to a lower bound is optimized instead.

3

Under review as a conference paper at ICLR 2018

Algorithm 1: Anomaly Detection using Generative Adversarial Networks (ADGAN).

Input: parameters (, , nseed, k), sample x, GAN generator g, prior pz, reconstruction loss .

1

initialize

{zj,0

}nseed
j=1



pz

and

{j,0

}nseed
j=1

2 for j = 1, . . . , nseed do

3 for l = 1, . . . , k do

.

4 zj,l  zj,l-1 -  · zj,l-1 (gj,l-1 (zj,l-1), x) 5 j,l  j,l-1 -  · j,l-1 (gj,l-1 (zj,l-1), x) 6 end

7 end

8 return (1/nseed)

nseed j=1

(gj,k (zj,k), x).

idea underlying ADGAN is that if the generator was trained on the same distribution x was drawn from, then the average over the final set of reconstruction losses { (x, gj,k (zj,k))}jn=see1d will assume low values, and high values otherwise.
Our method may also be understood from the standpoint of approximate inversion of the generator. In this sense, the above backpropagation finds latent vectors z that lie close to g-1(x). Inversion of the generator was previously studied in Creswell & Bharath (2016), where it was verified experimentally that this task can be carried out with high fidelity. In addition Lipton & Tripathi (2017) showed that generated images can be successfully recovered by backpropagating through the latent space.4 Jointly optimizing latent vectors and the generator parametrization via backpropagation of reconstruction losses was investigated in detail by Bojanowski et al. (2017). The authors found that it is possible to train the generator entirely without a discriminator, still yielding a model that incorporates many of the desirable properties of GANs, such as smooth interpolations between samples.

3.2 ALTERNATIVE APPROACHES

Given that GAN training also gives us a discriminator for discerning between real and fake samples, one might reasonably consider directly applying the discriminator for detecting anomalies. However, once converged, the discriminator exploits checkerboard-like artifacts on the pixel level, induced by the generator architecture (Odena et al., 2016; Lopez-Paz & Oquab, 2017). While it perfectly separates real from forged data, it is not equipped to deal with samples which are completely unlike the training data. This line of reasoning is verified in Section 4 experimentally.

Another

approach

we

considered

was

to

evaluate

the

likelihood

of

the

final

latent

vectors

{zj,k

}nseed
j=1

under the noise prior pz. This approach was tested experimentally in Section 4, and while it showed

some promise, it was consistently outperformed by ADGAN.

In Schlegl et al. (2017), the authors propose a technique for anomaly detection (called AnoGAN)
which uses GANs in a way somewhat similar to our proposed algorithm. Their algorithm also begins
by training a GAN. In a manner similar to our own, given a test point x, their algorithm searches for a point z in the latent space such that g(z)  x and computes the reconstruction loss. Additionally they use an intermediate discriminator layer d and compute the loss between d(g(z)) and d(x). They use a convex combination of these two quantities as their anomaly score.

In ADGAN we never use the discriminator, which is discarded after training. This makes it easy to couple ADGAN with any GAN-based approach (e.g. LSGAN (Mao et al., 2016)), but also any other differentiable generator network such as VAEs or moment matching networks (Li et al., 2015). In addition, we account for the non-convexity of the underlying optimization by seeding from multiple areas in the latent space. Lastly, during inference we update not only the latent vectors z, but jointly update the parametrization  of the generator.

4While it was shown that any g(z) may be reconstructed from some other z0  Rd , this does not mean that the same holds for an x not in the image of g.
4

Under review as a conference paper at ICLR 2018
4 EXPERIMENTS
Here we present experimental evidence of the efficacy of ADGAN. We compare our algorithm to competing methods on a controlled, classification-type task and show anomalous samples from popular image datasets. Our main findings are that ADGAN:
· outperforms non-parametric as well as available deep learning approaches on two controlled experiments where ground truth information is available;
· may be used on large, unsupervised data (such as LSUN bedrooms) to detect anomalous samples that coincide with what we as humans would deem unusual.
4.1 DATASETS
Our experiments are carried out on three benchmark datasets with varying complexity: (i.) MNIST (LeCun, 1998) which contains grayscale scans of handwritten digits. (ii.) CIFAR-10 (Krizhevsky & Hinton, 2009) which contains color images of real world objects belonging to ten classes. (iii.) LSUN (Xiao et al., 2010), a dataset of images that show different scenes (such as bedrooms, bridges, or conference rooms). For all datasets the training and test splits remain as their default. In addition, all images are rescaled to assume pixel values in [-1, 1].
4.2 METHODS AND HYPERPARAMETERS
We tested the performance of ADGAN against two traditional, non-parametric approaches commonly used for anomaly detection: (i.) KDE with a Gaussian kernel (Parzen, 1962). The bandwidth is determined from maximum likelihood estimation over ten-fold cross validation, with h  {20, 21/2, . . . , 24}. (ii.) One-class support vector machine (OC-SVM) (Scho¨lkopf et al., 1999) with a Gaussian kernel. The inverse length scale is selected from estimating performance on a small holdout set of 1000 samples, and   {2-7, 2-6, . . . , 2-1}. Both non-parametric methods work better when the dimensionality of the data is first reduced. This we achieve via PCA (Pearson, 1901), varying the dimensionality over {20, 40, . . . , 100}; we simply report the results for which best performance on a small holdout set was attained.
We also report the performance of two deep learning approaches: VAEs and DCAEs. For the DCAE we scored according to reconstruction losses, interpreting a high loss as indicative of a new sample differing from samples seen during training. In VAEs we scored by evaluating the evidence lower bound (ELBO). We found this to perform much better than thresholding directly via the prior likelihood in latent space or other more exotic approaches, such as scoring from the variance of the inference network.
In both DCAEs and VAEs we use a convolutional architecture similar to that of DCGAN (Radford et al., 2015), with batch norm regularizations (Ioffe & Szegedy, 2015) and ReLU activations in each layer. We also report the performance of AnoGAN. To put it on equal footing, we pair it with DCGAN (Radford et al., 2015), the same architecture also used for training in our approach.
ADGAN requires a trained generator. For this purpose, we trained on the WGAN objective (2), as this was much more stable than using GANs. The architecture was fixed to that of DCGAN (Radford et al., 2015). Following Metz et al. (2016) we set the dimensionality of the latent space to d = 256.
For ADGAN, the searches in the latent space were initialized from the same noise prior that the GAN was trained on (in our case a normal distribution). To take into account the non-convexity of the problem, we seeded from nseed = 8 points. For the optimization of latent vectors and the parameters of the generator we used the Adam optimizer (Kingma & Ba, 2014).5 The search was carried out for k = 5 steps. Unless otherwise noted, we measured reconstruction quality with a squared L2 loss.
5From a quick parameter sweep, we set the learning rate to  = 0.25 and (1, 2) = (0.5, 0.999). We update the generator with  = 5 · 10-5, the default learning rate recommended in Arjovsky et al. (2017).
5

Under review as a conference paper at ICLR 2018

DATASET

yc

KDE

OC-SVM

DCAE

VAE

AnoGAN

ADGAN (nseed = 1) (nseed = 8)

MNIST

0 0.982 1 0.999 2 0.888 3 0.898 4 0.943 5 0.930 6 0.972 7 0.933 8 0.924 9 0.940

0.994 0.999 0.993 0.933 0.960 0.898 0.998 0.946 0.898 0.942

0.988 0.993 0.917 0.885 0.862 0.858 0.954 0.940 0.823 0.965

0.921 0.999 0.815 0.814 0.879 0.811 0.943 0.886 0.780 0.920

0.990 0.998 0.888 0.913 0.944 0.912 0.925 0.964 0.883 0.958

0.972 0.997 0.874 0.848 0.910 0.916 0.957 0.937 0.816 0.924

0.995 0.999 0.936 0.921 0.936 0.944 0.967 0.968 0.854 0.957

0.941 0.945 0.919 0.877 0.937

0.915

0.947

0 0.705

1 0.493

2 0.734

3 0.522

CIFAR-10

4 5

0.691 0.439

6 0.771

7 0.458

8 0.595

9 0.490

0.590

0.666 0.473 0.675 0.530 0.827 0.438 0.787 0.532 0.720 0.453
0.610

0.656 0.435 0.381 0.545 0.288 0.643 0.509 0.690 0.698 0.705
0.583

0.620 0.664 0.382 0.586 0.386 0.586 0.565 0.622 0.663 0.737
0.581

0.610 0.565 0.648 0.528 0.670 0.592 0.625 0.576 0.723 0.582
0.612

0.627 0.546 0.561 0.595 0.586 0.628 0.604 0.623 0.702 0.591
0.606

0.632 0.529 0.580 0.606 0.607 0.659 0.611 0.630 0.744 0.644
0.624

Table 1: ROC-AUC of several anomaly detection methods. For both MNIST and CIFAR-10, each
model was trained on every class, as indicated by yc, and then used to score against remaining classes. In this performance benchmark, ADGAN with nseed = 8 outperforms all rivaling methods.

4.3 ONE-VERSUS-ALL CLASSIFICATION
The first task is designed to quantify the performance of competing methods. In it, we closely follow the original publication on OC-SVMs (Scho¨lkopf et al., 1999) and begin by training each model on data from a single class from MNIST. We then evaluate performance on 5000 items randomly selected from the test set, which contains samples from all classes. In each trial, we label the classes unseen in training as anomalous.
Ideally, a method assigns images from anomalous classes (say, digits 1-9) a higher anomaly score than images belonging to the normal class (zeros). Varying the decision threshold yields the receiver operating characteristic (ROC), shown in Fig. 2. In Table 1, we report the AUCs that resulted from leaving out each class. The second experiment follows this guideline, only that we carry it out colored images from CIFAR-10, and considered e.g. automobiles the normal class, had them constitute the training set, and subsequently recorded the successful detection of remaining classes.
In these controlled experiments we highlight the ability of ADGAN to perform on-par with traditional methods at the task of inferring anomaly of low-dimensional samples such as those contained in MNIST. On CIFAR-10 we see that KDE and OC-SVM as well as remaining methods ­ which all follow a deep learning approach ­ see a drop in their performance. In both experiments ADGAN performed best, needing eight seeds to achieve this result.
While Table 1 does not contain results from scoring the samples using the GAN discriminator, we did run these experiments for both datasets. Performance was weak, with an average AUC of 0.625 for MNIST and 0.513 for CIFAR-10. Scoring according to the prior likelihood pz of the final latent vectors worked slightly better, resulting in an average AUC of 0.721 for MNIST and 0.554 for CIFAR-10.
6

Under review as a conference paper at ICLR 2018

True positive rate (TPR)

1.0 0.8 0.6 0.4 0.2 0.0
0.0

0.2 0.4 0.6 0.8 False positive rate (FPR)

1.0 0.8 0.6 0.4 0.2 0.0 1.0 0.0

KDE OC-SVM DCAE VAE AnoGAN ADGAN

0.2 0.4 0.6 0.8 False positive rate (FPR)

1.0

Figure 2: ROC curves for one-versus-all prediction of competing methods, averaged over all classes. The figure on the left contains results for MNIST, that on the right those for CIFAR-10. ADGAN is shown with nseed = 8.
4.4 UNSUPERVISED ANOMALY DETECTION
In the second task we showcase the use of ADGAN in a practical setting where no ground truth information is available. For this we first trained a generator on LSUN scenes. We then used ADGAN to find the most anomalous images within the corresponding validation sets containing 300 images.6 The images associated with the highest and lowest anomaly scores are shown in Fig. 3 and Fig. 4. It should be noted that the training set sizes studied in this experiment prohibit the use of non-parametric methods such as KDE and OC-SVMs.
As can be seen from visually inspecting the LSUN scenes flagged as anomalous, our method has the ability to discern usual from unusual samples. We infer that ADGAN is able to incorporate many properties of an image. It does not merely look at colors, but also takes into account whether shown geometries are canonical, or whether an image contains a foreign object (like a caption). Opposed to this, samples that are assigned a low anomaly score are in line with a classes' Ideal Form. They show plain colors, are devoid of foreign objects, and were shot from conventional angles. In the case of bedrooms, some of the least anomalous samples are literally just a bed in a room.
Additional images that were retrieved from applying our method to CIFAR-10 and additional LSUN scenes have been collected into the Appendix.
5 CONCLUSION
We showed that searching the latent space of the generator can be leveraged for use in anomaly detection tasks. To that end, our proposed method: (i.) delivers state-of-the-art performance on standard image benchmark datasets; (ii.) can be used to scan large collections of unlabeled images for anomalous samples.
To the best of our knowledge we also reported the first results of using VAEs for anomaly detection. We remain optimistic that boosting its performance is possible by additional tuning of the underlying neural network architecture or an informed substitution of the latent prior.
Accounting for unsuitable initializations by jointly optimizing latent vectors and generator parameterization are key ingredients to help ADGAN achieve strong experimental performance. Nonetheless, we are confident that approaches such as initializing from an approximate inversion of the generator as in ALI (Donahue et al., 2016; Dumoulin et al., 2016), or substituting the reconstruction
6To quantify the performance on LSUN, we build a test set from combining the 300 validation samples of each scene. After training the generator on bedrooms only we recorded whether ADGAN assigns them low anomaly scores, while assigning high scores to samples showing any of the remaining scenes. This resulted in an AUC of 0.641.
7

Under review as a conference paper at ICLR 2018 loss for a more elaborate variant, such as the Laplacian pyramid loss (Ling & Okada, 2006), can be used to improve our method further.
Figure 3: Starting from the top left, the first three rows show samples contained in the LSUN bedrooms validation set which, according to ADGAN, are the most anomalous (have the highest anomaly score). Again starting from the top left corner, the bottom rows contain images deemed normal (have the lowest score).
Figure 4: Scenes from LSUN showing conference rooms ranked by ADGAN. The top rows contain anomalous samples, the bottom rows scenes categorized as normal.
8

Under review as a conference paper at ICLR 2018
REFERENCES
Martin Arjovsky and Le´on Bottou. Towards principled methods for training generative adversarial networks. arXiv preprint arXiv:1701.04862, 2017.
Martin Arjovsky, Soumith Chintala, and Le´on Bottou. Wasserstein GAN. arXiv preprint arXiv:1701.07875, 2017.
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly learning to align and translate. In International Conference on Learning Representations, 2015.
Piotr Bojanowski, Armand Joulin, David Lopez-Paz, and Arthur Szlam. Optimizing the latent space of generative networks. arXiv preprint arXiv:1707.05776, 2017.
Colin Campbell and Kristin P Bennett. A linear programming approach to novelty detection. In Advances in Neural Information Processing Systems, pp. 395­401, 2001.
Varun Chandola, Arindam Banerjee, and Vipin Kumar. Anomaly detection: A survey. ACM Computing Surveys (CSUR), 41(3):15, 2009.
Antonia Creswell and Anil Anthony Bharath. Inverting the generator of a generative adversarial network. arXiv preprint arXiv:1611.05644, 2016.
Jeff Donahue, Philipp Kra¨henbu¨hl, and Trevor Darrell. Adversarial feature learning. arXiv preprint arXiv:1605.09782, 2016.
Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier Mastropietro, and Aaron Courville. Adversarially learned inference. arXiv preprint arXiv:1606.00704, 2016.
Haimonti Dutta, Chris Giannella, Kirk Borne, and Hillol Kargupta. Distributed top-k outlier detection from astronomy catalogs using the DEMAC system. In Proceedings of the 2007 SIAM International Conference on Data Mining, pp. 473­478. SIAM, 2007.
FY Edgeworth. XLI. on discordant observations. The London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science, 23(143):364­375, 1887.
Andrew F Emmott, Shubhomoy Das, Thomas Dietterich, Alan Fern, and Weng-Keen Wong. Systematic construction of anomaly detection benchmarks from real data. In ACM SIGKDD Workshop on Outlier Detection and Description, pp. 16­21. ACM, 2013.
Sarah M Erfani, Sutharshan Rajasegarar, Shanika Karunasekera, and Christopher Leckie. Highdimensional and large-scale anomaly detection using a linear one-class SVM with deep learning. Pattern Recognition, 58:121­134, 2016.
Eleazar Eskin. Anomaly detection over noisy data using learned probability distributions. In Proceedings of the International Conference on Machine Learning, 2000.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In Advances in Neural Information Processing Systems, pp. 2672­2680, 2014.
Nico Go¨rnitz, Mikio Braun, and Marius Kloft. Hidden markov anomaly detection. In Proceedings of the International Conference on Machine Learning, pp. 1833­1842, 2015.
Wenjie Hu, Yihua Liao, and V Rao Vemuri. Robust anomaly detection using support vector machines. In Proceedings of the International Conference on Machine Learning, pp. 282­289, 2003.
Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by reducing internal covariate shift. In Proceedings of the International Conference on Machine Learning, pp. 448­456, 2015.
Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.
9

Under review as a conference paper at ICLR 2018
Diederik P Kingma and Max Welling. Auto-encoding variational Bayes. arXiv preprint arXiv:1312.6114, 2013.
Alex Krizhevsky and Geoffrey Hinton. Learning multiple layers of features from tiny images. Technical report, University of Toronto, 2009.
Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classification with deep convolutional neural networks. In Advances in Neural Information Processing Systems, pp. 1097­1105, 2012.
Quoc Le and Tomas Mikolov. Distributed representations of sentences and documents. In Proceedings of the International Conference on Machine Learning, pp. 1188­1196, 2014.
Yann LeCun. The MNIST database of handwritten digits, http://yann.lecun.com/exdb/mnist, 1998.
Yujia Li, Kevin Swersky, and Rich Zemel. Generative moment matching networks. In Proceedings of the International Conference on Machine Learning, pp. 1718­1727, 2015.
Haibin Ling and Kazunori Okada. Diffusion distance for histogram comparison. In Computer Vision and Pattern Recognition (CVPR), volume 1, pp. 246­253. IEEE, 2006.
Zachary C Lipton and Subarna Tripathi. Precise recovery of latent vectors from generative adversarial networks. arXiv preprint arXiv:1702.04782, 2017.
David Lopez-Paz and Maxime Oquab. Revisiting classifier two-sample tests. In International Conference on Learning Representations, 2017.
Xudong Mao, Qing Li, Haoran Xie, Raymond YK Lau, Zhen Wang, and Stephen Paul Smolley. Least squares generative adversarial networks. arXiv preprint ArXiv:1611.04076, 2016.
Jonathan Masci, Ueli Meier, Dan Cires¸an, and Ju¨rgen Schmidhuber. Stacked convolutional autoencoders for hierarchical feature extraction. Artificial Neural Networks and Machine Learning (ICANN), pp. 52­59, 2011.
Luke Metz, Ben Poole, David Pfau, and Jascha Sohl-Dickstein. Unrolled generative adversarial networks. arXiv preprint arXiv:1611.02163, 2016.
Alfred Mu¨ller. Integral probability metrics and their generating classes of functions. Advances in Applied Probability, 29(2):429­443, 1997.
Hariharan Narayanan and Sanjoy Mitter. Sample complexity of testing the manifold hypothesis. In Advances in Neural Information Processing Systems, pp. 1786­1794, 2010.
Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-GAN: Training generative neural samplers using variational divergence minimization. In Advances in Neural Information Processing Systems, pp. 271­279, 2016.
Augustus Odena, Vincent Dumoulin, and Chris Olah. Deconvolution and checkerboard artifacts. Distill, 1(10):e3, 2016.
Dirk Ourston, Sara Matzner, William Stump, and Bryan Hopkins. Applications of hidden Markov models to detecting multi-stage network attacks. In Proceedings of the 36th Annual Hawaii International Conference on System Sciences. IEEE, 2003.
Emanuel Parzen. On estimation of a probability density function and mode. The Annals of Mathematical Statistics, 33(3):1065­1076, 1962.
Karl Pearson. On lines and planes of closest fit to systems of points in space. Philosophical Magazine, 2(11):559­572, 1901.
Dan Pelleg and Andrew W Moore. Active learning for anomaly and rare-category detection. In Advances in Neural Information Processing Systems, pp. 1073­1080, 2005.
10

Under review as a conference paper at ICLR 2018
Pavlos Protopapas, JM Giammarco, L Faccioli, MF Struble, Rahul Dave, and Charles Alcock. Finding outlier light curves in catalogues of periodic variable stars. Monthly Notices of the Royal Astronomical Society, 369(2):677­696, 2006.
Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with deep convolutional generative adversarial networks. arXiv preprint arXiv:1511.06434, 2015.
Thomas Schlegl, Philipp Seebo¨ck, Sebastian M Waldstein, Ursula Schmidt-Erfurth, and Georg Langs. Unsupervised anomaly detection with generative adversarial networks to guide marker discovery. In International Conference on Information Processing in Medical Imaging, pp. 146­157. Springer, 2017.
Bernhard Scho¨lkopf, John C Platt, John Shawe-Taylor, Alex J Smola, and Robert C Williamson. Estimating the support of a high-dimensional distribution. Technical Report MSR-TR-99-87, Microsoft Research, 1999.
Tomas Singliar and Milos Hauskrecht. Towards a learning traffic incident detection system. In Proc. of Workshop on Machine Learning Algorithms for Surveillance and Event Detection, International Conference on Machine Learning, 2006.
Bharath K Sriperumbudur, Kenji Fukumizu, Arthur Gretton, Bernhard Scho¨lkopf, and Gert RG Lanckriet. On integral probability metrics, -divergences and binary classification. arXiv preprint arXiv:0901.2698, 2009.
Ilya Sutskever, Oriol Vinyals, and Quoc V Le. Sequence to sequence learning with neural networks. In Advances in Neural Information Processing Systems, pp. 3104­3112, 2014.
Weng-Keen Wong, Andrew W Moore, Gregory F Cooper, and Michael M Wagner. Bayesian network anomaly pattern detection for disease outbreaks. In Proceedings of the International Conference on Machine Learning, pp. 808­815, 2003.
Jianxiong Xiao, James Hays, Krista A Ehinger, Aude Oliva, and Antonio Torralba. Sun database: Large-scale scene recognition from abbey to zoo. In Computer Vision and Pattern Recognition (CVPR), pp. 3485­3492. IEEE, 2010.
Dit-Yan Yeung and Calvin Chow. Parzen-window network intrusion detectors. In International Conference on Pattern Recognition, volume 4, pp. 385­388. IEEE, 2002.
A ADDITIONAL LSUN SCENES
We ran ADGAN on additional scenes from the LSUN dataset showing bridges (Fig. 5), churches (Fig. 6), and restaurants (Fig. 7). Training was performed using DCGAN (Radford et al., 2015) on the WGAN objective (Arjovsky et al., 2017). Reconstruction losses were then measured on the 300 samples contained in the respective validation sets.
B UNSUPERVISED ANOMALY DETECTION ON CIFAR-10
Shown are additional experiments in which we determine anomalous samples of different classes (e.g. birds, cats, dogs) contained in CIFAR-10. ADGAN was applied exactly as described in Section 3, with the search carried out for k = 100 steps. In Fig. 8 we report the highest and lowest reconstruction losses of images that were randomly selected from the test set, conditioned on the respective classes.
11

Under review as a conference paper at ICLR 2018
Figure 5: Additional scenes from LSUN that show images of bridges. The first rows show anomalous samples, the lower rows those deemed normal.
Figure 6: Images of churches, taken from LSUN. The first three rows show samples with high anomaly scores, the last three rows samples with a low score.
Figure 7: Scenes from LSUN that show restaurants. The first rows contain samples with high anomaly scores, the last rows those with low scores.
12

Under review as a conference paper at ICLR 2018
Figure 8: Each three rows, a different subset of samples from the CIFAR-10 test sets are shown. On the left, images deemed anomalous by ADGAN. The right column holds images considered canonical.
13

