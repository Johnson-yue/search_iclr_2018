Under review as a conference paper at ICLR 2018
BOOSTING DILATED CONVOLUTIONAL NETWORKS WITH MIXED TENSOR DECOMPOSITIONS
Anonymous authors Paper under double-blind review
ABSTRACT
The driving force behind deep networks is their ability to compactly represent rich classes of functions. The primary notion for formally reasoning about this phenomenon is expressive efficiency, which refers to a situation where one network must grow unfeasibly large in order to replicate functions of another. To date, expressive efficiency analyses focused on the architectural feature of depth, showing that deep networks are representationally superior to shallow ones. In this paper we study the expressive efficiency brought forth by connectivity, motivated by the observation that modern networks interconnect their layers in elaborate ways. We focus on dilated convolutional networks, a family of deep models delivering state of the art performance in sequence processing tasks. By introducing and analyzing the concept of mixed tensor decompositions, we prove that interconnecting dilated convolutional networks can lead to expressive efficiency. In particular, we show that even a single connection between intermediate layers can already lead to an almost quadratic gap, which in large-scale settings typically makes the difference between a model that is practical and one that is not. Empirical evaluation demonstrates how the expressive efficiency of connectivity, similarly to that of depth, translates into gains in accuracy. This leads us to believe that expressive efficiency may serve a key role in developing new tools for deep network design.
1 INTRODUCTION
One of the key attributes fueling the success of deep learning is the ability of deep networks to compactly represent rich classes of functions. This phenomenon has drawn considerable attention from the theoretical machine learning community in recent years. The primary notion for formally reasoning about the representational abilities of different models is expressive efficiency. Given two network architectures A and B, with size parameters (typically the width of layers across a network) rA and rB, we say that architecture A is expressively efficient w.r.t. architecture B if the following two conditions hold: (i) any function realized by B with size rB can be realized (or approximated) by A with size rA  O(rB); (ii) there exist functions realized by A with size rA that cannot be realized (or approximated) by B unless its size meets rB  (f (rA)) for some superlinear function f . The nature of the function f in condition (ii) determines the type of efficiency taking place ­ if f is exponential then architecture A is said to be exponentially expressively efficient w.r.t. architecture B, and if f is polynomial so is the expressive efficiency of A over B.
To date, works studying expressive efficiency in the context of deep learning (e.g. Delalleau and Bengio (2011); Pascanu et al. (2013); Montufar et al. (2014); Telgarsky (2015); Eldan and Shamir (2015); Poole et al. (2016); Raghu et al. (2016); Cohen et al. (2016b); Cohen and Shashua (2016); Poggio et al. (2015); Mhaskar et al. (2016)) have focused on the architectural feature of depth, showing instances where deep networks are expressively efficient w.r.t. shallow ones. This theoretical focus is motivated by the vast empirical evidence supporting the importance of depth (cf. LeCun et al. (2015)). However, it largely overlooks an additional architectural feature that in recent years is proving to have great impact on the performance of deep networks ­ connectivity. Nearly all state of the art networks these days (e.g. Szegedy et al. (2015); He et al. (2015); Huang et al. (2016b;a)) deviate from the simple feed-forward (chain) approach, running layers connected under various schemes. Whether or not this relates to expressive efficiency remains to be an open question.
A specific family of deep networks gaining increased attention in the deep learning community is that of dilated convolutional networks. These models form the basis of the recent WaveNet (van den Oord et al. (2016)) and ByteNet (Kalchbrenner et al. (2016)) architectures, which provide state of the
1

Under review as a conference paper at ICLR 2018
art performance in audio and text processing tasks. Dilated convolutional networks are frequently applied to sequence data, and consist of multiple succeeding convolutional layers, each comprising non-contiguous filters with a different dilation (distance between neighboring elements). The choice of dilations directly affects the space of functions that may be realized by a network, and while no choice is expressively efficient w.r.t. another, we show in this work that interconnecting networks with different dilations leads to expressive efficiency, and by this demonstrate that connectivity indeed bears the potential to enhance the expressiveness of deep networks.
Our analysis follows several recent works utilizing tensor decompositions for theoretical studies of deep learning (e.g. Janzamin et al. (2015); Sedghi and Anandkumar (2016)), and in particular, builds on the equivalence between hierarchical tensor decompositions and convolutional networks established in Cohen et al. (2016b) and Cohen and Shashua (2016). We show that with dilated convolutional networks, the choice of dilations throughout a network corresponds to determination of the mode (dimension) tree underlying the respective decomposition. We then define the notion of a mixed tensor decomposition, which blends together multiple mode trees, effectively creating a large ensemble of hybrid trees formed from all possible combinations. Mixed tensor decompositions correspond to mixed dilated convolutional networks, i.e. mixtures formed by connecting intermediate layers of different dilated convolutional networks. This allows studying the expressive properties of such mixtures using mathematical machinery from the field of tensor analysis. We fully analyze a particular case of dilated convolutional arithmetic circuits, showing that a single connection between intermediate layers already leads to an almost quadratic expressive efficiency, which in large-scale settings typically makes the difference between a model that is practical and one that is not.
An experiment on TIMIT speech corpus (Garofolo et al. (1993)) evaluates the dilated convolutional network architectures covered by our analysis. We find that interconnecting intermediate layers of different networks improves accuracy, with no additional cost in terms of computation or model capacity. This serves as an indication that with the architectural feature of connectivity, similarly to the case of depth, expressive efficiency and improved accuracies go hand in hand. Accordingly, we believe expressive efficiency may serve a key role in developing new tools for deep network design.
2 SUMMARY OF OUR ANALYSIS AND CONTRIBUTIONS
For the convenience of the reader, we summarize below the analysis and contributions encompassed in this paper. The summarized material is delivered fully in sec. 3, 4, 5 and the appendices referenced therein. To keep the manuscript at reasonable length, much of the material is located in the appendices. We refer the reader to Anonymous for a longer, self-contained version of the text.
Our analysis begins in sec. 3, where we present the dilated convolutional network underlying WaveNet (fig. 1). We consider this to be the baseline architecture and, following Cohen and Shashua (2016), facilitate its study through tensor analysis. The key to introducing tensors into the framework is a discretization of the network's input-output mapping. Namely, f (x[t-N +1], . . . , x[t]) ­ a function realized by the network (t here stands for a natural time index), is conceptually evaluated on a finite (exponentially large) number of input points, generated from all possible assignments of the variables x[t-N +1], . . . , x[t] to each hold one of M predetermined values. This gives rise to an N -dimensional lookup table, with length M in each axis. We refer to this lookup table as a grid tensor (eq. 1). It is shown (app. C) that grid tensors brought forth by the baseline dilated convolutional network (fig. 1) can be expressed as a hierarchical tensor decomposition, referred to as the baseline decomposition (eq. 2).
The baseline decomposition implicitly adheres to a particular tree over tensor modes (axes). This calls for a generalization, and we indeed define a general mode tree (def. 1), followed by a corresponding hierarchical tensor decomposition, referred to as the tree decomposition (eq. 3). Different choices of mode trees lead to tree decompositions characterizing networks with different dilations. We focus on the tree that corresponds to the baseline network (fig. 2(a)), and on those corresponding to networks obtained by swapping dilations of different layers (fig. 2(b), for example).
Armed with a framework for representing different dilated convolutional networks through hierarchical tensor decompositions of different mode trees, we head on in sec. 4 and introduce the notion of a mixed tensor decomposition (eq. 4). The mixed decomposition of two mode trees T and T¯ is based on a preselected set of nodes present in both trees, referred to as mixture nodes. Individual tree decompositions of T and T¯ are run in parallel, where at each mixture node, tensors from the two
2

Under review as a conference paper at ICLR 2018
decompositions are swapped. If N and N¯ are the dilated convolutional networks characterized by T and T¯ (respectively), the mixed decomposition characterizes a mixed (interconnected) network M, formed by rewiring intermediate layers of N into N¯ , and vice versa (see illustration in fig. 3).
The heart of our analysis is sec. 5, where we study the expressive efficiency of the mixed network M over the individual networks N and N¯ . Establishing expressive efficiency requires showing that any function realized by N or N¯ can be realized by M with no more than linear growth in size, whereas the converse does not hold, i.e. there exist functions realizable by M that cannot be realized by N or N¯ unless their size is allowed to grow super-linearly. From a tensor decomposition perspective, this translates to the following two propositions:
(i) any tensor generated by a tree decomposition of T or T¯ can be realized by their mixed decomposition with no more than linear growth in size;
(ii) there exist tensors realizable by the mixed decomposition of T and T¯ that cannot be realized by their individual tree decompositions without a super-linear growth in size.
We address both propositions through the notion of hybrid mode trees (def. 2; fig. 4), which are simply mode trees born from combinations of T and T¯. We prove (claim 1) that the mixed decomposition of T and T¯ can replicate, with no more than linear growth in size, the tree decomposition of any hybrid tree H. Since T and T¯ are in particular hybrid mode trees of themselves, we obtain an affirmative answer to proposition (i). For addressing proposition (ii), we demonstrate a case (with convolutional arithmetic circuits) where there exists a hybrid tree H whose tree decomposition generates tensors that require the tree decompositions of T and T¯ to grow super-linearly. Since the mixed decomposition of T and T¯ can (by claim 1) replicate the tree decomposition of H with no more than linear growth, proposition (ii) is established, and M is indeed expressively efficient w.r.t. N and N¯ (corollary 1).
The central tool for establishing proposition (ii), or more specifically, for demonstrating the existence of a hybrid tree H whose tree decomposition requires those of T and T¯ to grow super-linearly, is a tight analysis of tensors generated by a tree decomposition in terms of their ranks when arranged as matrices (theorem 1). Matricization ranks under hierarchical tensor decompositions are of interest from a pure tensor analysis perspective (cf. Hackbusch (2012)), as well as in the context of deep learning (cf. Cohen and Shashua (2017)). The bounds we provide are much tighter (exact in many cases) and far more general than those existing in the literature, and we expect them to prove useful in different applications. The key idea in deriving these bounds is to consider a matricized form of the tree decomposition, and recursively propagate outwards various matrices (for details see proof of theorem 1 in app. E.2).
To conclude this section, we list below the main contributions of the paper: · We introduce the notion of a mixed tensor decomposition, and prove that it brings forth a representational advantage compared to the individual hierarchical decompositions it comprises. This development is of interest from a pure tensor analysis perspective, independently of convolutional networks, or machine learning in general. · We provide the first formal evidence for the fact that interconnectivity ­ an architectural feature prevalent in state of the art deep learning, brings forth expressive efficiency. · Our central theorem (theorem 1) provides the most comprehensive characterization to date of matricization ranks brought forth by hierarchical tensor decompositions.
3 DILATED CONVOLUTIONAL NETWORKS
Dilated convolutional networks are a family of convolutional networks (LeCun and Bengio (1995)) gaining increased attention in the deep learning community. As opposed to more conventional convolutional architectures (e.g. Krizhevsky et al. (2012)), which are applied primarily to images (and videos), dilated convolutional networks thrive in sequence processing tasks. For example, they underlie Google's WaveNet (van den Oord et al. (2016)) and ByteNet (Kalchbrenner et al. (2016)) models, which provide state of the art performance in audio and text processing tasks.
3.1 BASELINE ARCHITECTURE The dilated convolutional network architecture considered as baseline in this paper is the one underlying WaveNet, depicted in fig. 1. Due to lack of space, we defer its detailed description to app. B,
3

Under review as a conference paper at ICLR 2018

output  rL

L-1 hidden layers

 rL1  r2  r1

input

 r0

Time

t-2L t-2L+1 t-2L+2

   h2[t]  g a2, ,I ,h1[t  2] , a2, ,II ,h1[t]

o[t]y  g aL,y,I , hL1[t  2L1] , aL, y,II , hL1[t]

size-2 conv: dilation-2L-1

size-2 conv: dilation-2
size-2 conv: dilation-1

N:=2L time points

t-3 t-2 t-1 t t+1
 h1[t]  g a1, ,I , x[t 1] , a1, ,II , x[t]

Figure 1: Baseline dilated convolutional network architecture (see description in app. B).

and merely note here that we use g(·) to denote the function combining two size-1 convolutions into a single size-2 convolution with non-linearity (e.g. g(a, b):= max{a + b, 0} for ReLU activation).

Our interest lies on the representational abilities of a network, i.e. on the properties of the input-
output mappings it can realize. For a fixed time point t, o[t] ­ network output at time t, is a function of x[t-2L+1] . . . x[t] ­ network input over the last 2L time points. Taking into account temporal stationarity, and denoting for brevity N :=2L, we may write o[t]y = fy(x[t-N +1], . . . , x[t]) for every output coordinate y  [rL]. We study the functions {fy(·)}y, which obviously depend on the convolution weights {al,,I, al,,II}l,, through the process of discretization. Namely, we choose a
collection of vectors v(1) . . . v(M), and for each output coordinate y, define the following tensor:

Ayd1...dN := fy(v(d1), . . . , v(dN )) d1. . .dN  [M ]

(1)

v(1) . . . v(M) are referred to as discretizers, and Ay is referred to as the grid tensor of fy(·). The

size of a grid tensor is exponential in N , thus treating it directly is intractable. However, the network

admits a compact parameterization of grid tensors in terms of its convolution weights (see app. C,

and the preliminaries in app. A):

For j = 1. . .N :

0,j, = [v(1), . . . , v(M)]   [r0] For l = 1. . .L , j = 1. . .N/2l:

l,j, = Ay = L,1,y

rl-1 =1

al,,I

·

l-1,2j-1,

y  [rL]

g

rl-1 =1

al,,II

·

l-1,2j,

  [rl]

(2)

This parameterization is in fact a hierarchical tensor decomposition. To highlight its correspondence to the baseline dilated convolutional network (fig. 1), we refer to it as the baseline decomposition.

3.2 DILATIONS AND MODE TREES
The baseline decomposition (eq. 2), corresponding to the baseline dilated convolutional network (fig. 1), implicitly adheres to a tree structure1 In this subsection we generalize the underlying tree, and show that the resulting decompositions capture networks with various dilations throughout their convolutional layers. We begin by defining a general (binary) tree over tensor modes:
Definition 1. Let N  N. A binary mode tree2 over [N ] is a full binary tree3 in which:
· Every node is labeled by a subset of [N ]
· There are exactly N leaves, labeled {1} . . . {N }
· The label of an interior (non-leaf) node is the union of the labels of its children
If T is a binary mode tree, we identify its nodes with their labels, i.e. with the corresponding subsets of [N ]. The set of all interior nodes is denoted by int(T )  2[N]; the children of an interior node   [N ] are denoted by CI(; T ), CII(; T )  [N ]; and the parent of a non-root node   [N ] is denoted by P (; T ). Notice that by definition, the root node is labeled [N ].
Recall the definition of grid tensors {Ay}y (eq. 1), and let T be a binary mode tree over [N ]. T induces a hierarchical decomposition of the grid tensors, referred to as its tree decomposition:

4

Under review as a conference paper at ICLR 2018

(a)
dilation-8 dilation-4 dilation-2 dilation-1
(b)
dilation-4 dilation-8 dilation-1 dilation-2

{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

{1,2,3,4,5,6,7,8}

{9,10,11,12,13,14,15,16}

{1,2,3,4}

{5,6,7,8}

{9,10,11,12}

{13,14,15,16}

{1,2}

{3,4}

{5,6}

{7,8}

{9,10}

{11,12}

{13,14}

{15,16}

{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16}

{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

{1,2,3,4,9,10,11,12}

{5,6,7,8,13,14,15,16}

{1,2,3,4}

{5,6,7,8}

{9,10,11,12}

{13,14,15,16}

{1,3}

{2,4}

{5,7}

{6,8}

{9,11}

{10,12}

{13,15}

{14,16}

{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16}

Figure 2: Best viewed in color. Dilated convolutional networks (left) and the mode trees underlying their respective tensor decompositions (right). (a) Baseline architecture ­ dilation 2l-1 in layer l. (b) Architecture
obtained by swapping dilations of even and odd layers.

For j = 1. . .N :

{j}, = [v(1), . . . , v(M)]   [r]

For  in int(T ) (depth-first order):

, = (;T )

r =1

a,,I

·

CI(;T ),

Ay = [N],y y  [r]

g

r =1

a,,II

·

CII(;T ),

  [r] (3)

To conserve space we defer the annotation of the tree decomposition to app. D, noting that rN ­ the number of tensors in each group {,}, is referred to as the size constant of the decomposition.4

Compare the general tree decomposition (eq. 3) to the baseline decomposition (eq. 2). It is not
difficult to see that the latter is a special case of the former, corresponding to a binary mode tree T that is perfect,5 and whose depth-l nodes are adjacent sets of size N/2l (fig. 2(a)-right). This implies
that such a mode tree, when plugged into the tree decomposition, provides a characterization of the baseline dilated convolutional network (fig. 1), i.e. a network whose dilation in layer l is 2l-1
(fig. 2(a)-left). If we were to choose a different mode tree, the corresponding dilated convolutional network would change.6 For example, if we swap connections in the mode tree (fig. 2(b)-right), we
obtain a decomposition that characterizes a network whose dilations are swapped (fig. 2(b)-left).

4 MIXED TENSOR DECOMPOSITIONS
Let T and T¯ be two binary mode trees over [N ] (def. 1). We will now define mixed tensor decompositions, blending together the tree decompositions of T and T¯ (eq. 3). A mixed decomposition of T and T¯ is obtained by choosing a collection of mixture nodes mix(T, T¯). These are nodes (subsets of [N ]) that reside in the interior of both T and T¯, defining locations in the tree decompositions at which tensors will be exchanged. If mix(T, T¯) is chosen as the empty set, the mixed decomposition simply sums the output tensors generated by the tree decompositions of T and T¯. Otherwise, the tree decompositions of T and T¯ progress in parallel, until reaching a mixture node µmix(T, T¯), where they exchange tensors between them. The process continues until all mixture nodes are visited and the root node (of both trees) [N ] is reached. At this point tensors are summed and returned as output. The formal definition of the mixed decomposition, annotated in detail in app. D, is as follows:
1 : For j = 1. . .N :

2 : {j}, = ¯{j}, = [v(1), . . . , v(M)] [r]

r ­ decomposition size constant

3 : For µ in mix(T, T¯)  {[N ]} (inclusion order):

4 : For  in int(T )  2µ \ {nodes in T already visited} (inclusion order):

5 : , = (;T )

r =1

a,,I

·

CI(;T ),

g

r =1

a,,II

·

CII(;T ),

[r]

6 : For ¯ in int(T¯)  2µ \ {nodes in T¯ already visited} (inclusion order):

7 : ¯¯, = (¯;T¯)

r a¯¯,,I · ¯CI(¯;T¯), g
=1

8 : Swap µ,  ¯µ, [r/2]

r a¯¯,,II · ¯CII(¯;T¯),
=1

[r]

9 : Ay = [N],y + ¯[N],y y[r]

(4)

5

Under review as a conference paper at ICLR 2018

(a)

mode tree T
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

{1,2,3,4,5,6,7,8}

{9,10,11,12,13,14,15,16}

mix(T,T)

mode tree T
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

{1,2,3,4,9,10,11,12}

{5,6,7,8,13,14,15,16}

{1,2,3,4}

{5,6,7,8}

{9,10,11,12}

{13,14,15,16}

{1,2,3,4}

{5,6,7,8}

{9,10,11,12}

{13,14,15,16}

{1,2}

{3,4}

{5,6}

{7,8}

{9,10}

{11,12}

{13,14}

{15,16}

{1,3}

{2,4}

{5,7}

{6,8}

{9,11}

{10,12}

{13,15}

{14,16}

{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16}
(b) output
dilation-8

{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16}

network dilation-4
N dilation-2

dilation-1

input

dilation-2
network dilation-1
N dilation-8
dilation-4
Figure 3: To be viewed in color. (a) Two mode trees T and T¯ (given on the right of fig. 2), along with a possible choice of mixture nodes mix(T, T¯) for the mixed decomposition (eq. 4). (b) Mixed dilated convolutional network corresponding to chosen mixed decomposition. Networks N and N¯ associated with T and T¯ (fig. 2, left) are combined through output summation and rewiring of an intermediate convolutional layer (green).
Let N and N¯ be the dilated convolutional networks whose input-output mappings are characterized by the tree decompositions of T and T¯ (respectively). The mixed decomposition of T and T¯ (eq. 4) characterizes the input-output mapping of a mixed dilated convolutional network, formed by summing the outputs of N and N¯ , and interconnecting their intermediate layers. The choice of mixture nodes mix(T, T¯) effectively determines the locations at which networks N and N¯ are interconnected, where an interconnection simply wires into N outputs of a convolutional layer in N¯ , and vice versa. For example, suppose that N , N¯ , T and T¯ are the networks and trees portrayed in fig. 2. A possible choice of mixture nodes, and the resulting mixed network, are illustrated in fig. 3.
5 EXPRESSIVE EFFICIENCY ANALYSIS
As in sec. 4, let N and N¯ be two dilated convolutional networks whose input-output mappings are characterized by the tree decomposition (eq. 3) with mode trees T and T¯ respectively. Consider the mixed decomposition (eq. 4) resulting from a particular choice of mixture nodes mix(T, T¯), and denote its corresponding mixed dilated convolutional network by M. We would like to show that M is expressively efficient w.r.t. N and N¯ . This amounts to addressing the following two propositions:7 Proposition 1. Consider a tree decomposition (eq. 3) with underlying mode tree T or T¯ and size constant r = rtree. This decomposition can be realized by a mixed decomposition of T and T¯ (eq. 4) whose size constant r is linear in rtree. Proposition 2. Consider a mixed decomposition of T and T¯ (eq. 4) with size constant r = rmix. This decomposition can generate grid tensors {Ay}y that cannot be generated by tree decompositions of T or T¯ (eq. 3) unless their size constant r is super-linear in rmix.
As a first step in treating prop. 1 and 2, we define the notion of a hybrid mode tree: Definition 2. Let T and T¯ be binary mode trees over [N ] (def. 1), and let mix(T, T¯) be a corresponding collection of mixture nodes, i.e. a set of nodes (subsets of [N ]) contained in the interior of both T and T¯. We say that H is a hybrid mode tree of T and T¯ w.r.t. mix(T, T¯), if it is a binary mode tree over [N ], whose interior may be generated by the following process:

6

Under review as a conference paper at ICLR 2018

(a)

mode tree T
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

root

mode tree T
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

{1,2,3,4,5,6,7,8}

{1,2,3,4}

{5,6,7,8}

{9,10,11,12,13,14,15,16}

{9,10,11,12}

{13,14,15,16}

mixture nodes

{1,2,3,4,9,10,11,12}

{1,2,3,4}

{5,6,7,8}

{5,6,7,8,13,14,15,16}

{9,10,11,12}

{13,14,15,16}

{1,2}

{3,4}

{5,6}

{7,8}

{9,10}

{11,12}

{13,14}

{15,16}

{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16}

leaves

{1,3}

{2,4}

{5,7}

{6,8}

{9,11}

{10,12}

{13,15}

{14,16}

{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16}

(b) hybrid mode trees

{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

{1,2,3,4,5,6,7,8}

{9,10,11,12,13,14,15,16}

{1,2,3,4,5,6,7,8}

{9,10,11,12,13,14,15,16}

{1,2,3,4,9,10,11,12}

{5,6,7,8,13,14,15,16}

{1,2,3,4}

{5,6,7,8}

{9,10,11,12}

{13,14,15,16}

{1,2,3,4}

{5,6,7,8}

{9,10,11,12}

{13,14,15,16}

{1,2,3,4}

{5,6,7,8}

{9,10,11,12}

{13,14,15,16}

{1,3}

{2,4}

{5,7}

{6,8}

{9,11}

{10,12}

{13,15}

{14,16}

{1,2}

{3,4}

{5,7}

{6,8}

{9,10}

{11,12}

{13,15}

{14,16}

{1,2}

{3,4}

{5,6}

{7,8}

{9,10}

{11,12}

{13,14}

{15,16}

{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16}

{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16}

{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16}

Figure 4: Best viewed in color. (a) Two mode trees T and T¯ along with a possible choice of mixture nodes (same as in fig. 3(a)). (b) Sample of the resulting hybrid mode trees (def. 2).

int(H) =  For µ in mix(T, T¯)  {[N ]} (inclusion order):
S = int(T )  2µ \ {nodes in T already assigned to S} S¯ = int(T¯)  2µ \ {nodes in T¯ already assigned to S¯} int(H) = int(H)S or int(H) = int(H)S¯
In words, for every µ that is either a mixture node or the root node, int(H) includes a segment from either int(T ) or int(T¯), where the segment comprises all descendants of µ from which the path to µ does not cross any other mixture node (see illustration in fig. 4).
Claim 1 below states that with proper weight setting, a mixed decomposition of T and T¯ (eq. 4) with size constant r=rmix, can realize any tree decomposition (eq. 3) with size constant r=rmix/2, if the underlying mode tree is a hybrid of T and T¯. Since T and T¯ are in particular hybrid mode trees of themselves, we obtain an affirmative answer to prop. 1. Claim 1 (proof in app. E.1). Let T and T¯ be binary mode trees over [N ] (def. 1), and let mix(T, T¯) be a corresponding collection of mixture nodes. Consider a mixed decomposition of T and T¯ w.r.t. mix(T, T¯) (eq. 4), and denote its size constant r by rmix. Let H be a hybrid mode tree of T and T¯ w.r.t. mix(T, T¯) (def. 2), and consider the respective tree decomposition (eq. 3), with size constant r=rmix/2. For any setting of weights {a,,I, a,,II}, leading to grid tensors {Ay}y in this tree decomposition, there exists a setting of weights {a,,I, a,,II}, , {a¯¯,,I, a¯¯,,II}¯, in the mixed decomposition, independent of discretizers {v(i)}i[M], that leads to the same grid tensors.8
Claim 1 not only addresses prop. 1, but also brings forth a strategy for treating prop. 2. The strategy is to find a hybrid mode tree H distinct enough from T and T¯ such that its tree decomposition, which according to claim 1 is easily realized by the mixed decomposition, poses a significant challenge for the individual tree decompositions of T and T¯. Hereinafter we pursue this line of reasoning, focusing on the particular case of convolutional arithmetic circuits ­ g(a, b)=a·b. We focus on this special case since it allows the use of a plurality of algebraic tools for theoretical analysis, while at the same time corresponding to models showing promising results in practice (see for example Cohen et al. (2016a); Sharir et al. (2016)).9
To crisply phrase our central theorem, we define the notion of an index set tiled by a mode tree:
Definition 3. Let T be a binary mode tree over [N ] (def. 1), and let I  [N ] be a non-empty set of indexes. A tiling of I by T is a collection of nodes in the tree, denoted (I; T ), which meets the following two requirements: (i) (I;T )  = I (ii) (I; T )P (; T )I. In words, (I; T ) is a set of nodes in T whose disjoint union gives I, where each node is maximal, i.e. its parent in the tree is not a subset of I. See illustration in fig. 6 (supplementary material).
Theorem 1 below provides a tight characterization of grid tensors generated by a tree decomposition in terms of their ranks when matricized (see app. A) w.r.t. an index set. This result is of general interest from both tensor analysis and deep learning perspectives. We use it to establish prop. 2.
Theorem 1 (proof in app. E.2). Let T be a binary mode tree over [N ] (def. 1), and consider the corresponding tree decomposition (eq. 3) with discretizers v(1) . . . v(M) spanning Rr. Assume that g(a, b)=a·b (non-generalized decomposition ­ see app. A), and suppose the generated grid tensors {Ay}y are matricized (see app. A) w.r.t. an index set I[N ], =I=[N ], whose complement we denote by Ic:=[N ]\I. Then, the ranks of the grid tensor matricizations { Ay I}y are:

7

Under review as a conference paper at ICLR 2018
· no greater than rmin{|(I;T )|,|(Ic;T )|} · at least r|{(1,2)(I;T )×(Ic;T ): 1 and 2 are siblings in T with depth>1}| almost always, i.e. for
all configurations of weights {a,,I, a,,II}, but a set of Lebesgue measure zero
Given two mode trees T and T¯, with a corresponding collection of mixture nodes mix(T, T¯), the bounds in theorem 1 can be used to find an index set I and a hybrid mode tree H, such that the tree decomposition of H generates grid tensors whose ranks under matricization w.r.t. I are much higher than those brought forth by the tree decompositions of T and T¯. This fulfills the strategy described above, thereby establishing prop. 2. In app. F we demonstrate this process with the exemplar setting considered throughout the paper (fig. 2, 3, 4). The following corollary is reached: Corollary 1. Let N be the baseline dilated convolutional network (fig. 1), and let N¯ be a network obtained by swapping dilations of groups of k layers (the case k=2 is illustrated in fig. 2(b)-left). Denote by M the mixed network obtained by summing the outputs of N and N¯ , while interconnecting their k'th intermediate layer (and possibly additional layers). Assume the networks' convolutional operator g(·) is a product. Then, besides a negligible set, all functions realized by M with r channels in the layers of each interconnected network, cannot be realized by N (or N¯ ) if the number of channels in each of its layers is less than (r/2)2/(1+21-k).
Corollary 1 (along with claim 1) demonstrates that interconnecting intermediate layers of different dilated convolutional networks can bring forth expressive efficiency. The lower bound in the corollary ­ (r/2)2/(1+21-k), is essentially quadratic when k  4. For example, if k = 4 and the number of channels r in each interconnected network is 128, the lower bound implies that in order to maintain representational abilities with an individual network, over 1500 channels in each layer are required ­ far beyond acceptable practice in deep learning.
6 EXPERIMENT
To assess the practical implications of the expressive efficiency brought forth by mixing dilated convolutional networks, a simple experiment was conducted. We trained a baseline dilated convolutional network N (dilation 2l-1 in layer l ­ see sec. 3.1) with architectural parameters similar to those used in WaveNet (van den Oord et al. (2016)), to classify individual phonemes in the TIMIT acoustic speech corpus (Garofolo et al. (1993)). In addition to the baseline model, we also trained a companion network N¯ obtained by swapping dilations of even and odd layers. The mode trees corresponding to these networks (illustrated in fig. 2) ­ T and T¯, share interior nodes of even depth, thus any subset of those nodes may serve as mixture nodes for a mixed decomposition (eq. 4). We evaluate mixed dilated convolutional networks M corresponding to different choices of mixture nodes (see fig. 3 for illustration of a particular case). Specifically, we consider choices of the following form: mix(T, T¯) := {  int(T )int(T¯) : depth of  (in T and T¯)  threshold}. Varying the threshold yields mixed networks with a varying number of interconnections. In the extreme case mix(T, T¯) =  (high threshold), M simply sums the outputs of N and N¯ . As the threshold decreases interconnections between hidden layers are added ­ starting from hidden layer 2, then including hidden layer 4, and so on. The intuition from our analysis (sec. 5) is that additional interconnections result in a larger ensemble of hybrid mode trees, which in turn boosts the expressive power of the mixed network M. As fig. 5 shows, this intuition indeed complies with the results in practice ­ classification accuracy improves as we increase the number of interconnections, without any additional cost in terms of computation or model capacity.10
It is important to stress that our objective in the experiment was to evaluate, in the most controlled setting possible, the exact models covered by our analysis. We did not compare to state of the art results, as all phoneme recognition rates reported in the literature deviate from our basic setting ­ they heavily rely on data pre-processing (e.g. Mel-Frequency Cepstral Coefficients), prediction postprocessing (e.g. Conditional Random Fields), or both. The recent DeepLab model (Chen et al. (2016)) has demonstrated that when combined with other techniques, mixing dilated convolutions can lead to state of the art image segmentation performance. We are currently pursuing similar results in the context of sequence processing tasks.
To conclude this section, we briefly convey implementation details behind the experiment. TIMIT dataset is an acoustic-phonetic corpus comprising 6300 sentences manually labeled at the phoneme level. We split the data into train and validation sets in accordance with Halberstadt (1998), and
8

Accuracy

Under review as a conference paper at ICLR 2018
0.72 TIMIT Individual Phoneme Classification
0.71 0.70
0.69 Validation Set 0.68 Train Set
0 2 Co4nnections up to lay6er 8 10
Figure 5: Experimental results ­ increasing the number of interconnections between hidden layers of different dilated convolutional networks improves accuracy, with no additional cost in computation or model capacity.
as advised by Lee and Hon (1989), mapped the 61 possible phoneme labels into 39 plus an additional "garbage" label. The task was then to classify individual phonemes into one of the latter categories. In accordance with WaveNet, the baseline dilated convolutional network had ReLU activation (g(a, b)= max{a+b, 0} ­ see sec. 3.1), 32 channels per layer, and input vectors of dimension 256 holding one-hot quantizations of the audio signal. The number of layers L was set to 12, corresponding to an input window of N =2L=4096 samples, spanning 250ms of audio signal ­ standard practice with TIMIT dataset. The framework chosen for running the experiment was Caffe toolbox (Jia et al. (2014)), and we used Adam optimizer (Kingma and Ba (2014)) for training (with default hyper-parameters: moment decay rates 1 = 0.9, 2 = 0.999; learning rate  = 0.001). Weight decay and batch size were set to 10-5 and 128 respectively. Models were trained for 35000 iterations, with learning rate decreased by a factor of 10 after 80% of iterations took place.
7 CONCLUSION
Nearly all state of the art deep networks these days (e.g. Szegedy et al. (2015); He et al. (2015); Huang et al. (2016b;a)) deviate from the simple feed-forward (chain) approach, employing various connectivity schemes between their layers. In this paper we studied the representational implications of connectivity in the context of dilated convolutional networks, a family of deep models delivering state of the art performance in audio and text processing tasks, underlying Google's WaveNet (van den Oord et al. (2016)) and ByteNet (Kalchbrenner et al. (2016)). We formulated our study through the notion of expressive efficiency, which refers to a situation where one network must grow unfeasibly large to realize (or approximate) functions of another. Our analysis shows that interconnecting hidden layers of different dilated convolutional networks can bring forth a model that is expressively efficient w.r.t. the individual networks it comprises. In particular, we show that a single connection between hidden layers can already lead to an almost quadratic gap, which in large-scale settings typically makes the difference between a model that is practical and one that is not. We empirically evaluate the analyzed networks, and find that the expressive efficiency brought forth by interconnectivity coincides with improved accuracies.
To date, formal analyses studying expressive efficiency have focused on the architectural feature of depth, showing instances where deep networks are expressively efficient w.r.t. shallow ones. These studies were motivated by the vast empirical evidence supporting the importance of depth. Our work thus provides a second exemplar of an architectural feature for which expressive efficiency and superior accuracies go hand in hand. This leads us to believe that expressive efficiency may serve a key role in the development of new tools for deep network design.
REFERENCES
A. Anonymous. Anonymous title. Anonymous venue.
Richard Bellman. Introduction to matrix analysis, volume 960. SIAM, 1970.
Richard Caron and Tim Traynor. The zero set of a polynomial. WSMR Report 05-02, 2005.
Liang-Chieh Chen, George Papandreou, Iasonas Kokkinos, Kevin Murphy, and Alan L Yuille. Deeplab: Semantic image segmentation with deep convolutional nets, atrous convolution, and fully connected crfs. arXiv preprint arXiv:1606.00915, 2016.
Nadav Cohen and Amnon Shashua. Convolutional rectifier networks as generalized tensor decompositions. International Conference on Machine Learning (ICML), 2016.
9

Under review as a conference paper at ICLR 2018
Nadav Cohen and Amnon Shashua. Inductive bias of deep convolutional networks through pooling geometry. International Conference on Learning Representations (ICLR), 2017.
Nadav Cohen, Or Sharir, and Amnon Shashua. Deep simnets. IEEE Conference on Computer Vision and Pattern Recognition (CVPR), 2016a.
Nadav Cohen, Or Sharir, and Amnon Shashua. On the expressive power of deep learning: A tensor analysis. Conference On Learning Theory (COLT), 2016b.
Olivier Delalleau and Yoshua Bengio. Shallow vs. deep sum-product networks. In Advances in Neural Information Processing Systems, pages 666­674, 2011.
Ronen Eldan and Ohad Shamir. The power of depth for feedforward neural networks. arXiv preprint arXiv:1512.03965, 2015.
John S Garofolo, Lori F Lamel, William M Fisher, Jonathon G Fiscus, and David S Pallett. Darpa timit acousticphonetic continous speech corpus cd-rom. nist speech disc 1-1.1. NASA STI/Recon technical report n, 93, 1993.
Wolfgang Hackbusch. Tensor Spaces and Numerical Tensor Calculus, volume 42 of Springer Series in Computational Mathematics. Springer Science & Business Media, Berlin, Heidelberg, February 2012.
Andrew K Halberstadt. Heterogeneous acoustic measurements and multiple classifiers for speech recognition. PhD thesis, Massachusetts Institute of Technology, 1998.
Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recognition. arXiv preprint arXiv:1512.03385, 2015.
Gao Huang, Zhuang Liu, Kilian Q Weinberger, and Laurens van der Maaten. Densely connected convolutional networks. arXiv preprint arXiv:1608.06993, 2016a.
Gao Huang, Yu Sun, Zhuang Liu, Daniel Sedra, and Kilian Q Weinberger. Deep networks with stochastic depth. In European Conference on Computer Vision, pages 646­661. Springer, 2016b.
Majid Janzamin, Hanie Sedghi, and Anima Anandkumar. Beating the Perils of Non-Convexity: Guaranteed Training of Neural Networks using Tensor Methods. CoRR abs/1506.08473, 2015.
Yangqing Jia, Evan Shelhamer, Jeff Donahue, Sergey Karayev, Jonathan Long, Ross Girshick, Sergio Guadarrama, and Trevor Darrell. Caffe: Convolutional architecture for fast feature embedding. In Proceedings of the 22nd ACM international conference on Multimedia, pages 675­678. ACM, 2014.
Frank Jones. Lebesgue integration on Euclidean space. Jones & Bartlett Learning, 2001.
Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Koray Kavukcuoglu. Neural machine translation in linear time. arXiv preprint arXiv:1610.10099, 2016.
Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.
Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. ImageNet Classification with Deep Convolutional Neural Networks. Advances in Neural Information Processing Systems, pages 1106­1114, 2012.
Yann LeCun and Yoshua Bengio. Convolutional networks for images, speech, and time series. The handbook of brain theory and neural networks, 3361(10), 1995.
Yann LeCun, Yoshua Bengio, and Geoffrey Hinton. Deep learning. Nature, 521(7553):436­444, May 2015.
K-F Lee and H-W Hon. Speaker-independent phone recognition using hidden markov models. IEEE Transactions on Acoustics, Speech, and Signal Processing, 37(11):1641­1648, 1989.
Hrushikesh Mhaskar, Qianli Liao, and Tomaso Poggio. Learning real and boolean functions: When is deep better than shallow. arXiv preprint arXiv:1603.00988, 2016.
Guido F Montufar, Razvan Pascanu, Kyunghyun Cho, and Yoshua Bengio. On the number of linear regions of deep neural networks. In Advances in Neural Information Processing Systems, pages 2924­2932, 2014.
Vinod Nair and Geoffrey E Hinton. Rectified linear units improve restricted boltzmann machines. In Proceedings of the 27th International Conference on Machine Learning (ICML-10), pages 807­814, 2010.
10

Under review as a conference paper at ICLR 2018
Razvan Pascanu, Guido Montufar, and Yoshua Bengio. On the number of inference regions of deep feed forward networks with piece-wise linear activations. arXiv preprint arXiv, 1312, 2013.
Tomaso Poggio, Fabio Anselmi, and Lorenzo Rosasco. I-theory on depth vs width: hierarchical function composition. Technical report, Center for Brains, Minds and Machines (CBMM), 2015.
Ben Poole, Subhaneil Lahiri, Maithreyi Raghu, Jascha Sohl-Dickstein, and Surya Ganguli. Exponential expressivity in deep neural networks through transient chaos. In Advances In Neural Information Processing Systems, pages 3360­3368, 2016.
Maithra Raghu, Ben Poole, Jon Kleinberg, Surya Ganguli, and Jascha Sohl-Dickstein. On the expressive power of deep neural networks. arXiv preprint arXiv:1606.05336, 2016.
Hanie Sedghi and Anima Anandkumar. Training input-output recurrent neural networks through spectral methods. arXiv preprint arXiv:1603.00954, 2016.
Or Sharir, Ronen Tamari, Nadav Cohen, and Amnon Shashua. Tensorial mixture models. arXiv preprint arXiv:1610.04167, 2016.
Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed, Dragomir Anguelov, Dumitru Erhan, Vincent Vanhoucke, and Andrew Rabinovich. Going Deeper with Convolutions. CVPR, 2015.
Matus Telgarsky. Representation benefits of deep feedforward networks. arXiv preprint arXiv:1509.08101, 2015.
Aa¨ron van den Oord, Sander Dieleman, Heiga Zen, Karen Simonyan, Oriol Vinyals, Alex Graves, Nal Kalchbrenner, Andrew Senior, and Koray Kavukcuoglu. Wavenet: A generative model for raw audio. CoRR abs/1609.03499, 2016.
11

Under review as a conference paper at ICLR 2018
NOTES
1 For every (l, j), there exists a group of tensors {l,j, } , formed through combinations of tensors from its "child" groups {l-1,2j-1, } and {l-1,2j, } .
2 Binary mode trees lead to decompositions (eq. 3) that correspond to networks with size-2 convolutions. We limit ourselves to this case for simplicity of presentation. Our formulation can easily be extended to account for convolutions of arbitrary size by considering mode trees that are not necessarily binary, and by modifying the decomposition in eq. 3 to take (generalized) tensor products between an arbitrary number of tensors (not necessarily two).
3 A full binary tree is a tree in which all interior (non-leaf) nodes have exactly two children.
4 In general the number of tensors in the group {, } may vary across nodes , but for simplicity of presentation we assume that all groups comprise exactly r tensors.
5 A perfect binary tree is a tree in which all interior (non-leaf) nodes have exactly two children and all leaves have exactly the same depth.
6 It is important to stress that not all choices of mode trees lead to networks resembling ones used in practice. For example, if different leaves in a tree have different depths, different inputs in the corresponding network pass through a different number of layers. Conversely, not every type of dilated convolutional network used in practice corresponds to a mode tree ­ only ones in which an input is connected to the output through a single path.
7 A few remarks are in order at this point:
· The number of channels in each layer of N or N¯ corresponds to the constant r in the respective tree decomposition (eq. 3 with underlying mode tree T or T¯ respectively). Similarly, the number of channels in each layer of each interconnected network in M corresponds to r in the respective mixed decomposition (eq. 4). In both the tree and mixed decompositions, r, referred to as the size constant, stands for the number of tensors {, } (respectively {¯¯, } ) held in each node  (respectively ¯). We set this number uniformly across nodes, corresponding to uniformly sized layers across networks, merely for simplicity of presentation. Our formulations and analysis can easily be adapted to account for varying layer sizes, by allowing different nodes in a decomposition to hold a different number of tensors. Note that an implication of our uniform setting is that a network's input and output dimensions vary along with the size of its hidden layers. When replicating a function realized by a network using a larger network, we simply pad input vectors with zeros, and ignore the excess output coordinates.
· An additional simplification we made relates to weight sharing. In both the tree and mixed decompositions, each interior node  (respectively ¯) has a separate set of weights {a,,I, a,,II} (respectively {a¯¯,,I, a¯¯,,II} ). This implies that in the corresponding networks, convolution filters may vary through time, i.e. different weights may be used against different portions of a convolved sequence. The more commonplace setting of stationary filters (standard convolutions) is obtained by restricting different nodes in a decomposition to possess the same weights. We do not introduce such restrictions into our formulations, as they make little difference in terms of the analysis, but on the other hand significantly burden presentation.
8 In accordance with the remark given at the beginning of this section, when using the (larger) mixed decomposition, we pad discretizers with zeros, and ignore the excess output tensors.
9 Treatment of additional cases can be achieved by deriving a result analogous to theorem 1, i.e. by characterizing matricization ranks brought forth by a tree decomposition (eq. 3) whose underlying operator g(·) corresponds to the architecture of interest (e.g. g(a, b) = max{a + b, 0} for networks with ReLU activation). Results along this line were established in Cohen and Shashua (2016). We defer their adoption and development to future work.
10 We note that in addition to the mixed dilated convolutional network M, we also evaluated the individual networks N and N¯ ­ both reached accuracies comparable to M in the case of zero interconnections (output summation only).
12

Under review as a conference paper at ICLR 2018

mode tree T
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

{1,2,3,4,5,6,7,8}

{9,10,11,12,13,14,15,16}

{1,2,3,4}

{5,6,7,8}

{9,10,11,12}

{13,14,15,16}

{1,2}

{3,4}

{5,6}

{7,8}

{9,10}

{11,12}

{13,14}

{15,16}

{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16}

index set I  3, 4,5, 6, 7,8,9,11,12

tiling I ;T   3, 4,5,6,7,8,9,11,12

Figure 6: Mode tree T along with a specific index set I and the resulting tiling (I; T ) (def. 3).

A PRELIMINARIES

The constructions and analyses delivered in this paper rely on concepts from the field of tensor analysis. Below we provide the minimal background required in order to follow our arguments.1

The core concept in tensor analysis is a tensor, which for our purposes may simply be thought of as a multi-dimensional array. The order of a tensor is defined to be the number of indexing entries in the array, which are referred to as modes. The dimension of a tensor in a particular mode is defined as the number of values that may be taken by the index in that mode. For example, a 4-by-3 matrix is a tensor of order 2, i.e. it has two modes, with dimension 4 in mode 1 and dimension 3 in mode 2. If A is a tensor of order N and dimension Mi in each mode i  {1, . . . , N }, the space of all configurations it can take is denoted, quite naturally, by RM1×···×MN .

A fundamental operator in tensor analysis is the tensor product (also known as outer product), which we denote by . It is an operator that intakes two tensors A  RM1×···×MP and B  RMP+1×···×MP+Q (orders P and Q respectively), and returns a tensor A  B  RM1×···×MP+Q (order P +Q) defined by: (AB)d1...dP +Q = Ad1...dP ·BdP +1...dP +Q . In Cohen and Shashua (2016) a generalization of the tensor product is defined, by replacing multiplication with a general operator g(·). Specifically, for a function g : R × R  R that is commutative (g(a, b) = g(b, a) for all a, b  R), the generalized tensor product, denoted g, is defined to be the operator that for input tensors A  RM1×···×MP and B  RMP+1×···×MP+Q (orders P and Q respectively), returns the tensor A g B  RM1×···×MP +Q (order P + Q) given by: (A g B)d1...dP +Q = g(Ad1...dP , BdP +1...dP +Q ).
An additional operator we make use of is mode permutation. Let A be a tensor of order N , and let (·) be a permutation over N (bijective mapping from {1, . . . , N } to itself). The mode permutation of A w.r.t. (·), which by a slight abuse of notation is denoted (A), is the order-N tensor defined by: (A)d1...dN = A .d(1)...d(N) In words, (A) is the tensor obtained by rearranging the modes of A in accordance with (·).

When studying tensors, it is oftentimes useful to arrange them as matrices, a procedure referred to as

matricization. Let A be a tensor of order N and dimension Mi in each mode i  {1, . . . , N }, and let I  {1, . . . , N } be a set of mode indexes, whose complement {1, . . . , N } \ I we denote by Ic. We

may write I = {i1, . . . , i|I|} where i1 < · · · < i|I|, and similarly Ic = {j1, . . . , j|Ic|} where j1 <

· · · < j|Ic|. The matricization of A w.r.t. I, denoted A I, is the

|I| t=1

Mit

-by-

|I c | t=1

Mjt

matrix

holding the entries of A such that Ad1...dN is placed in row index 1 +

|I| t=1

(dit

-

1)

|I| t =t+1

Mit

and column index 1 +

|I c | t=1

(djt

-

1)

|I c | t =t+1

Mjt

.

If

I

=



or

I

=

{1, . . . , N },

then

by

definition

A I is a row or column (respectively) vector of dimension

N t=1

Mt

holding

Ad1 ...dN

in

entry

1+

N t=1

(dt

-

1)

N t =t+1

Mt

.

To conclude this appendix, we hereinafter list notational conventions used throughout the paper. We denote tensors with uppercase calligraphic letters, e.g. A, and in some cases, with the Greek letters ,  or . Subscripts are used to refer to individual tensor entries, e.g. Ad1...dN  R, whereas
1 The viewpoint we adopt is actually a concrete special case of a more abstract algebraic viewpoint of tensor analysis, as presented for example in Hackbusch (2012). We limit ourselves to this concrete viewpoint since it suffices for our needs and is easier to grasp.

13

Under review as a conference paper at ICLR 2018

superscripts indicate the location of a tensor in some annotated collection, for example Ay stands for the y'th tensor in the collection A1 . . . Ar. Vectors are typically denoted with boldface lowercase
letters, e.g. a, where again subscripts refer to an individual entry (e.g. a  R), and superscripts to the identity of a vector within some annotated collection (e.g. al,j is the (l, j)'th vector in the set {al,j}l=1...L,j=1...N ). We use non-boldface lowercase or uppercase letters (e.g. l or L) to denote
scalars, and in this case, both subscripts and superscripts distinguish between objects in an annotated set (e.g. li, li, Li, Li  R). Finally, for a positive integer N  N, we use [N ] as shorthand for the set {1, . . . , N }.

B DETAILED DESCRIPTION OF THE BASELINE ARCHITECTURE
In this appendix we describe in detail the architecture of the baseline dilated convolutional network (fig. 1). The input to the network is a sequence of vectors (x[t])t  Rr0 , where t is a natural time index. A size-2 convolutional layer with dilation-1, i.e. with contiguous filters, maps this input into the hidden sequence (h(1)[t])t  Rr1 . Specifically, entry   [r1] of h(1)[t] is obtained by applying the filter formed by a1,,I, a1,,II  Rr0 to time points t-1, t of the input: h(1)[t] = g( a1,,I, x[t-1] , a1,,II, x[t] ). We use g(·) here to denote the binary function combining two size-1 convolutions into a single size-2 convolution with non-linearity. Different choices of g(·) lead to different convolutional operators, for example g(a, b) := max{a + b, 0} leads to standard convolution followed by rectified linear activation (ReLU, Nair and Hinton (2010)), whereas g(a, b) = a·b gives rise to what is known as a convolutional arithmetic circuit (Cohen et al. (2016b)). Following the first hidden layer, L-1 size-2 convolutional layers with increasing dilations are applied. Specifically, for l = 2, . . ., L-1, hidden layer l maps the sequence (h(l-1)[t])t  Rrl-1 into (h(l)[t])t  Rrl using filters with dilation-2l-1, i.e. with an internal temporal gap of 2l-1-1 points: h(l)[t] = g( al,,I, h(l-1)[t-2l-1] , al,,II, h(l-1)[t] ). The last convolutional layer maps (h(L-1)[t])t into network output sequence (o[t])t  RrL using filters with dilation-2L-1: o[t]y = g( aL,y,I, h(L-1)[t-2L-1] , aL,y,II, h(L-1)[t] ).
Altogether, the architectural parameters of the network are the number of convolutional layers L, the convolutional operator g(·), the input dimension r0, the number of channels rl for each hidden layer l  [L-1], and the output dimension rL. The learnable parameters are the convolution weights al,,I, al,,II  Rrl-1 for channel   [rl] of layer l  [L].

C DERIVATION OF THE BASELINE DECOMPOSITION

In this appendix we derive the baseline decomposition (eq. 2) ­ a parameterization of grid ten-
sors (eq. 1) discretizing input-output mappings of the baseline dilated convolutional network
(fig. 1; app. B). As discussed in sec. 3.1, o[t] ­ the network output at time t, is a function of x[t-N +1] . . . x[t] ­ its input over the last N := 2L time points. We would like to show that for any d1. . .dN  [M ], entry (d1, . . . , dN ) of a tensor Ay generated by eq. 2, is equal to coordinate y of network output o[t] under the following input assignment: x[t-N +1] = v(d1), . . . , x[t] = v(dN ).
To achieve this, we prove by induction that under the latter assignment, for every l  [L]  {0}, j  [N/2l] and   [rl], coordinate  of the network's depth-l sequence (input (x[t])t for l = 0; hidden sequence (h(l)[t])t for l  [L - 1]; output (o[t])t for l = L) at time t - N + j·2l, is equal to entry (d(j-1)2l+1, . . . , d(j-1)2l+2l ) of the tensor l,j, in the baseline decomposition (eq. 2). The desired result then follows from the case l = L, j = 1,  = y.

When l = 0, the inductive hypothesis is trivial ­ coordinate  of the input sequence at time t-N +j,

i.e. x[t - N + j], is by definition of our assignment equal to v(dj) ­ entry dj of the tensor 0,j,

(see eq. 2). Assume now that the inductive hypothesis holds whenever l = k, and consider the

tensor k+1,j, for some j  [N/2k+1] and   [rk+1]. From the baseline decomposition (eq. 2):

k+1,j, =

rk =1

ak+1,,I

·

k,2j-1,

g

rk =1

ak+1,,II

·

k,2j,

Focusing on entry (d(j-1)2k+1+1, . . . , d(j-1)2k+1+2k+1 ) of the left-hand side, while recalling the definition of the generalized tensor product g (app. A), we may write:

 =k+1,j,
d(j -1)2k+1 +1 ,...,d(j -1)2k+1 +2k+1

rk k+1,,I
g a ·  , a ·  (5)=1 

k,2j-1, d(2j-2)2k +1,...,d(2j-2)2k +2k

rk k+1,,II =1 

k,2j, d(2j-1)2k +1,...,d(2j-1)2k +2k

14

Under review as a conference paper at ICLR 2018

By our inductive assumption:

k,2j-1,
d(2j-2)2k +1,...,d(2j-2)2k +2k
k,2j,
d(2j-1)2k +1,...,d(2j-1)2k +2k

= h(k)[t - N + (2j - 1)·2k] = h(k)[t - N + 2j·2k]

  [rk]   [rk]

where we overload notation in the case k = 0, letting (h(0)[t])t stand for the input sequence (x[t])t. Plugging the latter into eq. 5, we obtain:

 =k+1,j,
d(j -1)2k+1 +1 ,...,d(j -1)2k+1 +2k+1
g ak+1,,I, h(k)[t - N + (2j - 1)·2k] , ak+1,,II, h(k)[t - N + 2j·2k]

By the definition of the baseline dilated convolutional network (fig. 1; app. B), the latter expression is precisely equal to coordinate  of the sequence (h(k+1)[t])t (or (o[t])t if k = L - 1) at time t - N + j·2k+1. This proves that our inductive hypothesis holds when l = k + 1, and in general.

D ANNOTATIONS OF THE TREE AND MIXED DECOMPOSITIONS
In this appendix we describe the tree and mixed decompositions (eq. 3 and 4 respectively), whose annotations were omitted from the text due to lack of space.
Let T be a binary mode tree over [N ] (def. 1). The tree decomposition of T (eq. 3) iteratively assigns a group of (2||-order) tensors {,}[r] for each node  in T , based on weight vectors {a,,I, a,,II  Rr}[r] defined for each interior node int(T ). Specifically, the decomposition traverses through T in a depth-first fashion, and for each node , assigns the tensor group {,} as follows:
· If  is a leaf, i.e. ={j} for some j  [N ], its tensors ({,}) are set directly by the discretizers v(1) . . . v(M) (v(i) in eq. 3 stands for coordinate  of v(i)).
· If  is an interior node, i.e. int(T ), its tensors are set through combinations of the tensors of its children ({CI(;T ), } and {CII(;T ), } ). These combinations are based on the weight vectors {a,,I} and {a,,II} , as depicted in eq. 3 (a,,I and a,,II there stand for coordinate  of a,,I and a,,II respectively). The permutation (;T )(·) in the assignment of , arranges the modes of the tensor (see app. A) such that these comply with a sorted ordering of . Namely, if we denote by i1< · · · <i|CI(;T )| the elements of CI(; T )[N ], and by j1< · · · <j|CII(;T )| the elements of CII(; T )[N ], the permutation (;T ) : [2||]  [2||] is the one that sorts the tuple (i1, . . . , i|CI(;T )|, j1, . . . , j|CII(;T )|) in ascending order.
The final outcome of the tree decomposition, i.e. the generated grid tensors {Ay}y, are precisely the tensor group {[N],} corresponding to the root of T ([N ]).
Heading on to the mixed decomposition (eq. 4), let T¯ be an additional binary mode tree over [N ] (def. 1). When considering the tree decomposition of T¯, we use {¯¯,}[r] to denote the tensor group of node ¯T¯, and {a¯¯,,I, a¯¯,,II}[r] to denote the weights of interior node ¯int(T¯). For a chosen collection of mixture nodes mix(T, T¯)int(T )int(T¯), the mixed decomposition of T and T¯ blends together their tree decompositions by running these in parallel, while exchanging tensors whenever a mixture node is reached. The procedure is formulated in eq. 4 ­ annotation follows:
· As in the basic tree decomposition (eq. 3), the first step (lines 1-2) is to assign tensors corresponding to the leaf nodes ({1} . . . {N }) via discretizers v(1) . . . v(M).
· The outer loop in line 3 traverses µ through mixture nodes and the root node in inclusion order, i.e. such that a node (subset of [N ]) is always reached after all nodes strictly contained in it.
· Lines 4-5 (respectively 6-7) are the same as in the tree decomposition (eq. 3), except that instead of running through the entire interior of T (respectively T¯), they cover a segment of it. This segment continues where the previous ones left off, and comprises only nodes (subsets of [N ]) contained in µ (including µ itself).

15

Under review as a conference paper at ICLR 2018

· Line 8 is where the mixing takes place ­ here half the tensors corresponding to node µ in the decomposition of T ({µ,}), are exchanged for half the tensors corresponding to µ in the decomposition of T¯ ({¯µ,}).
· Finally, after µ has reached the root node [N ] and the decompositions of T and T¯ have concluded, line 9 sums the output tensors of these decompositions ({[N],y}y and {¯[N],y}y respectively), producing the grid tensors {Ay}y.

E DEFERRED PROOFS

E.1 PROOF OF CLAIM 1
We initiate the proof by introducing notations that will allow a more compact presentation. Hereinafter, we let {aH,,,I, aH,,,II  Rrmix/2}int(H),[rmix/2] stand for the weights in the tree decomposition of the hybrid mode tree H (eq. 3 with size constant r = rmix/2 and underlying mode tree given by def. 2). Similarly, we use {aT,,,I, aT,,,II  Rrmix }int(T ),[rmix] and {aT¯,,,I, aT¯,,,II  Rrmix }int(T¯),[rmix] to denote the weights, corresponding to T and T¯ (respectively), in the mixed decomposition (eq. 4 with size constant r = rmix). Recall that by construction (def. 2), int(H) ­ the interior of H, consists of different segments (collections of nodes), each taken from either int(T ) or int(T¯). We define t : int(H)  {T, T¯} to be the function indicating which tree an interior node in H came from. Specifically, if the node int(H) originated from T we have t() = T , and on the other hand, if its source is T¯ then t() = T¯. By convention, feeding t(·) with an argument outside int(H) yields something that is different from both T and T¯. For example, if int(H) is the root node, i.e.  = [N ], then P (; H) ­ its parent in H, is undefined and we have t(P (; H))=t(). Similarly, if the child CI(; H) of int(H) is a leaf, it is outside the domain of t(·) and thus t()=t(CI(; H)).
Given a setting of weights {aH,,,I, aH,,,II}, for the tree decomposition of H, we would like to show that there exists a setting of weights {aT,,,I, aT,,,II}, and {aT¯,,,I, aT¯,,,II}, for the mixed decomposition of T and T¯, such that the latter generates grid tensors identical to those of the former. More precisely, for any collection of discretizers {v(i)  Rrmix/2}i[M] fed into the tree decomposition of H, leading the latter to produce grid tensors {Ay}y[rmix/2], we would like the mixed decomposition to be such that when fed with the padded discretizers {[(v(i)) 0]  Rrmix }i[M], the first rmix/2 grid tensors it generates are equal to {Ay}y[rmix/2]. We prove existence of the sought after weight setting constructively, by presenting an explicit procedure for assigning {aT,,,I, aT,,,II}, and {aT¯,,,I, aT¯,,,II}, based on {aH,,,I, aH,,,II}, :
Initialize:
aT,,,I = aT,,,II = 0 int(T ),   [rmix]
aT¯,,,I = aT¯,,,II = 0 int(T¯),   [rmix]
For  in int(H) (depth-first order):

at(

),,

+

1 2

rmix

,I

=

0 (aH,,,I) (aH,,,I) 0

, t() = t(CI(; H)) , t() = t(CI(; H))

  [rmix/2]

at(

),,

+

1 2

rmix

,II

=

0 (aH,,,II) (aH,,,II) 0

, t() = t(CII(; H)) , t() = t(CII(; H))

  [rmix/2]

If t(P (; H)) = t() :

Swap

at(),,,I



at(

),,+

1 2

rmix

,I

  [rmix/2]

Swap

at(),,,II



at(

),,

+

1 2

rmix

,II

  [rmix/2]

(6)

The idea behind this assignment is as follows. The computation corresponding to a node in the tree decomposition of H, is carried out, in the mixed decomposition of T and T¯, by the respective node in the respective source tree. That is to say, the computation of int(H) in the tree decomposition is carried out by int(t()) in the mixed decomposition. int(t()) uses half (rmix/2) of its

16

Under review as a conference paper at ICLR 2018

weight vectors, and in each used weight vector, half (rmix/2) of the coordinates hold actual (nonzero) values ­ a copy of the respective weight from int(H). The choice of which weight vectors
to use, and which coordinates to use in the active weight vectors, depends on the tree-transitioning scheme. If the parent of  in H came from the same tree as , i.e. t(P (; H)) = t(), int(t()) in the mixed decomposition uses weight vectors with higher indexes (rmix/2 + [rmix/2]), as these relate to tensors that are not exchanged (see eq. 4). On the other hand, if t(P (; H))=t(), weight vectors with lower indexes (  [rmix/2]) are used, so that the computations (tensors) will be sent to the opposite tree. The analogous rationale holds for the children of  in H (CI(; H) and CII(; H)). If a child came from the same tree as , upper coordinates of the appropriate weight vectors are used,
so that computations (tensors) coming from the present tree are collected. On the other hand, if the
child came from the opposite tree, lower coordinates are used and computations (tensors) from that
tree are fetched. Altogether, the assignment in eq. 6 meets our requirements, and thus concludes the
proof.

E.2 PROOF OF THEOREM 1
E.2.1 SKETCH
The proof proceeds in three stages. In the first stage we matricize the tree decomposition of T , i.e. transform it from a tensor decomposition generating {Ay}y to a matrix decomposition generating { Ay I}y. In this transformation, instances of the tensor product  (g with g(a, b) = a·b ­ see app. A) convert to a Kronecker product . The second stage of the proof establishes the upper bound stated in the theorem, by showing that for each y, Ay I is equal to a product of matrices, one of which has size r|(I;T )|-by-r|(Ic;T )|. The key idea in this stage is the propagation of elements out of the matrix decomposition, using the relation (AA ) (BB ) = (A A )(B B ). The third and final stage of the proof establishes the lower bound stated in the theorem. Here again, elements are propagated out of the matrix decomposition, allowing the construction of a concrete configuration of weights ({a,,I, a,,II},) for which the lower bound holds. The fact that the lower bound holds almost always is then a direct corollary of app. G, where it is shown that the tree decomposition admits maximal matricization ranks almost always when g(·) is the product operator.
The study of matricization ranks under hierarchical tensor decompositions is of significant interest, particularly in the context of deep learning. Cohen et al. (2016b) proved the lower bound in the theorem for the specific case where T is the mode tree corresponding to the baseline dilated convolutional network (see fig. 2(a)), and I = {1, 3, . . . , N -1}. The result was used to establish exponential expressive efficiency of deep convolutional arithmetic circuits w.r.t. shallow ones. Cohen and Shashua (2017) later extended the analysis by deriving upper bounds for arbitrary index sets I, using them to study the ability of deep convolutional arithmetic circuits to model correlations among regions of their input. The bounds used in Cohen and Shashua (2017) were loose, and in fact trivial for many choices of index sets I. We here treat arbitrary mode trees T and index sets I, proving upper and lower bounds that are tight, oftentimes exact. Such tight bounds are necessary for identifying expressive efficiency that is not exponential, as we do in this paper. The key to deriving the bounds is the aforementioned idea of propagating elements out of a matrix decomposition.
E.2.2 COMPLETE PROOF
Since we are dealing with a single particular mode tree T , we omit it from our notations throughout the proof. Specifically, we denote by CI() and CII() (instead of CI(; T ) and CII(; T )) the children of an interior node int(T ); by (I) and (Ic) (instead of (I; T ) and (Ic; T )) the tilings of I and Ic (respectively) w.r.t. T (see def. 3); and by ()(·) (instead of (;T )(·)) the permutation corresponding to int(T ) in the tree decomposition (eq. 3).

The first stage of the proof is to derive a matricized form of the tree decomposition, shedding light into the manner in which grid tensor matricizations { Ay I}y are generated. As a preparatory step in this direction, we define the notion of an index set reduction. Let   [N ] be a node in T , whose
elements we denote by i1 < · · · < i||. The reduction of I onto  is defined as follows:

I| := {j  [||] : ij  I  }

(7)

In words, it is the set of indexes corresponding to the intersection I   inside . Besides index set reduction, an additional tool we will be using is the Kronecker product ­ a matrix operator we denote

17

Under review as a conference paper at ICLR 2018

by . For two matrices A  RM1×M2 and B  RN1×N2 , A B is the matrix in RM1N1×M2N2 holding AijBkl in row index (i - 1)N1 + k and column index (j - 1)N2 + l.
Consider the central relation in the tree decomposition (eq. 3), while noticing that g   in our setting (g(·) is the product operator ­ see app. A):

, = ()
order 2||

r =1

a,,I

·

CI ( ),



r =1

a,,II

·

CII ( ),

(8)

Suppose we would like to matricize the tensor , w.r.t. the reduction I|. If all elements of CI() were smaller than those of CII(), the permutation ()(·) would be the identity (see sec. 3.2), and the following matrix relation would hold:

, I| = = =

r =1

a,,I

·

CI ( ),



r =1

a,,I

·

CI ( ),

I |CI ( )

r =1

a,,I

·

CI(), I|CI()

r =1

a,,II

·

CII ( ),

I |

r =1

a,,II

·

CII ( ),

I |CII ( )

r =1

a,,II

·

CII(), I|CII()

In general however, elements in CI() could be greater than ones in CII(), and so eq. 8 includes a tensor mode sorting via ()(·). In matricized form, this amounts to rearranging rows and columns through appropriate permutation matrices Q() and Q¯() respectively:

, I| = Q()

r =1

a,,I

·

CI(), I|CI()

r =1

a,,II

·

CII(), I|CII()

Q¯ ( )

We thus arrive at the following matrix form of eq. 3, referred to as the matricized tree decomposition:

For j = 1. . .N : {j}, I|{j} = [v(1), . . . , v(M)]

  [r]
I|{j}

For  in int(T ) (depth-first order):

, I| = Q()

r
a ,,I CI(),  I|CI() =1

r
a ,,II CII(),  I|CII() =1

Ay I =

[N ],y I|[N ]

y  [r]

Q¯()   [r] (9)

Next, we move on to the second stage of the proof, where we establish the upper bound stated in the theorem:

rank Ay I  rmin{|(I)|,|(Ic)|} y

(10)

We begin by "propagating outwards" the permutation matrices Q([N]) and Q¯([N]) corresponding to the root node [N ] in the matricized tree decomposition (eq. 9). Namely, for every   [r], we replace
the matrix [N], I|[N] by:

B[N], :=

r

a [N],,I 

CI([N ]), I|CI([N])

=1

r

a [N],,II 

CII([N ]), I|CII([N])

=1

and accordingly move Q([N]) and Q¯([N]) to the assignments of { Ay I }y. This gives rise to the following decomposition:

18

Under review as a conference paper at ICLR 2018

For j = 1. . .N : {j}, I|{j} = [v(1), . . . , v(M)]

  [r]
I|{j}

For  in int(T ) \ {[N ]} (depth-first order):

, I| = Q()

r
a ,,I CI(),  I|CI() =1

r
a ,,II CII(),  I|CII() =1

Q¯()   [r]

B[N], =

r
a [N ],,I CI([N ]),  I|CI([N ]) =1

r
a [N ],,II CII([N ]),  I|CII([N ]) =1

  [r]

Ay I = Q([N])B[N],yQ¯([N]) y  [r] Consider now CI([N ]) ­ a child of the root node [N ], and suppose we would like to similarly propagate outwards its permutation matrices Q(CI([N])) and Q¯(CI([N])). We may define, for every [r]:

BCI([N]), :=

r

a CI([N ]),,I 

CI(CI([N ])), I|CI(CI([N]))

=1

which in turn implies:

r

a CI([N ]),,II 

CII(CI([N ])), I|CII(CI([N]))

=1

B[N], = =

r
a[N ],,IQ(CI([N ]))BCI([N ]),Q¯(CI([N ]))

=1

Q(CI([N ]))

r
a[N ],,IBCI([N ]), Q¯(CI([N ]))

=1

r
a [N ],,II CII([N ]),  I|CII([N ]) =1
r
a [N ],,II CII([N ]),  I|CII([N ]) =1

Now, for any matrices A, A , B, B such that AA and BB are defined, the following equality holds: (AA ) (BB ) = (A A )(B B ) (see Bellman (1970) for proof). We may therefore write:

B[N], = Q(CI([N ])) I

r
a[N ],,IBCI([N ]),
=1

r
a [N ],,II CII([N ]),  I|CII([N ]) =1

Q¯(CI([N])) I¯

where I and I¯ are identity matrices of appropriate sizes. Propagating outwards the matrices Q(CI([N])) I and Q¯(CI([N])) I¯ (while redefining B[N], appropriately), we arrive at the following
decomposition:

For j = 1. . .N : {j}, I|{j} = [v(1), . . . , v(M)]

  [r]
I|{j}

For  in int(T ) \ {[N ], CI([N ])} (depth-first order):

, I| = Q()

r
a ,,I CI(),  I|CI() =1

r
a ,,II CII(),  I|CII() =1

Q¯()   [r]

BCI([N ]), =

r

a CI([N ]),,I 

CI(CI([N ])), I|CI(CI([N]))

=1

r
a CI([N ]),,II CII(CI([N ])),  I|CII(CI([N ])) =1

  [r]

B[N], =

r
a[N ],,IBCI([N ]),
=1

r

a [N],,II 

CII([N ]), I|CII([N])

=1

  [r]

Ay I = Q([N])(Q(CI([N])) I) B[N],y (Q¯(CI([N])) I¯)Q¯([N]) y  [r]

19

Under review as a conference paper at ICLR 2018

Continuing this process, we propagate outwards the permutation matrices Q() and Q¯() of all nodes  in the tree that are not members of the tilings (I) or (Ic) (see def. 3), and are not descendants of such. This brings forth the following decomposition:

For j = 1. . .N : {j}, I|{j} = [v(1), . . . , v(M)]

  [r]
I|{j}

For  in int(T ){nodes in (I) or (Ic) or descendants of such} (depth-first order):

, I| = Q()

r
a ,,I CI(),  I|CI() =1

r
a ,,II CII(),  I|CII() =1

For  in (I)  (Ic): B, = , I|   [r]

For  in int(T )\{nodes in (I) or (Ic) or descendants of such} (depth-first order):

B, =

r
a, ,I B CI ( ),
=1

r
a, ,II B CII ( ),
=1

  [r]

Q¯()   [r]

Ay I = A·B[N],y·A¯ y  [r], for appropriate matrices A and A¯
Consider now a node int(T ) whose child belongs to a tiling ­ without loss of generality CI() belongs to (I). Notice that in this case BCI(), is a column vector for every   [r]. We may thus define BCI() to be the matrix whose 'th column is BCI(),, and get the following equalities:

B, = BCI()a,,I

r a,,IIBCII(), = BCI() I
=1

a,,I

r a,,IIBCII(),
=1

where again, I is an appropriately sized identity matrix. This implies that we can propagate outwards BCI() I, just as we have done with permutation matrices. Applying this procedure to all nodes in the tilings (I) and (Ic), we arrive at the decomposition below:

For  in (I): B, = e()   [r]

For  in (Ic): B, = (e())

  [r]

For  in int(T )\{nodes in (I) or (Ic) or descendants of such} (depth-first order):

B, =

r
a, ,I B CI ( ),
=1

r
a, ,II B CII ( ),
=1

  [r]

Ay I = A·B[N],y·A¯ y  [r], for appropriate matrices A and A¯

Notice that for compactness in writing we made use of the fact that a,,I =

r =1

a,,II

e()

,

where e(),   [r], is the vector in Rr holding 1 in entry  and 0 in the rest. Note also that in this

decomposition, as opposed to the previous ones, the matrices A and A¯ are not global constants that

depend only on T . Rather, they also depend on , I| for tiling nodes   (I)  (Ic), and thus are ultimately determined through a hidden computation that is not specified above.

This hidden computation is outside our scope, as we are only interested in the size of the matrices {B[N],y}y. It is not difficult to see that this size is precisely r|(I)|-by-r|(Ic)|, meaning that the ranks of {B[N],y}y are no more than rmin{|(I)|,|(Ic)|}. Since these ranks are greater than or equal to those of { Ay I}y, the sought after upper bound (eq. 10) indeed holds.

In the third and final stage of the proof, we establish the lower bound stated in the theorem, namely, that for all configurations of weights {a,,I, a,,II}, but a set of Lebesgue measure zero:

rank Ay I  r|{(1,2)(I)×(Ic): 1 and 2 are siblings in T with depth>1}| y

(11)

We reduce the problem in three successive steps:

20

Under review as a conference paper at ICLR 2018

· A tree decomposition (eq. 3) with a product operator g(·) admits maximal matricization
ranks almost always (see app. G). Therefore, to prove that eq. 11 holds for all weight
settings but a set of Lebesgue measure zero, it suffices to find a particular weight setting
for which the inequality holds.
· By assumption, the discretizers {v(i)}i[M] span Rr. Without loss of generality, assume that {v(i)}i[r] are linearly independent, and consider the sub-tensors of {Ay}y formed by restricting their indexes to the range 1. . .r (instead of 1. . .M ). The matricizations of these sub-tensors w.r.t. I are sub-matrices of { Ay I}y, thus any lower bound on ranks of the former matricizations immediately translates to a lower bound on ranks of the latter. Since
the sub-tensors are precisely the grid tensors that would have been generated by the tree decomposition (eq. 3) had we omitted the trailing discretizers {v(i)}i[M]\[r], establishing eq. 11 in the case M = r proves that it holds in general (M r).
· Bearing in mind that we assume M = r (and linear independence of {v(i)}i[r]), denote by V the r-by-r matrix holding v(i) in its i'th row, i.e. V := [v(1) · · · v(r)] . From the tree
decomposition (eq. 3) it is evident that the discretizers affect generated grid tensors only through products of the form V a,I or V a,II, where  is a parent of a leaf node in T . Since V is invertible ({v(i)}i[r] are linearly independent), its exact value has no effect on the class of representable grid tensors ­ any change it undergoes may be accounted for by the weights a,I and a,II that multiply it (these weights do not appear elsewhere in
the decomposition). Accordingly, for establishing a lower bound on achievable grid tensor matricization ranks, the value of V is irrelevant (so long as it is invertible), and we may assume, without loss of generality, that V is the identity matrix, i.e. that v(i) = e(i) for all i  [r].

Taking into account the above reductions, our objective is to show that there exists a setting of weights {a,,I, a,,II},, such that the following special case of the matricized tree decomposition (eq. 9) generates matricizations meeting the lower bound in eq. 11:
For j in I:
{j}, I|{j} = e()   [r]

For j in Ic: {j}, I|{j} = (e())

  [r]

For  in int(T ) (depth-first order):

, I| = Q()

r

a ,,I 

CI(), I|CI()

=1

r

a ,,II 

CII(), I|CII()

=1

Q¯()   [r]

Ay I =

[N ],y I|[N ]

y  [r]

Similarly to the procedure carried out in the second stage of the proof (establishing the upper bound in eq. 10), we now propagate outwards the permutation matrices Q() and Q¯() corresponding to all interior nodes int(T ). This brings forth the following decomposition:

For j in I:

B{j}, = e()   [r]

For j in Ic: B{j}, = (e())

  [r]

For  in int(T ) (depth-first order):

B, =

r
a, ,I B CI ( ),
=1

r
a, ,II B CII ( ),
=1

  [r]

Ay I = A·B[N],y·A¯ y  [r], for appropriate matrices A and A¯

(12)

The matrices A and A¯ in the assignments of { Ay I}y essentially collect all permutation matri-

ces {Q()} and {Q¯()} (respectively) that have been propagated outwards. Specifically, A (re-

spectively A¯) is a product of factors, each of the form I Q() I (respectively I Q¯()I ) for a

21

Under review as a conference paper at ICLR 2018

different interior node  and appropriately sized identity matrices I and I . Since permutation matrices are invertible, and since the Kronecker product between two invertible matrices is invertible as well (see Bellman (1970) for proof), we conclude that the matrices A and A¯ are invertible. Therefore, for every y  [r], the rank of Ay I is equal to that of B[N],y. It thus suffices to find a setting of weights {a,,I, a,,II}, for which:

rank(B[N ], )  r|{(1,2)(I)×(Ic): 1 and 2 are siblings in T with depth>1}|   [r]

(13)

Disregard the trivial case where there exist siblings 1  (I) and 2  (Ic) of depth 1,2 and consider the following weight setting:

·  is a node in (I) or (Ic), or a descendant of such:

a,,I = a,,II = e()   [r]

·  has one child in (I) and the other in (Ic):

a,,I = a,,II = e()   [r]

·  is the root node [N ]:

a,,I = a,,II = e(1)   [r]

·  meets neither of the above (0 and 1 here denote the all-zero and all-one vectors in Rr, respectively):

a,1,I =

1 , CI() has one child in (I) and the other in (Ic) e(1) , otherwise

a,1,II =

1 , CII() has one child in (I) and the other in (Ic) e(1) , otherwise

a,,I = a,,II = 0   [r] \ {1}

Plugging this into the decomposition in eq. 12, one readily sees that:

· For every   (I), {B,}[r] are indicator column vectors (one entry holds 1, the rest hold 0) such that B,=B, if  =  . The same holds for   (Ic), but with the vectors being rows.

· If  has one child in (I) and the other in (Ic), {B,}[r] are indicator matrices, where both the row and column indexes of the active entry do not repeat as  varies.

· The matrices {B[N],}[r] corresponding to the root node [N ] are equal to one another, given by a joint Kronecker product between all of the following:

­ B,1 for every node  in either (I) or (Ic) which does not have a sibling in the

other

­

r =1

B,

for

every

node



that

has

one

child

in

(I )

and

the

other

in

(I c )

According to the first observation above, B,1 has rank 1 for every  in (I) or (Ic). The second

observation the other in

implies (I c ).

that

r =1

B,

has

rank

In turn, and while taking

r for every node  that has one child in (I) and into account the rank-multiplicative property of the

Kronecker product (rank(A A ) = rank(A)·rank(A ) ­ see Bellman (1970) for proof), the third

observation implies:

rank(B[N], ) = r|{(1,2)(I)×(Ic): 1 and 2 are siblings in T }|   [r]

We thus have found weights {a,,I, a,,II}, for which eq. 13 holds.3 This establishes the sought after lower bound on matricization ranks (eq. 11), completing the proof of the theorem.

2 In this case I and Ic are the children of the root node [N ], and the maximal rank of B[N], is 1 for every   [r].
3 This applies to all but the trivial case where I is such that there exist siblings 1  (I) and 2  (Ic) of depth 1 (I and Ic are the children of the root node [N ]). In the latter case the lower bound in eq. 13 can be met trivially.
22

Under review as a conference paper at ICLR 2018

mode tree T
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

index set

I  1,3,5, 7,9,10,13,14

complement I c  2, 4,6,8,11,12,15,16

mode tree T
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

{1,2,3,4,5,6,7,8}

{1,2,3,4}

{5,6,7,8}

{1,2}

{3,4}

{5,6}

{7,8}

{9,10,11,12,13,14,15,16}

{9,10,11,12}

{13,14,15,16}

{9,10}

{11,12}

{13,14}

{15,16}

mixture nodes

{1,2,3,4,9,10,11,12}

{1,2,3,4}

{5,6,7,8}

{1,3}

{2,4}

{5,7}

{6,8}

{5,6,7,8,13,14,15,16}

{9,10,11,12}

{13,14,15,16}

{9,11}

{10,12}

{13,15}

{14,16}

{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16}

{1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12} {13} {14} {15} {16}

tilings
I ;T   1,3,5,7,9,10,13,14 I c;T   2,4,6,8,11,12,15,16

hybrid mode tree H
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}

{1,2,3,4,9,10,11,12}

{5,6,7,8,13,14,15,16}

tilings
I ;T   1,3,5,7,9,10,13,14 I c;T   2, 4,6,8,11,12,15,16

{1,2,3,4}

{5,6,7,8}

{9,10,11,12}

{13,14,15,16}

{1,2}

{3,4}

{5,6}

{7,8}

{9,11}

{10,12}

{13,15}

{14,16}

{1} {2} {3} {4} {5} {6} {7} {8}
tilings
I ; H   1,3,5,7,9,10,13,14

{9} {10} {11} {12} {13} {14} {15} {16}
I c; H   2,4,6,8,11,12,15,16

Figure 7: Best viewed in color. Two mode trees T and T¯ with a possible choice of mixture nodes (same as in fig. 3(a) and 4(a)), along with a particular formed hybrid tree H. An index set I and its complement Ic are tiled into more pieces by H than they are by T and T¯, leading the former to generate grid tensors with higher matricization ranks (theorem 1).

F DEMONSTRATION OF EXPRESSIVE EFFICIENCY

In this appendix, omitted from the text due to lack of space, we demonstrate the application of theorem 1 for establishing expressive efficiency. In particular, we use the theorem to derive corollary 1.

Consider our exemplar mode trees illustrated in fig. 2. Specifically, let T be the mode tree corre-

sponding sec. 3.1),

to the baseline dilated convolutional network (dilation 2l-1 in layer and let T¯ be the mode tree corresponding to the network obtained by

l[L]=[log2 N ] ­ see swapping dilations of

even and odd layers (such that layer l has dilation 2l-2 if l is even, and 2l if l is odd). T is a perfect

binary tree whose depth-l nodes, l  {0, 1, . . . , L}, are (k - 1)N/2l + [N/2l] for k  [2l].4 T¯ is

also perfect and has the same even-depth nodes, but its odd-depth nodes differ ­ they are generated by splitting parents into children holding non-contiguous quadrants. Suppose we choose mix(T, T¯) to include the set of nodes in T and T¯ whose depth is L-2, and consider the hybrid mode tree H

formed by taking the segments (see def. 2) of the first half of these nodes from T , and the rest of the tree from T¯. An illustration of T , T¯ and H in this setting, for the case L = 4, is given in fig. 7.

Now, let the index set I consist of every second index in [N/2], and every second pair of indexes

in N/2 + [N/2], i.e. I := {2k-1 : k[N/4]}  {N/2+4k-k : k[N/8], k =2, 3}. As illustrated

in fig. 7, the mode tree T tiles (see def. 3) the lower half of I into singletons, and its upper half

into pairs. The same applies to T 's tiling of I's complement Ic := [N ] \ I. Moreover, for every

node in the tiling (I; T ), there exists a sibling in (Ic; T ) (and vice versa). By theorem 1, this

implies that the tree decomposition of T generates grid tensors whose matricizations w.r.t. I have

rank rN/4+N/8. A similar situation occurs with the mode tree T¯, under which I and Ic are tiled

into pairs in their lower halves and into singletons in their top halves (see illustration in fig. 7). This

also leads to matricized grid tensors of rank rN/4+N/8. On the other hand, the hybrid mode tree H

tiles I and Ic entirely into singletons (see illustration in fig. 7), leading (by theorem 1) to grid tensor

matricization ranks of rN/2. This means that if we were to replicate grid tensors generated by the tree decomposition of H using those of T or T¯ (or a summation thereof), we would need to increase

the size constant r super-linearly ­ by a power of 4/3 (at least).

The above example can be generalized, by considering swapping the dilations of more than two
layers at once. In particular, if T is the mode tree corresponding to the baseline dilated convolutional network (dilation 2l-1 in layer l), T¯ is the mode tree corresponding to the network obtained by swapping dilations of groups of k layers (dilation 2 l/k ·k-1-((l-1) mod k) in layer l), and the set of mixture nodes includes all nodes of depth L-k, a hybrid mode tree H and an index set I can be
found, such that the tree decomposition of H generates grid tensors whose ranks when matricized w.r.t. I can only be matched by the tree decompositions of T and T¯ if their size constant r is increased by a power of 2/(1 + 21-k). Since the mixed decomposition of T and T¯ (eq. 4) can
realize the tree decomposition of H with double the size constant (claim 1), we conclude that it can, with size constant 2r, generate grid tensors whose matricization ranks (w.r.t. I) require the tree

4 If c is a scalar and S is a set, c + S stands for the set obtained by adding c to each element in S.

23

Under review as a conference paper at ICLR 2018
decompositions of T and T¯ to have size constant r2/(1+21-k) ­ super-linearly larger. Therefore, in this particular setting, prop. 2 holds and the mixed decomposition of T and T¯ is indeed expressively efficient w.r.t. their tree decompositions. Taking into account the fact that the mixed decomposition admits maximal matricization ranks almost always when g(·) is the product operator (see app. G), we formalize the result in network terms and reach corollary 1.
G MAXIMALITY OF MATRICIZATION RANKS
In the proof of theorem 1 (app. E.2), and in the derivation of corollary 1 (app. F), we made use of the fact that a tree or mixed decomposition (eq. 3 or 4 respectively), with a product operator g(·), admits maximal matricization ranks almost always. That is to say, for any index set I  [N ], the ranks of generated grid tensors {Ay}y when matricized w.r.t. I, attain their maximum possible values (which depend on both the decomposition and I) for all configurations of weights ({a,,I, a,,II}, for the tree decomposition, {a,,I, a,,II}, and {a¯¯,,I, a¯¯,,II}¯, for the mixed decomposition) but a set of Lebesgue measure zero. Hereinafter we justify this assertion. When equipped with the product operator (g(a, b) = a·b), a tree or mixed decomposition generates grid tensors {Ay}y whose entries are polynomials in the decomposition weights. Therefore, for any index set I  [N ], the entries of the matricizations { Ay I}y are, too, polynomials in the decomposition weights. Claim 2 below implies that for a particular index y, the rank of Ay I is maximal almost always, i.e. for all weight settings but a set of measure zero. Since the union of finitely many zero measure sets is itself a zero measure set (see Jones (2001) for example), we conclude that the ranks of { Ay I}y are jointly maximal almost always, which is what we set out to prove. Claim 2. Let D, M1, M2  N, and consider a polynomial function mapping weights   RD to matrices A()  RM1×M2 ("polynomial" here means that all entries of A() are polynomials in ). Denote R = maxRD rank(A()), and consider the set S := {  RD : rank(A()) < R}. This set has Lebesgue measure zero. Proof. We disregard the trivial case where R = 0. Let 0 be a point at which R is attained (rank(A(0)) = R), and assume without loss of generality that the top-left R×R minor of A(0), i.e. the determinant of A(0)1:R,1:R, is non-zero. The function p : RD  R defined by p() = det(A()1:R,1:R) is a polynomial, which by construction does not vanish everywhere (p(0) = 0). The zero set of a polynomial is either the entire space, or a set of Lebesgue measure zero (see Caron and Traynor (2005) for proof). Therefore, the zero set of p(·) has Lebesgue measure zero. Now, for every S:
rank(A()) < R = rank(A()1:R,1:R) < R = p() := det(A()1:R,1:R) = 0 S is thus contained in the zero set of p(·), and therefore too, has Lebesgue measure zero.
24

