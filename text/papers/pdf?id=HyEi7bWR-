Under review as a conference paper at ICLR 2018
ORTHOGONAL RECURRENT NEURAL NETWORKS WITH SCALED CAYLEY TRANSFORM
Anonymous authors Paper under double-blind review
ABSTRACT
Recurrent Neural Networks (RNNs) are designed to handle sequential data but suffer from vanishing or exploding gradients. Recent work on Unitary Recurrent Neural Networks (uRNNs) have been used to address this issue and in some cases, exceed the capabilities of Long Short-Term Memory networks (LSTMs). We propose a simpler and novel update scheme to maintain orthogonal recurrent weight matrices without using complex valued matrices. This is done by parametrizing with a skew-symmetric matrix using the Cayley transform. Such a parametrization is unable to represent matrices with negative one eigenvalues, but this limitation is overcome by scaling the recurrent weight matrix by a diagonal matrix consisting of ones and negative ones. The proposed training scheme involves a straightforward gradient calculation and update step. In several experiments, the proposed scaled Cayley orthogonal recurrent neural network (scoRNN) achieves superior results with fewer trainable parameters than other unitary RNNs.
1 INTRODUCTION
Deep neural networks have been used to solve numerical problems of varying complexity. RNNs have parameters that are reused at each time step of a sequential data point and have achieved state of the art performance on many sequential learning tasks. Nearly all optimization algorithms for neural networks involve some variant of gradient descent. One major obstacle to training RNNs with gradient descent is due to vanishing or exploding gradients, as described in Bengio et al. (1993) and Pascanu et al. (2013). This problem refers to the tendency of gradients to grow or decay exponentially in size, resulting in gradient descent steps that are too small to be effective or so large that the network oversteps the local minimum. This issue significantly diminishes RNNs' ability to learn time-based dependencies, particularly in problems with long input sequences.
A variety of architectures have been introduced to overcome this difficulty. The current preferred RNN architectures are those that introduce gating mechanisms to control when information is retained or discarded, such as LSTMs (Hochreiter & Schmidhuber, 1997) and GRUs (Cho et al., 2014), at the cost of additional trainable parameters. More recently, the unitary evolution RNN (uRNN) (Arjovsky et al., 2016) uses a parametrization that forces the recurrent weight matrix to remain unitary throughout training, and exhibits superior performance to LSTMs on a variety of synthetic and real-world tasks. For clarity, we follow the convention of Wisdom et al. (2016) and refer to this network as the restricted-capacity uRNN.
Since the introduction of uRNNs, orthogonal and unitary RNN schemes have increased in both popularity and complexity. Wisdom et al. (2016) use a multiplicative update method detailed in Tagare (2011) and Wen & Yin (2013) to expand uRNNs' capacity to include all unitary matrices. These networks are referred to as full-capacity uRNNs. Jing et al. (2016)'s EURNN parametrizes this same space with Givens rotations, while Jing et al. (2017)'s GORU introduces a gating mechanism for unitary RNNs to enable short term memory. Vorontsov et al. (2017) introduced modified optimization and regularization methods that restrict the singular values of the recurrent matrix to an interval around 1. Each of these methods involve complex valued recurrent weights. For additional related work in addressing the vanishing and exploding gradient problem, see Henaff et al. (2017) and Le et al. (2015).
In this paper, we consider RNNs with a recurrent weight matrix taken from the set of all orthogonal matrices. To construct the orthognal weight matrix, we parametrize it with a skew-symmetric matrix
1

Under review as a conference paper at ICLR 2018

through a scaled Cayley transform. This scaling allows us to avoid the singularity issue occuring for -1 eigenvalues that may arise in the standard Cayley transform. With the parameterization, the network optimization involves a relatively simple gradient descent update. The resulting method achieves superior performance on sequential data tasks with a smaller number of trainable parameters and hidden sizes than other unitary RNNs and LSTMs.
The method we present in this paper works entirely with real matrices, and as such, our results deal only with orthogonal and skew-symmetric matrices. However, the method and all related theory remain valid for unitary and skew-Hermitian matrices in the complex case. The experimental results in this paper indicate that state of the art performance can be achieved without the increased complexity of optimization along the Stiefel manifold and using complex matrices.
2 BACKGROUND
2.1 RECURRENT NEURAL NETWORKS
A recurrent neural network (RNN) is a function with input parameters U  Rn×m, recurrent parameters W  Rn×n, recurrent bias b  Rn, output parameters V  Rp×n, and output bias c  Rp where m is the data input size, n is the number of hidden units, and p is the output data size. From an input sequence x = (x1, x2, ..., xT ) where xi  Rm, the RNN returns an output sequence y = (y1, y2, ..., yT ) where each yi  Rp is given recursively by

ht =  (U xt + W ht-1 + b) yt = V ht + c
where h = (h0, . . . , hT -1), hi  Rn is the hidden layer state at time i and (·) is the activation function, which is often a pointwise nonlinearity such as a hyperbolic tangent function or rectified linear unit (Nair & Hinton, 2010).

2.2 UNITARY RNNS

A real matrix W is orthogonal if it satisfies W T W = I. The complex analog of orthogonal matrices are unitary matrices, which satisfy W W = I, where  denotes the conjugate transpose. Orthogonal and unitary matrices have the desirable property that W x 2 = x 2 for any vector x. This property motivates the use of orthogonal or unitary matrices in RNNs to avoid vanishing and exploding gradients, as detailed in Arjovsky et al. (2016).

Arjovsky et al. (2016) follow the framework of the previous section for their restricted-capacity uRNN, but introduce a parametrization of the recurrent matrix W using a product of simpler matrices. This parameterization is given by a product consisting of diagonal matrices with complex norm 1, complex Householder reflection matrices, discrete Fourier transform matrices, and a fixed permutation matrix with the resulting product being unitary.

Wisdom et al. (2016) note that this representation has only 7n parameters, which is insufficient to represent all unitary matrices for n > 7. In response, they present the full-capacity uRNN, which uses a multiplicative update step that is able to reach all unitary matrices of order n.

The full-capacity uRNN aims to construct a unitary matrix W (k+1) from W (k) by moving along a curve on the Stiefel manifold {W  Cn×n | W W = I}. For the network optimization, it is necessary to use a curve that is in a descent direction of the cost function L := L(W ). In Tagare (2011), Wen & Yin (2013), and Wisdom et al. (2016), a descent direction is constructed as B(k)W (k), which is a representation of the derivative operator DL(W (k)) in the tangent space of the Stiefel manifold at W (k). Then, with B(k)W (k) defining the direction of a descent curve, an update along the Stiefel manifold is obtained as

W (k+1) = I +  B(k) -1 I -  B(k) W (k) 22

(1)

where  is the learning rate.

2

Under review as a conference paper at ICLR 2018

3 SCALED CAYLEY ORTHOGONAL RNN

3.1 CAYLEY TRANSFORM

The Cayley transform gives a bijection between the set of orthogonal matrices without -1 eigenvalues and the set of skew-symmetric matrices (i.e., matrices where AT = -A):

W = (I + A)-1 (I - A) ,

A = (I + W )-1 (I - W ) .

We can use this bijection to parametrize the set of orthogonal matrices without -1 eigenvalues using skew-symmetric matrices. This parametrization is attractive from a machine learning perspective because it is closed under addition: the sum or difference of two skew-symmetric matrices is also skew-symmetric, so we can use gradient descent algorithms like RMSprop (Tieleman & Hinton, 2012) or Adam (Kingma & Ba, 2014) to train parameters.

However, this parametrization cannot represent orthogonal matrices with -1 eigenvalues, since in

this case I + W , is not invertible. Theoretically, we can still represent matrices with eigenvalues

that are arbitrarily close to -1; however, it can require large entries of A. For example, a 2x2

orthogonal matrix W with eigenvalues  -0.99999 ± 0.00447i and its parametrization A by the

Cayley transform is given below.



W=

 -0.99999 - 1 - 0.999992

1 - 0.999992

-0.99999

A

0 447.212 -447.212 0

Gradient descent algorithms will learn this A matrix very slowly, if at all. This difficulty can be overcome through a suitable diagonal scaling according to results from Kahan (2006).

Theorem 3.1 Every orthogonal matrix W can be expressed as W = (I + A)-1(I - A)D

where A = [aij] is real-valued, skew-symmetric with |aij|  1, and D is diagonal with all nonzero entries equal to ±1.

We call the transform in Theorem 3.1 the scaled Cayley transform. Then, with an appropriate choice of D, the scaled Cayley transform can reach any orthogonal matrix including those with -1 eigenvalues. Further, it ensures that the skew-symmetric matrix A that generates the orthogonal matrix will be bounded.

Our proposed network, the scaled Cayley orthogonal recurrent neural network (scoRNN), is based

on this theorem. We parametrize the recurrent weight matrix W through a skew-symmetric matrix

A,

which

results

in

n(n-1) 2

trainable

weights.

The

recurrent

matrix

W

is

formed

by

the

scaled

Cayley

transform: W = (I + A)-1(I - A)D. The scoRNN then operates identically to the set of equations

given in Section 2.1, but during training we update the skew-symmetric matrix A using gradient

descent, while D is fixed throughout the training process. The number of -1s on the diagonal of D,

which we call , is considered a hyperparameter in this work and is manually chosen based on the

task.

3.2 UPDATE SCHEME

To update the recurrent parameter matrix A as described in Section 3.1, we must find the gradients of A by backpropagating through the Cayley transform. The following theorem describes these gradients.

Theorem 3.2 Let L = L(W ) : Rn×n  R be some differentiable loss function for an RNN with the recurrent weight matrix W . Let W = W (A) := (I + A)-1 (I - A) D where A  Rn×n is skew-symmetric and D  Rn×n is a fixed diagonal matrix consisting of -1 and 1 entries. Then the
gradient of L = L(W (A)) with respect to A is

L = V T - V A

(2)

where V

:= (I - A)-1

L W

D +WT

,

L A

=

L  Ai,j

 Rn×n, and

L W

=

L  Wi,j

 Rn×n.

3

Under review as a conference paper at ICLR 2018

Proof: Refer to Appendix A.

At each training step of scoRNN, we first use the standard backpropagation algorithm to compute

L W

and then use Theorem 3.2 to compute

L A

.

We then update A with gradient descent (or a related

optimization method), and reconstruct W as follows:

A(k+1) = A(k) -  L A(k)
-1
W (k+1) = I + A(k+1)

I - A(k+1)

D

The

skew-symmetry

of

L A

ensures

that

A(k+1)

will

be

skew-symmetric

and,

in

turn,

W (k+1)

will

be orthogonal.

Comparing our scoRNN and the full-capacity uRNNs from Section 2.2, they both have the capacity

to optimize the network with respect to a general orthogonal or unitary matrix. However, the training

iterations are different. In particular, the full-capacity uRNN performs a multiplicative update that

goes in the direction of a certain projection of the gradient

L W

in the tangent space of the Stiefel

manifold. This projection can be shown to be a descent direction but not necessary the steepest one.

In contrast, scoRNN performs an additive update in the direction of steepest descent with respect

to its parametrization. Finally, it is also worth noting that the recurrent weight matrix in the full-

capacity uRNN may suffer from a gradual loss of orthogonality. See Appendix B for more details.

4 OTHER ARCHITECTURE DETAILS

The basic architecture of scoRNN is very similar to the standard RNN as presented in Section 2.1. From a network layer perspective, one can think of the application of the recurrent weight in a three layer process. Let ht  Rn be the current state of the scoRNN at a particular time step, t. We then pass ht through the following layers:
· Layer 1: ht  Dht =: ht(1)
· Layer 2: h(t1)  (I - A) h(t1) =: h(t2)
· Layer 3: h(t2)  (I + A)-1 h(t2) =: ht(3)
Note that the above scheme is the same as taking ht  W ht as discussed previously.

4.1 MODRELU ACTIVATION FUNCTION

The modReLU function was first implemented by Arjovsky et al. (2016) to handle complex valued functions and weights. Unlike previous methods, our method only uses real-valued functions and weights. Nevertheless, we have found that the modReLU function in the real case also performed better than other activation functions. The function is defined as

modReLU(z)

=

z |z| ReLU

(|z|

+

b)

=

z |z|

(|z|

+

b)

0

if |z| + b  0 if |z| + b < 0

(3)

where b is a trainable bias. In the real case, this simplifies to sign(z)ReLU(|z| + b). To implement this activation function in scoRNN, we replace the computation of ht in Section 2.1 with
zt = U xt + W ht-1 ht = modReLU(zt)
We believe that the improved performance of the modReLU over other activation functions, such as ReLU, is because it admits both positive and negative activation values, which appears to be important for the state transition in orthogonal RNNs. This is similar to the hyperbolic tangent function but does not have vanishing gradient issues.

4

Under review as a conference paper at ICLR 2018

4.2 INITIALIZATION
Modifying the initialization of our parameter matrices, in particular our recurrent parameter matrix A, had a significant effect on performance. The most effective initialization method we found uses a technique inspired by Henaff et al. (2017). We initialize all of the entries of A to be 0 except for 2x2 blocks along the diagonal, which are given as

B1



A= 

...

 

where

Bj =

0 -sj

sj 0

B n/2

with sj =

1-cos (tj ) 1+cos (tj )

and

tj

is

sampled

uniformly

from

0,

 2

. The Cayley transform of this A

will have eigenvalues equal to ±eitj for each j, which will be distributed uniformly along the right

unit half-circle. Multiplication by the scaling matrix D will reflect  of these eigenvalues across the

imaginary axis. We use this method to initialize scoRNN's A matrix in all of the experiments listed

in section 5.

5 EXPERIMENTS

For each of the following experiments, we found optimal hyperparameters for scoRNN using a grid search. For other models, we used the best hyperparameters settings as reported in Wisdom et al. (2016) and Arjovsky et al. (2016). If not available, we performed a grid search to find the best hyperparameters.

5.1 COPYING PROBLEM

This experiment follows the descriptions found in Arjovsky et al. (2016) and Wisdom et al. (2016), and tests an RNN's ability to reproduce a sequence seen many timesteps earlier. In the problem setup, there are 10 input classes, which we denote using the digits 0-9, with 0 being used as a 'blank' class and 9 being used as a 'marker' class. The RNN receives an input sequence of length T + 20. This sequence consists of entirely zeros, except for the first ten elements, which are uniformly sampled from classes 1-8, and a 9 placed ten timesteps from the end. The goal for the machine is to output zeros until it sees a 9, at which point it should output the ten elements from the beginning of the input sequence.

A baseline strategy with which to compare machine performance is that of outputting 0 until the

machine sees a 9, and then outputting 10 elements randomly sampled from classes 1-8. The expected

cross-entropy

for

such

a

strategy

is

10 log (8) T +20

.

In

practice,

it

is

common

to

see

gated

RNNs

such

as

LSTMs converge to this local minimum.

Figure 1: Cross entropy of each machine on the copying problem with T = 1000 (left) and T = 2000 (right).
5

Under review as a conference paper at ICLR 2018

We vary the number of hidden units of the machines to match the number of parameters, approximately 22k each. This results in an LSTM with n = 68, a restricted-capacity uRNN with n = 470, a full-capacity uRNN with n = 128, and a scoRNN with n = 190. We found the best performance with the scoRNN came from  = n/2, which gives an initial W with eigenvalues distributed uniformly on the entire unit circle.
Figure 1 compares each model's performance for T = 1000 and T = 2000, with the baseline cross-entropy given as a dashed blue line. In both cases, the cross-entropy for the restricted-capacity uRNN and LSTM never drop below the baseline. For the T = 1000 test, the full-capacity uRNN and scoRNN converge immediately to zero entropy solutions. For T = 2000, the scoRNN error converges more gradually to zero, but is able to bypass the baseline entirely, whereas even the full-capacity uRNN remains at the baseline for several thousand iterations before finding a correct solution.

5.2 ADDING PROBLEM

We examined a variation of the adding problem as proposed by Arjovsky et al. (2016) which is based

on the work of Hochreiter & Schmidhuber (1997). This variation involves passing two sequences

concurrently into the RNN, each of length T . The first sequence is a sequence of digits sampled

uniformly with values ranging in a half-open interval, U[0, 1). The second sequence is a marker

sequence consisting of all zeros except for two entries that are marked by one. The first 1 is located

uniformly

within

the

interval

[1,

T 2

)

of

the

sequence

and

the

second

1

is

located

uniformly

within

the

interval

[

T 2

,

T

)

of

the

sequence.

The

label

for

each

pair

of

sequences

is

the

sum

of

the

two

entries

that are marked by one. Naively predicting one regardless of the sequence gives an expected mean

squared error (MSE) of approximately 0.167. This will be considered as the baseline.

The number of hidden units for each network was adjusted so that each had approximately 14k trainable parameters. This results in n = 170 for the scoRNN, n = 60 for the LSTM, n = 120 for the Full-Capacity uRNN, and n = 950 hidden units for the restricted-capacity uRNN.

The test set MSE results for sequence lengths T = 200, T = 400, and T = 750 can be found in Figure 2. A training set size of 100,000 and a testing set size of 10,000 were used for each sequence length. For each case, the networks start at or near the baseline MSE and drop towards zero after a few epochs. As the sequence length increases, the number of epochs before the drop increases. We found the best settings for the scoRNN were  = n/2 for T = 200 and  = 7n/10 for T = 400 and T = 750. As can be seen, the LSTM error drops precipitously, while the unitary and orthogonal RNNs descend more gradually. Although in some cases the full-capacity uRNN begins to drop below the baseline before scoRNN, the full-capacity uRNN does not drop as quickly and has a more irregular descent curve.

Figure 2: Test set MSE of each machine on the adding problem with sequence lengths of T = 200 (top), T = 400 (middle), and T = 750 (bottom).
6

Under review as a conference paper at ICLR 2018

5.3 PIXEL-BY-PIXEL MNIST
We ran two experiments based around classifying samples from the well-known MNIST dataset (LeCun et al.), Following the implementation of Le et al. (2015), each pixel of the image is fed into the RNN sequentially, resulting in a single pixel sequence length of 784. In the first experiment, which we refer to as unpermuted MNIST, pixels are arranged in the sequence row-by-row. In the second, which we call permuted MNIST, a fixed permutation is applied to training and testing set sequences.
All scoRNN machines were trained with the RMSProp optimization algorithm. Input and output weights used a learning rate of 10-3, while the recurrent parameters used a learning rate of 10-4 (for n = 170) or 10-5 (for n = 360). For unpermuted MNIST, we found  to be optimal at n/10, while the best value of  for permuted MNIST was n/2. We suspect that the difference of these two values comes from the different types of dependencies in each: unpermuted MNIST has mostly local dependencies, while permuted MNIST requires learning many long-term dependencies, which appear to be more easily modeled when the diagonal of D has a higher proportion of -1s.
Each experiment used a training set of 55,000 images and a test set of 10,000 testing images. Each machine was trained for 70 epochs, and test set accuracy was evaluated at the conclusion of each epoch. Figure 3 shows test set accuracy over time for each machine, and the best performance over all epochs by each machine is given in Table 1.
In both experiments, the 170 hidden unit scoRNN gives comparable performance to both of the 512 hidden unit uRNNs using a much smaller hidden dimension and, in the case of the full-capacity uRNN, an order of magnitude fewer parameters. As in experiments presented in Arjovsky et al. (2016) and Wisdom et al. (2016), orthogonal and unitary RNNs are unable to outperform the LSTM in the unpermuted case. However, the 360 hidden unit scoRNN outperforms the unitary RNNs. On permuted MNIST, the 360 hidden unit scoRNN achieves a test-set accuracy of 96.2%, outperforming all of the uRNNs and both sizes of LSTM. We believe this is a state of the art result on this task.

Table 1: Results for unpermuted and permuted pixel-by-pixel MNIST experiments. Evaluation accuracies are based on the best test accuracy at the end of every epoch.

Model

n # parameters MNIST Permuted MNIST

Test Accuracy Test Accuracy

scoRNN scoRNN

170  16k 360  69k

0.973 0.983

0.943 0.962

LSTM LSTM

128  68k 256  270k

0.987 0.989

0.920 0.929

Restricted-capacity uRNN 512  16k

0.976

0.945

Full-capacity uRNN Full-capacity uRNN

116  16k 512  270k

0.947 0.974

0.925 0.947

5.4 TIMIT SPEECH DATASET
To see how the models performed on audio data, speech prediction was performed on the TIMIT dataset (Garofolo et al., 1993), a collection of real-world speech recordings. Excluding the dialect SA sentences and testing only on the core test set, the dataset consisted of 3,696 training audio files and 192 testing audio files. Similar to the experiment done by Wisdom et al. (2016), the TIMIT audio files were downsampled to 8kHz and a short-time Fourier transform (STFT) was applied with a Hann window of 256 samples and a window hop of 128 samples (16 milliseconds). The result is a set of frames with each frame having 129 complex-valued Fourier amplitudes. The log-magnitude is taken on these amplitudes and is the input data for the machines. Each frame was fed into the machine sequentially, and at each time step t, the machine's target output is to predict the t + 1 frame.
For each model, the hidden layer sizes were adjusted such that each model had approximately equal numbers of trainable parameters. For scoRNN, we used the Adam optimizer with learning rate 10-3
7

Under review as a conference paper at ICLR 2018

Figure 3: Test accuracy for unpermuted and permuted MNIST over time.
to train the input and output parameters, and RMSprop with a learning rate of 10-3 (for n = 224) or 10-4 (for n = 322 and n = 425) to train the recurrent weight matrix. The number of negative eigenvalues used was  = n/10.
The loss function used for training was the mean squared error (MSE) between the predicted and actual log-magnitudes of the next time frame over the entire sequence. Table 2 contains the MSE on validation and testing sets, which shows that all scoRNN models achieve a smaller MSE than all LSTM and unitary RNN models. Similar to Wisdom et al. (2016), we reconstructed audio files using the predicted log-magnitudes from each machine and evaluated them on several audio metrics. We found that the scoRNN predictions achieved better scores on the signal-to-noise ratio metric SegSNR (Brookes et al., 1997), but performed slightly worse than the full-capacity uRNN predictions on the human intelligibility and perception metrics STOI (Taal et al., 2011) and PESQ (Rix et al., 2001).
Table 2: Results for the TIMIT speech dataset. Evaluation based on MSE and various audio metrics

Model n # params Valid. Eval.

MSE MSE

scoRNN 224  83k 9.26 8.50 scoRNN 322  135k 8.48 7.82 scoRNN 425  200k 7.97 7.36

LSTM LSTM LSTM

84  83k 18.43 17.18 120  135k 17.05 15.91 158  200k 16.33 16.06

Model

n # params Valid. Eval.

MSE MSE

Rest. uRNN 158 Rest. uRNN 256 Rest. uRNN 378

 83k  135k  200k

15.57 18.51 15.90 15.31 16.00 15.15

Full uRNN 128  83k 15.07 14.58 Full uRNN 192  135k 15.10 14.50 Full uRNN 256  200k 14.96 14.69

6 CONCLUSION
There have been recent breakthroughs with RNN architectures using unitary recurrent weight matrices to address the vanishing/exploding gradient problem. These unitary RNNs are implemented with complex valued matrices and require additional complexity in computation. Unlike unitary RNNs, the scoRNN developed in this paper uses real valued orthogonal recurrent weight matrices with a simpler implementation scheme by parametrizing with a skew-symmetric matrix. The resulting model's additive update step is in the direction of steepest descent with respect to this parametrization, and maintains the orthogonality of the recurrent weight matrix in the presence of roundoff errors. Results from our experiments show that scoRNN can achieve superior performance to unitary RNNs, in some cases with many fewer trainable parameters than other models.
8

Under review as a conference paper at ICLR 2018
REFERENCES
Martin Arjovsky, Amar Shah, and Yoshua Bengio. Unitary evolution recurrent neural networks. In Proceedings of the 2016 International Conference on Machine Learning, volume 48, pp. 1120­ 1128, New York, New York, USA, 2016. JMLR.
Yoshua Bengio, Paolo Frasconi, and Patrice Simard. The problem of learning long-term dependencies in recurrent networks. pp. 1183­1195, San Francisco, CA, USA, 1993. IEEE Press.
Mike Brookes et al. Voicebox: Speech processing toolbox for matlab. Software, available [Mar. 2011] from www. ee. ic. ac. uk/hp/staff/dmb/voicebox/voicebox. html, 47, 1997.
Kyunghyun Cho, Bart van Merrienboer, Dzmitry Bahdanau, and Yoshua Bengio. On the properties of neural machine translation: Encoder-decoder approaches, 2014. URL https://arxiv. org/abs/1409.1259.
John Garofolo, Lori Lamel, William Fisher, Jonathan Fiscus, David Pallett, Nancy Dahlgren, and Victor Zue. Timit acoustic-phonetic continuous speech corpus ldc93s1. Technical report, Philadelphia: Linguistic Data Consortium, 1993.
Mikael Henaff, Arthur Szlam, and Yann LeCun. Recurrent orthogonal networks and long-memory tasks. In Proceedings of the 33rd International Conference on Machine Learning, volume 48, New York, NY, USA, 2017. JMLR: W&CP.
Sepp Hochreiter and Ju¨rgen Schmidhuber. Long short-term memory. In Neural Computation 9(8), pp. 1735­1780, 1997.
Li Jing, Yichen Shen, Tena Dubcek, John Peurifoy, Scott Skirlo, Max Tegmark, and Marin Soljacic´. Tunable efficient unitary neural networks (eunn) and their application to rnn. arXiv preprint arXiv:1612.05231, 2016.
Li Jing, C¸ alar Gu¨lc¸ehre, John Peurifoy, Yichen Shen, Max Tegmark, Marin Soljacic´, and Yoshua Bengio. Gated orthogonal recurrent units: On learning to forget. 2017. URL https://arxiv. org/abs/1706.02761.
William Kahan. Is there a small skew cayley transform with zero diagonal? Linear algebra and its applications, 417(2-3):335­341, 2006.
Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.
Quoc V. Le, Navdeep Jaitly, and Geoffrey E. Hinton. A simple way to initialize recurrent networks of rectified linear units, 2015. URL https://arxiv.org/abs/1504.00941.
Yann LeCun, Corinna Cortes, and Christopher J.C. Burges. The mnist database. URL http: //yann.lecun.com/exdb/mnist/.
Vinod Nair and Geoffrey E. Hinton. Rectified linear units improve restricted boltzmann machines. In 27th International Conference on Machine Learning, Haifa, Israel, 2010.
Razvan Pascanu, Tomas Mikolov, and Yoshua Bengio. On the difficulty of training recurrent neural networks. In 30th International Conference on Machine Learning, Atlanta, Georgia, USA, 2013.
Antony W Rix, John G Beerends, Michael P Hollier, and Andries P Hekstra. Perceptual evaluation of speech quality (pesq)-a new method for speech quality assessment of telephone networks and codecs. In Acoustics, Speech, and Signal Processing, 2001. Proceedings.(ICASSP'01). 2001 IEEE International Conference on, volume 2, pp. 749­752. IEEE, 2001.
Cees H Taal, Richard C Hendriks, Richard Heusdens, and Jesper Jensen. An algorithm for intelligibility prediction of time­frequency weighted noisy speech. IEEE Transactions on Audio, Speech, and Language Processing, 19(7):2125­2136, 2011.
Hemant D. Tagare. Notes on optimization on stiefel manifolds. Technical report, Yale University, 2011.
9

Under review as a conference paper at ICLR 2018 Tijmen Tieleman and Geoffrey Hinton. Lecture 6.5-rmsprop: Divide the gradient by a running
average of its recent magnitude. COURSERA: Neural networks for machine learning, 4(2):26­ 31, 2012. Eugene Vorontsov, Chiheb Trabelsi, Samuel Kadoury, and Chris Pal. On orthogonality and learning recurrent networks with long term dependencies. arXiv preprint arXiv:1702.00071, 2017. Zaiwen Wen and Wotao Yin. A feasible method for optimization with orthogonality constraints. In Mathematical Programming, volume 142(1-2), pp. 397­434. 2013. Scott Wisdom, Thomas Powers, John Hershey, Jonathan Le Roux, and Les Atlas. Full-capacity unitary recurrent neural networks. In D. D. Lee, M. Sugiyama, U. V. Luxburg, I. Guyon, and R. Garnett (eds.), Advances in Neural Information Processing Systems 29, pp. 4880­4888. Curran Associates, Inc., 2016.
10

Under review as a conference paper at ICLR 2018

APPENDIX A

For completeness, we restate and prove Theorem 3.2.
Theorem 3.2 Let L = L(W ) : Rn×n  R be some differentiable loss function for an RNN with the recurrent weight matrix W . Let W = W (A) := (I + A)-1 (I - A) D where A  Rn×n is skew-symmetric and D  Rn×n is a fixed diagonal matrix consisting of -1 and 1 entries. Then the gradient of L = L(W (A)) with respect to A is

L = V T - V A

(4)

where V

:= (I - A)-1

L W

D +WT

,

L A

=

L  Ai,j

 Rn×n, and

L W

=

L  Wi,j

 Rn×n

Proof:

Let

Z

:=

(I

+

A)-1(I

-

A).

We

consider

the

(i,

j)

entry

of

L A

.

Taking

the

derivative

with

respect to Ai,j where i = j we obtain:

L Ai,j

n
=

L Wk,l

k,l=1 Wk,l Ai,j

=

n k,l=1

L Wk,l

Dl,l

Zk,l Ai,j

= tr

L T Z D
W Ai,j

Using the identity (I + A) Z = I - A and taking the derivative with respect to Ai,j to both sides we obtain:

and rearranging we get:

Z

+

A Z Z +A

= - A

Ai,j Ai,j

Ai,j

Ai,j

Z = - (I + A)-1

A A +Z

Ai,j

Ai,j Ai,j

Let Ei,j denote the matrix whose (i, j) entry is 1 with all others being 0. Since A is skew-symmetric,

we have

A  Ai,j

= Ei,j

- Ej,i.

Combining everything, we have:

L = - tr Ai,j
= - tr
- tr 
= -
 -

L D
W

T
(I + A)-1 (Ei,j - Ej,i + Ei,j Z - Ej,iZ)

L D
W

T
(I + A)-1Ei,j

+ tr

L D
W

T
(I + A)-1Ej,i

L D
W

T
(I + A)-1Ei,j Z

+ tr

L D
W

T
(I + A)-1Ej,iZ

L D
W

T
(I + A)-1

T +
i,j

L D

T
(I + A)-1

W

i,j

L D
W

T
(I + A)-1

T ZT +
i,j

Z

L D

T
(I + A)-1

W

i,j

11

Under review as a conference paper at ICLR 2018



= (I + Z)

L D

T
(I + A)-1

-

W

i,j

L D

T
(I + A)-1

T

 I + ZT 

W

i,j

= (I + Z)

L D

T
(I - AT )-1

-

(I - A)-1

L D

I + ZT

W i,j W i,j

Using the above formulation,

L  Aj,j

= 0 and

L  Ai,j

=

- L
 Aj,i

so that

L A

is a skew-symmetric matrix.

Finally, by the definition of V we get the desired result.

APPENDIX B
In the scoRNN architecture, the recurrent weight matrix is parameterized with a skew-symmetric matrix through the Cayley transform. This ensures the computed recurrent weight matrix in floating point arithmetic is orthogonal to the order of machine precision after each update step. Unlike scoRNN, the full-capacity uRNN maintains a unitary recurrent weight matrix by a multiplicative update scheme. Due to the accumulation of rounding errors over a large number of repeated matrix multiplications, the recurrent weight may not remain unitary throughout training. To investigate this, we ran the scoRNN and full-capacity uRNN with equal hidden unit sizes of n = 512 on the unpermuted MNIST experiment and checked for loss of orthogonality at each epoch. The results of this experiment are shown in Figure 4. As can be seen, the recurrent weight matrix for the fullcapacity uRNN becomes less unitary over time, but the orthogonality recurrent weight matrix for scoRNN is not affected by roundoff errors.

Figure 4: Unitary scores ( W W - I F ) for the full-capacity uRNN recurrent weight matrix and orthogonality scores W T W - I F for the scoRNN recurrent weight matrix using a GPU on the pixel-by-pixel MNIST experiment.

12

