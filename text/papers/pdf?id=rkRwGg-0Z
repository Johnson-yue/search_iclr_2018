Under review as a conference paper at ICLR 2018
BEYOND WORD IMPORTANCE: CONTEXTUAL DECOMPOSITION TO EXTRACT INTERACTIONS FROM LSTMS
Anonymous authors Paper under double-blind review
ABSTRACT
The driving force behind the recent success of LSTMs has been their ability to learn complex and non-linear relationships. Consequently, our inability to describe these relationships has led to LSTMs being characterized as black boxes. To this end, we introduce contextual decomposition (CD), a novel algorithm for capturing the contributions of combinations of words or variables in terms of CD scores. On the task of sentiment analysis with the Yelp and SST data sets, we show that CD is able to reliably identify words and phrases of contrasting sentiment, and how they are combined to yield the LSTM's final prediction. Using the phrase-level labels in SST, we also demonstrate that CD is able to successfully extract positive and negative negations from an LSTM, something which has not previously been done.
1 INTRODUCTION
In comparison with simpler linear models, techniques from deep learning have achieved impressive accuracy by effectively learning non-linear interactions between features. However, due to our inability to describe the learned interactions, this improvement in accuracy has come at the cost of state of the art predictive algorithms being commonly regarded as black-boxes. In the domain of natural language processing (NLP), Long Short Term Memory networks (LSTMs) (Hochreiter & Schmidhuber, 1997) have become a basic building block, yielding excellent performance across a wide variety of tasks (Sutskever et al., 2014) (Rajpurkar et al., 2016) (Melis et al., 2017), while remaining largely inscrutable.
In this work, we introduce contextual decomposition (CD), a novel method for extracting information about not only which words contributed to a LSTM's prediction, but also how they were combined in order to yield the final prediction. By mathematically decomposing the LSTM's output, we are able to disambiguate the contributions made at each step by different parts of the sentence.
To validate the extracted information, we evaluate on the problem of sentiment analysis. In particular, we demonstrate that CD is capable of identifying words and phrases of differing sentiment within a given review. CD is also used to successfully extract positive and negative negations from an LSTM, something that has not previously been done. As a consequence of this analysis, we also show that prior methods produce scores which have document-level information built into them in complex, unspecified ways. For instance, prior work often identifies strongly negative phrases contained within positive reviews as neutral, or even positive.
2 RELATED WORK
The most relevant prior work on interpreting LSTMs has focused on approaches for computing word-level importance scores, with evaluation protocols varying greatly. Murdoch & Szlam (2017) introduced a decomposition of the LSTM's output embedding into a sum over word coefficients, and demonstrated that those coefficients are meaningful by using them to distill LSTMs into rulesbased classifiers. Li et al. (2016) took a more black box approach, by observing the change in log probability resulting from replacing a given word vector with a zero vector, and relied solely on
1

Under review as a conference paper at ICLR 2018

anecdotal evaluation. Finally, Sundararajan et al. (2017) presents a general gradient-based technique, validated both theoretically and with empirical anecdotes. In contrast to our proposed method, this line of work has been limited to word-based importance scores, ignoring the interactions between variables which make LSTMs so accurate.
Another line of work (Karpathy et al., 2015) (Strobelt et al., 2016) has focused on analysing the movement of raw gate activations over a sequence. Karpathy et al. (2015) was able to identify some co-ordinates of the cell state that correspond to semantically meaningful attributes, such as whether the text is in quotes. However, most of the cell co-ordinates were uninterpretable, and it is not clear how these co-ordinates combine to contribute to the actual prediction.
Decomposition-based approaches to interpretation have also been applied to convolutional neural networks (CNNs) (Bach et al., 2015) (Shrikumar et al., 2017). However, they have been limited to producing pixel-level importance scores, ignoring interactions between pixels, which are clearly quite important. Our approach is similar to these in that it computes an exact decomposition, but we leverage the unique gating structure of LSTMs in order to extract interactions.
Attention based models (Bahdanau et al., 2014) offer another means of providing some interpretability. Such models have been successfully applied to many problems, yielding improved performance (Rush et al., 2015) (Xu et al., 2015). In contrast to other word importance scores, attention is limited in that it only provides an indirect indicator of importance, with no directionality, i.e. what class the word is important for. Although attention weights are often cited anecdotally, they have not been evaluated, empirically or otherwise, as an interpretation technique. As with other prior work, attention is also incapable of describing interactions between words.
3 CONTEXTUAL DECOMPOSITION OF LSTMS
Given an arbitrary phrase contained within an input, we present a novel decomposition of the output of an LSTM into a sum of two contributions: those resulting solely from the given phrase, and those involving other factors. The key insight behind this decomposition is that the gating dynamics unique to LSTMs are a vehicle for modeling interactions between variables.
3.1 LONG SHORT TERM MEMORY NETWORKS
Over the past few years, LSTMs have become a core component of neural NLP systems. Given a sequence of word embeddings x1, ..., xT  Rd1 , a cell and state vector ct, ht  Rd2 are computed for each element by iteratively applying the below equations, with initialization h0 = c0 = 0.

ot = (Woxt + Voht-1 + bo) ft = (Wf xt + Vf ht-1 + bf ) it = (Wixt + Viht-1 + bi) gt = tanh(Wgxt + Vght-1 + bg) ct = ft ct-1 + it gt ht = ot tanh(ct)

(1) (2) (3) (4) (5) (6)

Where Wo, Wi, Wf , Wg  Rd1×d2 , Vo, Vf , Vi, Vg  Rd2×d2 , bo, bg, bi, bg  Rd2 and denotes element-wise multiplication. ot, ft and it are often referred to as output, forget and input gates, respectively, due to the fact that their values are bounded between 0 and 1, and that they are used in element-wise multiplication.
After processing the full sequence, the final state hT is treated as a vector of learned features, and used as input to a multinomial logistic regression, often called SoftMax, to return a probability distribution p over C classes, with

pj = SoftMax(W hT )j =

exp(WjhT )

C k=1

exp(Wk

ht

)

2

(7)

Under review as a conference paper at ICLR 2018

3.2 CONTEXTUAL DECOMPOSITION OF LSTM

We now introduce contextual decomposition, our proposed method for interpreting LSTMs. Given an arbitrary phrase xq, ..., xr, where 1  q  r  T , we now decompose each output and cell state ct, ht in Equations 5 and 6 into a sum of two contributions.

ht = t + t ct = tc + tc

(8) (9)

The decomposition is constructed so that t corresponds to contributions made solely by the given phrase to ht, and that t corresponds to contributions involving, at least in part, elements outside of the phrase. tc and tc represent analogous contributions to ct.
Using this decomposition for the final output state W hT in Equation 7 yields the value W T , which provides a quantitative score for the phrase's contribution to the LSTM's prediction for each class. As this score corresponds to the input to a logistic regression in Equation 7, it may be interpreted in the same way as a standard logistic regression coefficient.

3.2.1 DISAMBIGUATING INTERACTIONS BETWEEN GATES
In the cell update Equation 5, neuron values in each of it and gt are independently determined by both the contribution at that step, xt, as well as prior context provided by ht-1 = t-1 + t-1. Thus, in computing the element-wise product it gt, often referred to as gating, contributions made by xt to it interact with contributions made by ht to gt, and vice versa.
We leverage this simple insight to construct our decomposition. First, assume that we have a way of linearizing the gates and updates in Equations 2, 3, 4 so that we can write each of them as a linear sum of contributions from each of their inputs.

it = (Wixt + Viht-1 + bi) = L(Wixt) + L(Viht-1) + L(bi)

(10) (11)

When we use this linearization in the cell update Equation 5, the products between gates become products over linear sums of contributions from different factors. Upon expanding these products, the resulting cross-terms yield a natural interpretation as being interactions between variables. In particular, cross-terms can be assigned as to whether they resulted solely from the phrase, e.g. L(Vit-1) Ltanh(Vgt-1), from some interaction between the phrase and other factors, e.g. L(Vit-1) Ltanh(Vgt-1), or purely from other factors, e.g. L(bi) Ltanh(Vgt-1).
Mirroring the recurrent nature of LSTMs, the above insights allow us to recursively compute our decomposition, with the initializations 0 = 0c = 0 = 0c = 0. We derive below the update equations for the case where q  t  r, so that the current time step is contained within the phrase. The other case is similar, and the general recursion formula is provided in Appendix 6.2.
For clarity, we decompose the two products in the cell update Equation 5 separately. As discussed above, we simply linearize the gates involved, expand the resulting product of sums, and group the cross-terms according to whether or not their contributions derive solely from the specified phrase, or otherwise. Terms are determined to derive solely from the specified phrase if they involve products from some combination of t-1, tc-1, xt and bi or bg (but not both). When t is not within the phrase, products involving xt are treated as not deriving from the phrase.

ft ct-1 =(L(Wf xt) + L(Vf t-1) + L(Vf t-1) + L(bf )) (tc-1 + tc-1) =([L(Wf xt) + L(Vf t-1) + L(bf )] tc-1) + (L(Vf t-1) tc-1 + ft tc-1)
=tf + tf

(12) (13)
(14)

3

Under review as a conference paper at ICLR 2018

it gt =[L(Wixt) + L(Vit-1) + L(Vit-1) + L(bi)]

(15)

[Ltanh(Wgxt) + Ltanh(Vgt-1) + Ltanh(Vgt-1) + Ltanh(bg)]

=[L(Wixt) [Ltanh(Wgxt) + Ltanh(Vgt-1) + Ltanh(bg)]

(16)

+ L(Vit-1) [Ltanh(Wgxt) + Ltanh(Vgt-1) + Ltanh(bg)]

+ L(bi) [Ltanh(Wgxt) + Ltanh(Vgt-1)]]

+ [L(Vit-1) gt + it Ltanh(Vgt-1) - L(Vit-1) Ltanh(Vgt-1)

+ L(bi) Ltanh(bg)] =tu + tu

(17)

Having decomposed the two components of the cell update equation, we can attain our decomposition of ct by summing the two contributions.

tc = tf + tu tc = tf + tu

(18) (19)

Once we have computed the decomposition of ct, it is relatively simple to compute the resulting transformation of ht by linearizing the tanh function in 6. Note that we could similarly decompose the output gate as we treated the forget gate above, but we empirically found this to not produce
improved results.

ht = ot tanh(ct) = ot [Ltanh(tc) + Ltanh(tc)] = ot Ltanh(ct) + ot Ltanh(tc) = t + t

(20) (21)
(22) (23)

3.2.2 LINEARIZING ACTIVATION FUNCTIONS

We now describe the linearizing functions L, Ltanh used in the above decomposition. Formally, for arbitrary {y1, ..., yN }  R, where N  4, the problem is how to write

NN
tanh( yi) = Ltanh(yi)
i=1 i=1

(24)

In the cases where there is a natural ordering to {yi}, prior work (Murdoch & Szlam, 2017) has used differences of partial sums. However, in this setting there is no clear ordering involving terms
like t-1, t-1 and xt. Thus, we instead compute an average difference of partial sums over all orderings. Letting 1, ..., MN denote the set of all permutations of 1, ..., N , our score is

Ltanh(yk) =

1 MN

MN

i-1 (k)

i-1 (k)-1

[tanh(

xi(j)) - tanh(

xi(j))]

i=1 j=1

j=1

(25)

L can be analogously derived. When one of the terms in the decomposition is a bias, we saw improvements when restricting to permutations where the bias is the first term.
As N only ranges between 2 and 4, this linearization generally takes very simple forms. For instance, when N = 2, the contribution assigned to y1 is

1 Ltanh(y1) = 2 ([tanh(y1) - tanh(0)] + [tanh(y2 + y1) - tanh(y1)])

(26)

4

Under review as a conference paper at ICLR 2018
This linearization was presented in a scalar context where yi  R, but trivially generalizes to the vector setting yi  Rd2 . It can also be viewed as an approximation to Shapely values, as discussed in Lundberg & Lee (2016) and Shrikumar et al. (2017).
4 EXPERIMENTS
We now describe our empirical validation of CD on the task of sentiment analysis. First, we verify that, on the standard problem of word-level importance scores, CD compares favorably to prior work. Then we examine the behavior of CD for word and phrase level importance in situations involving compositionality, showing that CD is able to capture the composition of phrases of differing sentiment. Finally, we show that CD is capable of extracting instances of positive and negative negation.
4.1 TRAINING DETAILS
We first describe the various fitted models which are used to produce interpretations. As the primary intent of this paper is not predictive accuracy, we used standard best practices without much tuning. We implemented all models in Torch using default hyperparameters for weight initializations. All models were optimized using Adam (Kingma & Ba, 2014) with the default learning rate of 0.001 using early stopping on the validation set. For the linear model, we used a bag of vectors model, where we sum the pre-trained Glove vector (Pennington et al., 2014) and add an additional linear layer from the word embedding dimension, 300, to the number of classes, 2. We fine tuned both the word vectors and linear parameters.
For integrated gradients, producing reasonable values required extended experimentation and communication with the creators regarding the choice of baselines and scaling issues. We ultimately used a sequences of periods for our baselines, and rescaled the scores for each review by the standard deviation of the scores for that review, a trick not previously mentioned in the literature. For a gradient baseline, we compute the gradient of the output probability with respect to the word embeddings, and report the dot product between the word vector and its gradient. To obtain phrase scores for word-based baselines integrated gradients, cell decomposition, and gradients, we sum the scores of the words contained within the phrase. We will use the two data sets described below to validate our new CD method.
4.1.1 STANFORD SENTIMENT TREEBANK
We trained an LSTM model on the binary version of the Stanford Sentiment Treebank (SST) (Socher et al., 2013), a standard NLP benchmark which consists of movie reviews ranging from 2 to 52 words long. In addition to review-level labels, it also provides labels for each phrase in the binarized constituency parse tree. Following the hyperparameter choices in Tai et al. (2015), the word and hidden representations of our LSTM were set to 300 and 168, and word vectors were initialized to pretrained Glove vectors (Pennington et al., 2014). Our LSTM attains 87.2% accuracy, and we also train a logistic regression model with bag of words features, which attains 83.2% accuracy.
4.1.2 YELP POLARITY
Originally introduced in Zhang et al. (2015), the Yelp review polarity dataset was obtained from the Yelp Dataset Challenge and has train and test sets of sizes 560,000 and 38,000. The task is binary prediction for whether the review is positive (four or five stars) or negative (one or two stars). The reviews are relatively long, with an average length of 160.1 words. Following the guidelines from Zhang et al. (2015), we implement an LSTM model which attains 4.6% error, and an ngram model, which attains 5.7% error. For computational reasons, we report interpretation results on a random subset of sentences of length at most 40 words. When computing integrated gradient scores, we found that numerical issues produced unusable outputs for roughly 6% of the samples. These reviews are excluded.
5

Under review as a conference paper at ICLR 2018
4.2 UNIGRAM (WORD) SCORES
Before examining the novel, phrase-level dynamics of CD, we first verify that it compares favorably to prior work for the standard use case of producing unigram coefficients. When sufficiently accurate in terms of prediction, logistic regression coefficients are generally treated as a gold standard for interpretability. In particular, when applied to sentiment analysis the ordering of words given by their coefficient value provides a qualitatively sensible measure of importance. Thus, when determining the validity of coefficients extracted from an LSTM, we should expect there to be a meaningful relationship between the CD scores and logistic regression coefficients.
In order to evaluate the word-level coefficients extracted by the CD method, we construct scatter plots with each point consisting of a single word in the validation set. The two values plotted correspond to the coefficient from logistic regression and importance score extracted from the LSTM. For a quantitative measure of accuracy, we use pearson correlation coefficient.
We report quantitative and qualitative results in Appendix 6.1.3. For SST, CD and integrated gradients, with correlations of 0.76 and 0.72, respectively, are substantially better than other methods, with correlations of at most 0.51. On Yelp, the gap is not as big, but CD is still very competitive, having correlation 0.52 with other methods ranging from 0.34 to 0.56. Having verified reasonably strong results in this base case, we now proceed to show the benefits of CD.
4.3 IDENTIFYING DISSENTING SUBPHRASES
We now show that, for phrases of at most five words, existing methods are unable to recognize subphrases with differing sentiments. For example, consider the phrase "used to be my favorite", which is of negative sentiment. The word "favorite", however, is strongly positive, having a logistic regression coefficient in the 93rd percentile. Nonetheless, existing methods consistently rank "favorite" as being highly negative or neutral. In contrast, as shown in Table 1, CD is able to identify "my favorite" as being strongly positive, and "used to be" as strongly negative. A similar dynamic also occurs with the phrase "not worth the time". The main justification for using LSTMs over simpler models is precisely that they are able to capture these kinds of interactions. Thus, it is important that an interpretation algorithm is able to properly uncover how the interactions are being handled.
Using the above as a motivating example, we now show that a similar trend holds throughout the Yelp polarity dataset. In particular, we conduct a search for situations similar to the above, where a strongly positive/negative phrase contains a strongly dissenting subphrase. Phrases are scored using the logistic regression with n-gram features described in Section 4.1, and included if their absolute score is over 1.5. We then examine the distribution of scores for the dissenting subphrases, which are analogous to "favorite".
For an effective interpretation algorithm, the distribution of scores for positive and negative dissenting subphrases should be significantly separate, with positive subphrases having positive scores, and vice versa. However, as can be seen in Appendix 6.1.1, for prior methods these two distributions are nearly identical. The CD distributions, on the other hand, are significantly separate, indicating that what we observed anecdotally above holds in a more general setting.
4.4 EXAMINING HIGH-LEVEL COMPOSITIONALITY
We now show that prior methods struggle to identify cases where a sizable portion of a review (between one and two thirds) has polarity different from the LSTM's prediction. For instance, consider the review in Table 2, where the first phrase is clearly positive, but the second phrase causes the review to ultimately be negative. CD is the only method able to accurately capture this dynamic.
By leveraging the phrase-level labels provided in SST, we can show that this pattern holds in the general case. In particular, we conduct a search for reviews similar to the above example. The search criteria are whether a review contains a phrase labeled by SST to be of opposing sentiment to the review-level SST label, and is between one and two thirds the length of the review.
In Appendix 6.1.2, we show the distribution of the resulting positive and negative phrases for different attribution methods. A successful interpretation method would have a sizable gap between these
6

Under review as a conference paper at ICLR 2018

Attribution Method
Gradient
Leave One Out (Li et al., 2016) Cell decomposition (Murdoch & Szlam, 2017) Integrated gradients (Sundararajan et al., 2017) Contextual decomposition

Heat Map used to be my favorite not worth the time used to be my favorite not worth the time
used to be my favorite not worth the time
used to be my favorite not worth the time
used to be my favorite not worth the time

Legend Very Negative Negative Neutral Positive Very Positive
Table 1: Heat maps for portion of yelp review with different attribution techniques. Only CD captures that "favorite" is positive.

Attribution Method Gradient

Heat Map It's easy to love Robin Tunney ­ she's pretty and she can act ­

but it gets harder and harder to understand her choices.

Leave one out (Li et al., It's easy to love Robin Tunney ­ she's pretty and she can act ­

2016)

but it gets harder and harder to understand her choices.

Cell decomposition (Murdoch & Szlam, 2017)
Integrated gradients (Sundararajan et al., 2017)
Contextual decomposition

It's easy to love Robin Tunney ­ she's pretty and she can act ­ but it gets harder and harder to understand her choices. It's easy to love Robin Tunney ­ she's pretty and she can act ­ but it gets harder and harder to understand her choices. It's easy to love Robin Tunney ­ she's pretty and she can act ­ but it gets harder and harder to understand her choices.

Legend Very Negative Negative Neutral Positive Very Positive
Table 2: Heat maps for portion of review from SST with different attribution techniques. Only CD captures that the first phrase is positive.

two distributions, with positive phrases having mostly positive scores, and negative phrases mostly negative. However, prior methods struggle to satisfy these criteria. 87% of all positive phrases are labelled as negative by integrated gradients, and cell decompositions (Murdoch & Szlam, 2017) even have the distributions flipped, with negative phrases yielding more positive scores than the positive phrases. CD, on the other hand, provides a very clear difference in distributions. To quantify this separation between positive and negative distributions, we examine a two-sample KolmogorovSmirnov one-sided test statistic, a common test for the difference of distributions with values ranging from 0 to 1. CD produces a score of 0.74, indicating a strong difference between positive and negative distributions, with other methods achieving scores of 0 (cell decomposition), 0.33 (integrated gradients), 0.58 (leave one out) and 0.61 (gradient), indicating weaker distributional differences. Given that gradient and leave one out were the weakest performers in unigram scores, this provides strong evidence for the superiority of CD.
7

Under review as a conference paper at ICLR 2018
Figure 1: Distribution of scores for positive and negative negation coefficients relative to all interaction coefficients. Only leave one out and CD are capable of producing these interaction scores.
4.5 CONTEXTUAL DECOMPOSITION (CD) CAPTURES NEGATION In order to understand an LSTM's prediction mechanism, it is important to understand not just the contribution of a phrase, but how that contribution is computed. For phrases involving negation, we now demonstrate that we can use CD to empirically show that our LSTM learns a negation mechanism. Using the phrase labels in SST, we search over the training set for instances of negation. In particular, we search for phrases of length less than ten with the first child containing a negation phrase (such as "not" or "lacks", full list provided in Appendix 6.3) in the first two words, and the second child having positive or negative sentiment. Due to noise in the labels, we also included phrases where the entire phrase was non-neutral, and the second child contained a non-neutral phrase. We identify both positive negation, such as "isn't a bad film", and negative negation, such as "isn't very interesting", where the direction is given by the SST-provided label of the phrase. For a given negation phrase, we extract a negation interaction by computing the CD score of the entire phrase and subtracting the CD scores of the phrase being negated and the negation term itself. The resulting score can be interpreted as an n-gram feature. Note that, of the methods we compare against, only leave one out is capable of producing such interaction scores. For reference, we also provide the distribution of all interactions for phrases of length less than 5. We present the distribution of extracted scores in Figure 1. For CD, we can see that there is a clear distinction between positive and negative negations, and that the negation interactions are centered on the outer edges of the distribution of interactions. Leave one out is able to capture some of the interactions, but has a noticeable overlap between positive and negative negations around zero, indicating a high rate of false negatives.
4.6 IDENTIFYING SIMILAR PHRASES Another benefit of using CDs for interpretation is that, in addition to providing importance scores, it also provides dense embeddings for arbitrary phrases and interactions, in the form of T discussed in Section 3.2. We anecdotally show that similarity in this embedding space corresponds to semantic similarity in the context of sentiment analysis. In particular, for all words and binary interactions, we compute the average embedding T produced by CD across the training and validation sets. In Table 3, we show the nearest neighbours using a cosine similarity metric. The results are qualitatively sensible for three different kinds of interactions: positive negation, negative negation and modification, as well as positive and negative words.
8

Under review as a conference paper at ICLR 2018

not entertaining not funny
not engaging
never satisfactory not well
not fit

not bad

very funny

never dull n't drag never fails

well-puttogether piece entertaining romp very good

without sham without missing

surprisingly sweet very wellwritten

entertaining intelligent engaging satisfying admirable funny

bad dull drag awful tired dreary

Table 3: Nearest neighbours for selected unigrams and interactions using CD embeddings

Note that we for positive and negative words, we chose the positive/negative parts of the negations, in order to emphasize that CD can disentangle this composition.

5 CONCLUSION
In this paper, we have introduced contextual decomposition (CD) for LSTMs, which can be used in both NLP and general applications of LSTMs. The CD produces importance scores for words (single variables in general), phrases (several variables together) and word interactions (variable interactions). Using two sentiment analysis datasets for empirical validation, we first show that for information also produced by prior methods, such as word-level scores, our method compares favorably. More importantly, we then show that CD is capable of identifying phrases of varying sentiment, and extracting meaningful word (or variable) interactions. This movement beyond wordlevel importance is critical for understanding a model as complex and highly non-linear as LSTMs.
REFERENCES
Sebastian Bach, Alexander Binder, Gre´goire Montavon, Frederick Klauschen, Klaus-Robert Mu¨ller, and Wojciech Samek. On pixel-wise explanations for non-linear classifier decisions by layer-wise relevance propagation. PloS one, 10(7):e0130140, 2015.
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly learning to align and translate. arXiv preprint arXiv:1409.0473, 2014.
Sepp Hochreiter and Ju¨rgen Schmidhuber. Long short-term memory. Neural computation, 9(8): 1735­1780, 1997.
Andrej Karpathy, Justin Johnson, and Li Fei-Fei. Visualizing and understanding recurrent networks. arXiv preprint arXiv:1506.02078, 2015.
Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.
Jiwei Li, Will Monroe, and Dan Jurafsky. Understanding neural networks through representation erasure. CoRR, abs/1612.08220, 2016. URL http://arxiv.org/abs/1612.08220.
Scott Lundberg and Su-In Lee. An unexpected unity among methods for interpreting model predictions. arXiv preprint arXiv:1611.07478, 2016.
Ga´bor Melis, Chris Dyer, and Phil Blunsom. On the state of the art of evaluation in neural language models. CoRR, abs/1707.05589, 2017. URL http://arxiv.org/abs/1707.05589.
W James Murdoch and Arthur Szlam. Automatic rule extraction from long short term memory networks. ICLR, 2017.
9

Under review as a conference paper at ICLR 2018
Jeffrey Pennington, Richard Socher, and Christopher Manning. Glove: Global vectors for word representation. In Proceedings of the 2014 conference on empirical methods in natural language processing (EMNLP), pp. 1532­1543, 2014.
Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. Squad: 100,000+ questions for machine comprehension of text. arXiv preprint arXiv:1606.05250, 2016.
Alexander M Rush, Sumit Chopra, and Jason Weston. A neural attention model for abstractive sentence summarization. arXiv preprint arXiv:1509.00685, 2015.
Avanti Shrikumar, Peyton Greenside, and Anshul Kundaje. Learning important features through propagating activation differences. arXiv preprint arXiv:1704.02685, 2017.
Richard Socher, Alex Perelygin, Jean Wu, Jason Chuang, Christopher D Manning, Andrew Ng, and Christopher Potts. Recursive deep models for semantic compositionality over a sentiment treebank. In Proceedings of the 2013 conference on empirical methods in natural language processing, pp. 1631­1642, 2013.
Hendrik Strobelt, Sebastian Gehrmann, Bernd Huber, Hanspeter Pfister, and Alexander M Rush. Visual analysis of hidden state dynamics in recurrent neural networks. arXiv preprint arXiv:1606.07461, 2016.
Mukund Sundararajan, Ankur Taly, and Qiqi Yan. Axiomatic attribution for deep networks. CoRR, abs/1703.01365, 2017. URL http://arxiv.org/abs/1703.01365.
Ilya Sutskever, Oriol Vinyals, and Quoc V Le. Sequence to sequence learning with neural networks. In Advances in neural information processing systems, pp. 3104­3112, 2014.
Kai Sheng Tai, Richard Socher, and Christopher D Manning. Improved semantic representations from tree-structured long short-term memory networks. arXiv preprint arXiv:1503.00075, 2015.
Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun Cho, Aaron Courville, Ruslan Salakhudinov, Rich Zemel, and Yoshua Bengio. Show, attend and tell: Neural image caption generation with visual attention. In International Conference on Machine Learning, pp. 2048­2057, 2015.
Xiang Zhang, Junbo Zhao, and Yann LeCun. Character-level convolutional networks for text classification. In Advances in neural information processing systems, pp. 649­657, 2015.
6 APPENDIX
6.1 PLOTS 6.1.1 PLOTS FOR DISSENTING SUBPHRASES We provide here the plots described in Section 4.3.
6.1.2 PLOTS FOR HIGH-LEVEL COMPOSITIONALITY We provide here the plots referenced in Section 4.4.
6.1.3 LOGISTIC REGRESSION VERSUS EXTRACTED COEFFICIENTS SCATTERPLOTS We provide here the scatterplots and correlations referenced in section 4.2.
10

Under review as a conference paper at ICLR 2018

Figure 2: The distribution of attributions for positive (negative) sub-phrases contained within negative (positive) phrases of length at most five in the Yelp polarity dataset. The positive and negative distributions are nearly identical for all methods except CD, indicating an inability of prior methods to distinguish between positive and negative phrases when occurring in the context of a phrase of the opposite sentiment

Attribution Method Gradient Leave one out (Li et al., 2016) Cell decomposition (Murdoch & Szlam, 2017) Integrated gradients (Sundararajan et al., 2017) Contextual decomposition

Stanford Sentiment 0.375 0.510 0.490
0.724
0.758

Yelp Polarity 0.336 0.358 0.560
0.471
0.520

Table 4: Correlation coefficients between logistic regression coefficients and extracted scores.

11

Under review as a conference paper at ICLR 2018
Figure 3: Distribution of positive and negative phrases, of length between one and two thirds of the full review, in SST. The positive and negative distributions are significantly more separate for CD than other methods, indicating that even at this coarse level of granularity, other methods still struggle.
12

Under review as a conference paper at ICLR 2018
Figure 4: Logistic regression coefficients versus coefficients extracted from an LSTM on SST. We include a least squares regression line. Stronger linear relationships in the plots correspond to better interpretation techniques.
13

Under review as a conference paper at ICLR 2018

6.2 GENERAL RECURSION FORMULA
We provide here the general recursion formula referenced in Section 3.2.1. The two cases that are considered is whether the current time step is during the phrase (q  t  r) or outside of the phrase (t < q or t > r).

tf = [L(Vf t-1) + L(bf ) + L(Vf xt)1qtr] tc-1

(27)

tf =ft tc-1 + [L(Vf t-1) + L(Vf xt)1t>q,t<r] tc-1 tu =L(Vitc-1) [Ltanh(Vgtc-1 + Ltanh(bg)] + L(bi) Ltanh(Vgtc-1)

(28) (29)

+ [L(Wixt) [Ltanh(Wgxt) + Ltanh(Vgt-1) + Ltanh(bg)] + L(bi) Ltanh(Wgxt)]1qtr

tf =L(Vit-1) gt + it Ltanh(Vgt-1) - L(Vit-1) Ltanh(Vgt-1) + L(bi) Ltanh(bg)+ (30)

+ [L(Wixt) [Ltanh(Wgxt) + Ltanh(Vgt-1) + Ltanh(bg)] + L(bi) Ltanh(Wgxt)]1t<q,t>r

6.3 LIST OF WORDS USED TO IDENTIFY NEGATIONS
To search for negations, we used the following list of negation words: not, n't, lacks, nobody, nor, nothing, neither, never, none, nowhere, remotely

14

