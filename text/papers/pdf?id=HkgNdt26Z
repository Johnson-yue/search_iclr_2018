Under review as a conference paper at ICLR 2018
DISTRIBUTED FINE-TUNING OF LANGUAGE MODELS ON PRIVATE DATA
Anonymous authors Paper under double-blind review
ABSTRACT
One of the big challenges in machine learning applications is that training data can be different from the real-world data faced by the algorithm. In language modeling, the language of users (e.g. in private messaging) could change in a year and be completely different from what we observe in publicly available data. At the same time, public data can be used for obtaining general knowledge (i.e. general model of English). We study approaches to distributed fine-tuning of a general model on user private data with the additional requirement of maintaining the quality on the general data. Our experiments demonstrate that a technique based on model averaging and random rehearsal outperforms an approach based on transfer learning, and show that the proposed method improves prediction quality in a reasonable time. The procedure leads to an 8.7 percentage point improvement in keystroke saving rate on informal English texts compared to a basic model trained on Wikipedia. We also propose an experimental framework for evaluating differential privacy of distributed training of language models and show that our approach has good privacy guarantees.
1 INTRODUCTION
Two common problems arising after deployment of a machine learning model on user devices are discrepancy between training data and actual data stored on user devices, and the need of regular model updates. In the case of language modeling, it corresponds to the difference between language and style of the training corpus mined in the Internet and messages of the user, which account for most of the text generated on the device. Even if the training corpus includes a substantial part of informal texts (tweets, forum threads, etc.), real user data can be very different. This is a challenge for word prediction algorithms in software keyboard applications. The most general approach to improvement of customer experience in typing is integrating a separate user language model trained on device in an on-line fashion. In the simplest case it is a smoothed n-gram (e.g. Kneser-Ney n-gram model (Goodman (2001))).
In Yoon et al. (2017) continuously learned personalized language model based on LSTM was proposed but as far as each user generates only a small portion of textual data, such data by itself cannot be used for updates of the general model. Thus, for a model update, a collection of potentially sensitive data from many users is needed. As shown in McMahan et al. (2016), collecting data for training may be avoided. We propose a similar approach for distributed fine-tuning of language models on private data. In this sense our method can be considered as "federated fine-tuning" but we prefer to take more traditional term. In this setting we start with a language model trained on a large text corpus representing the general language. This model G will be updated continuously on user devices but with an additional requirement that the model must not go too far from the general language model, i.e. we don't overfit on user data.
We pursue two goals: 1) to develop an algorithm of distributed fine-tuning without need to collect sensitive user data; and 2) to prevent the language model from forgetting "general English". Besides, we provide analysis of possibility of privacy violation in our model. (Hitaj et al. (2017)) demonstrated an attack on distributed training algorithm leading to information leakage. This means that privacy analysis in necessary for such algorithms.
Our main contributions are: 1) we propose an efficient procedure of distributed fine-tuning of language models immune to the problem of catastrophic forgetting (French (1999)), 2) we provide
1

Under review as a conference paper at ICLR 2018

Figure 1: Overview of the approach. The current model is updated on each users are stored in a queue of size L = KN . Every K elements

devices and updates G¯ti of the queue are

G¯it from used for

one round of averaging. After N rounds the server model Gt+1 can be deployed on devices.

experimental evaluation of on-device training time and convergence rates of the general language model in realistic conditions, and 3) we propose an experimental framework for evaluation of differential privacy of distributed training of language models, and using this framework, we evaluate privacy guarantees of our approach.
In our research we are focused on improvement of keystroke saving rate (see section 2.4) because this metric reflects customer typing experience more directly than perplexity or BLEU. We use LSTM architecture for our language model as described in Zaremba et al. (2014) and evaluate ondevice training time for this architecture. We show that the on-device training time is reasonably small, thus demonstrating the feasibility of the whole approach.
2 DISTRIBUTED FINE-TUNING OF LANGUAGE MODELS
As usual, our task is to predict the next word wN given a sequence of words w1 . . . wN-1. If the prediction algorithm of a software keyboard application is based on a language model with low perplexity on the test data, the application provides a reasonably sorted list of input candidates. Of course, the test data should be drawn from the same distribution as the user data. In our case we also want to have only one, continuously improving model on a user device. As far as the user can always switch to the general English, we have to prevent the model from overfitting on the texts written on the device, or catastrophic forgetting ( McCloskey & Cohen (1989); Goodfellow et al. (2014); Kirkpatrick et al. (2016)).
Our approach can be summarized as follows: 0) At the first stage we have an initial language model G0 trained on a large corpus of standard English; 1) As soon as a user inputs sufficient volume of text, the latest version of Gt is sent from the server to provide synchronous updates, and fine-tuning starts on the device (some amount of text should be accumulated on the device); 2) When the training is finished the model G¯it is sent back to the server; 3) Every time the updated models G¯ti are received from K different users, one round of model update is run; 4) After N rounds, the new model Gt+1 is deployed to devices.
2.1 LEARNING WITHOUT FORGETTING
In its original formulation (Li & Hoiem (2016)), the problem of learning without forgetting (LwF) consists in re-training of existing model  on new data such that its performance on the old data does not degrade.
More formally, suppose we have a classifier with a set of parameters  trained and tested on a dataset D = {Tr, Ts} where Tr and Ts are train and test sets accordingly. Let D = {Tr, Ts} be some new dataset. Our goal is to update the parameters  with dataset D = {Tr, Ts  Ts} i.e. we have to provide the best performance on old and new types of data having only training data of the new type.
2

Under review as a conference paper at ICLR 2018

In contrast, joint training Caruana (1997) assumes a model update with access to the both datasets: D = {Tr  Tr, Ts  Ts}.
As we want to avoid sending user data to the server, classical joint training is impossible. On the other hand, LwF seems promising. In this case we send the user a current instance of the general language model Gt with weights g and fine-tune it producing the model u, while g is used for generating predictions for regularization. The resulting loss at step t and true word wt can be calculated as follows:

where

lt(u) = -

yt,w log p(w|u),

wW

yt,w = 1{wt = w} + (1 - )p(w|g)

(1) (2)

A similar approach is taken in Shin et al. (2016) where predictions of a basic model (in this case g) are taken as soft labels.

2.2 TRAINING WITH REHEARSAL
Minimizing loss in (1)­(2) is equivalent to minimizing Kullback-Leibler divergence L(u) = KL (Pgr Pu) with respect to parameters u of Pu where density of Pgr is given by:

P (x) = PT r (x) + (1 - )P (x|g)

(3)

In (3) PT r (x) stands for the real distribution on a user device and P (x|g) is a probability given by the model of "general English" g. It suggests that instead of optimizing L(u) we can simply add data from Tr to Tr to obtain the (1 - ) portion. This approach, called random rehearsal, was presented in Robins (1995).
In practice in the case of fine-tuning with rehearsal a portion of the general English training corpus (standard English corpus) must be sent to the user device. Volume of typical user data generated on device is of the order of tens of kilobytes per month, and the size of the training data sent to the device will be of the same order. Overall, random rehearsal is more efficient, because there is no need to calculate soft labels.

2.3 SERVER-SIDE MODEL UPDATE

The server-side part of the solution must aggregate models G¯ti from many users and use them to update the general model Gt. We took simple model averaging as a baseline solution and transfer learning (Bengio (2011); Tang et al. (2016)) as an alternative approach.
In the case of transfer learning we optimized cross-entropy function (1), with yi given by an average prediction from N aggregated models uk:

yi

=

1 N

N

p(wi |uk )

k=1

(4)

Just as in the case of on-device training, transfer learning-based approach is rather inefficient in terms of time and memory because predictions from all models are needed.

2.4 KEYSTROKE SAVING RATE

Keystroke saving rate (KSS) McKenzie & Soukoreff (2002) is defined as a relative decrease in the number of characters the user has to type, given suggestions from the software keyboard:

KSS = Ntotal - Ntyped × 100%, Ntotal

(5)

3

Under review as a conference paper at ICLR 2018

Table 1: Random rehearsal vs learning without forgetting. For LwF mode  is a coefficient of the

ground truth probability distribution in the loss function (1)-(2). For random rehearsal mode  is a

portion of user training data in on-device training.

Standard English dataset User dataset

Method

(Wikipedia)

(Twitter)

Av. PPL

PPL KSS, %

PPL KSS, %

Initial server model

100.1 67.9

336.0 49.7

192.6

Random rehearsal,  = 1/4

121.3 66.3

127.9 56.9

124.8

Random rehearsal, = 1/2

131.1 65.9

109.7 58.3

119.1

Random rehearsal, = 3/4

149.0 64.8

99.7 59.0

119.9

Learning without forgetting,  = 1/4 128.4 66.0

162.8 54.9

146.0

Learning without forgetting,  = 1/2 147.0 64.9

121.7 57.5

132.7

Learning without forgetting,  = 3/4 186.5 63.1

101.1 59.2

133.9

On-device re-training,  = 1

265.1 60.2

93.4 59.7

150.8

where Ntotal is the total number of non-space characters in the typed text and Ntyped is the number of characters user still had to type until the correct suggestion was presented. In our experiments we used top-3 suggestion lists.
From the definition above one can see that KSS is better for customer experience assessment compared to perplexity. Besides, perplexity measure underestimates out-of-vocabulary (OOV) words. In the presence of OOV words perplexity is ill-defined, so all OOV words must be removed from the test set. It makes a direct comparison of models with different vocabularies impossible, which is impractical. Finally, our experiments have demonstrated that a small decrease in perplexity may not correspond to KSS improvement and doesn't lead to any practical result. Because of these reasons we decided to take KSS as a key performance metric. We still report perplexity in all cases but pay less attention to it.
2.5 MODEL FINE-TUNING EXPERIMENTS
The goal of our experiments was to find the most efficient pipeline to distributed fine-tuning of language models. We compared several approaches for client-side and server-side model updates. In accordance with the problem statement we assumed a substantial difference between the reallife user corpus and the standard English corpus used for initial training, so we took Twitter and Wikipedia corpora for the user and standard English corpora correspondingly.
The standard English train dataset contained approximately 30M tokens. The hyperparameters of the model were initially tuned on the Standard English validation set of 3.8M tokens. The user train dataset contained approximately 1.7M tokens. Updated models were tested on subsets of the Twitter and Wikipedia corpora containing 200k and 170k tokens correspondingly. Comparison between the random rehearsal and LwF training methods were carried out on a single node.
For our experiments we used LSTM architecture from Zaremba et al. (2014) with 2x650 LSTM layers, a vocabulary size of 30k, dropout 0.5, minibatch size 20, BPTT steps 35. The initial general English model was trained in 39 epochs.
We report KSS and perplexity on both the standard English test set and the user data test sets. In the case of the standard English test set KSS was calculated on a subset of 200 sentences (3600 tokens). The initial general English model had a perplexity of 100.1 and 67.9% KSS rate on the Standard English test and perplexity 336.0 and 49.7% KSS rate on the user data test set. So, the model experienced a considerable 18.2% drop in performance on the user data test set.
Table 1 summarizes our experiments with on-device model update algorithms. We see that the performance gap between the standard English and the user test sets can be considerably reduced at the cost of performance degradation on the first dataset. The best average perplexity is reached with the random rehearsal method and  = 0.5. We believe that the reason of the comparably inferior performance of the LwF method can be explained by the fact that soft labels used by LwF give a poor approximation of the true word distribution of general English so adding a small portion of true data gives better results in terms of knowledge preservation.
4

Under review as a conference paper at ICLR 2018

Table 2: Averaging vs transfer learning for server-side model update.

Standard English dataset User dataset

Method

(Wikipedia)

(Twitter)

PPL KSS, %

PPL KSS, %

Initial server model

100.1 67.9

336.0 49.7

TL on generated data (1-cycle) 109.2 67.2

259.7 50.8

TL on generated data (5-cycles) 112.3 67.0

246.0 51.2

TL on real data Model averaging (1 round)

108.7 67.2 102.8 67.7

261.2 50.7 233.8 51.9

Model averaging (300 rounds) 105.5 67.3

109.3 58.4

Av. PPL
192.6 174.4 171.6 174.6 160.3 107.5

350 Performance during training (rehearsal mode) Wikipedia
300 Twitter

350 Performance during training (standard mode) Wikipedia
300 Twitter

Perplexity Perplexity

250 250

200 200

150 150

1000 50 100 150 200 250 300 Number of rounds

1000 50 100 150 200 250 300 Number of rounds

Figure 2: Training curves for the general model on the standard English (Wikipedia) and the user data (Twitter) corpora with random rehearsal (left) and without random rehearsal (right).

To compare model averaging and transfer learning for a server-side model update, we carried out a small experiment with 10 nodes and 1 iteration of the server-side update. Each model was trained on a mobile phone with a quad-core mobile CPU with a clock frequency 2.31 GHz. We used a minibatch size 10, number of BPTT steps 20, learning rate 0.75 and 1 epoch. Training took approximately 140 seconds on 20 kilobytes of text (user-generated and rehearsal data). Note that we used mobile CPU only, so using the computation time may be reduced by using mobile GPU. Then updated user models were used for general model update on the server.
For the server-side model update algorithm we also tried the approach proposed in Shin et al. (2016). In this case the new model is trained on the texts generated by its previous round of update. We tested both 1 generation per epoch and a single time generation before the first epoch. We carried out at most 6 epochs so we had 1 and 5 cycles of text generation correspondingly.
Results of the experiment are summarized in Table 2. We saw no significant differences between transfer learning on real and generated data. The difference between transfer learning and averaging is more sound but still not large. At the same time model averaging is much more computationally efficient, as long as transfer learning requires calculation of labels from each of the teacher models. After 300 rounds of model updates with 3000 nodes (10 nodes per round) we ended up with an 8.7 absolute gain in KSS on the user data test with only a 0.6 absolute KSS drop on the standard English data test.
Figure 2 shows that the model starts to perform reasonably well after 100 rounds of updates. It also shows the importance of rehearsal for preventing catastrophic forgetting.
3 PRIVACY ANALYSIS
3.1 METHODOLOGY
Our analysis is based on the experimental evaluation of differential privacy. The notion of differential privacy (Dwork & Roth (2014)) appears naturally in many applications when it comes to
5

Under review as a conference paper at ICLR 2018

estimating of the possibility of privacy violation. In particular, it can be applied to language models trained on private user data.
Loosely speaking, if we have a mechanism that takes some input data and produces some output then differential privacy measures how a single input unit influences the total output. In order to achieve differential privacy, some randomness must be introduced into the mechanism.
Definition 1. A randomized mechanism M with domain D and range S satisfies (, )-differential privacy if for any two inputs d, d  D that are adjacent (i.e. differ in one record) and for any subset of outputs S  S it holds that:
P (M(d)  S)  eP (M(d )  S) + 
In our case D is the set of all subsets of users and a randomized mechanism M(d) is a mechanism that generates texts according to a certain language model trained on d  D. Note that for any d we need to have
P (M(d) = s) = 1
sS
Thus it is necessary for S to be the set of all possible texts of some fixed length rather than the set of all texts of an arbitrary length. In our analysis we will consider only the space of texts containing 10 words. This is reasonable because it is close to the average length of a sentence in our user data corpus and it seems that if user's privacy is violated then 10 consequent words are already enough for an adversary to retrieve important information.
Let us fix two adjacent sets of users d and d , train models  and  on them and introduce random variable c(s). It is defined by the expression

P (s|) c(s) = P (s| )

(6)

for any s  S. Since a language model  assigns some positive probability to any sequence of words, c(s) is defined correctly for all s  S.
Parameter  in the Definition 1 stands for the probability that two probabilities P (s|) and P (s| ) differ much. This fact is formalized by the following proposition: Proposition 1. If P (s  S : c(s) > e |)   then P (S|)  eP (S| ) +  for any S  S

Proof. Let B = {s  S : c(s) > e}. Then for any S  S

P (S|) = P (S  B|) + P (S  B|)  P (B|) + eP (S  B| )   + eP (S| )

The proposition implies that it is sufficient to estimate the tail of the distribution of c(s) under measure P(·|). Furthermore, Figure 3 suggests that the tail of the empirical distribution function of the observed variable c(s) has the Pareto distribution. This seems natural as far as words in human
language follow Zipf's law which is a discrete analogue of the Pareto distribution.

To make a confident estimation of differential privacy parameters, we consider 20 different pairs of adjacent sets of users d and d . For each one, we consider a composite null hypothesis that the tail of the random variable c(s) defined in (6) has the Pareto distribution with the shape parameter equal to its Hill's estimator (M. Hill (1975)). Then we apply the Lilliefors test and accept the null hypothesis at a significance level of 5%. Quantiles of the Pareto distribution can be written down explicitly thus giving the following formula for estimation of parameters  and :

1C  = log ,


(7)

where  and C are parameters of Pareto distribution defined in statistical tests (see Appendix).

Finally, for a given  we take the largest value of  amongst all the experiments.

6

Under review as a conference paper at ICLR 2018

|{c: log c > x}| x)

104
103
102
101
100 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7
x

100 75 50 25 0
-25 -50 -75 -100
0.3 0.4 0.5 0.6 0.7
x

Figure 3: Left: Empirical histogram of random samples of c(s). Magenta line represents theoretical distribution of the Pareto law with parameters that are estimated on these samples. Right: Difference between two distributions on the left plot expressed in number of samples (x). The parameters of the Pareto law were estimated on the samples that lie in the region {log c(s) > 0.35} (blue line). Black lines represent standard errors. The left plot is built in logarithmic Y-axis while the right one is built in linear Y-axis.

Experiment 
C KS statistic Experiment

C KS statistic

Table 3: Results of the Lilliefors test
1 2 3 4 5 6 7 8 9 10 15.8 20.9 15.1 16.6 16.5 17.6 14.9 19.2 15.6 15.2
3.25 5.64 2.02 2.48 2.70 4.19 1.47 3.31 1.65 1.83 0.49 0.91 0.48 0.62 0.83 0.59 1.39 0.41 0.93 0.51 11 12 13 14 15 16 17 18 19 20 16.5 14.4 19.5 18.2 16.2 17.2 17.3 14.8 17.1 20.5
3.00 1.53 3.67 2.20 3.42 2.66 1.68 2.18 2.87 4.60 0.76 0.89 0.66 0.94 0.67 0.85 0.73 0.97 0.65 0.94

3.2 EXPERIMENTAL EVALUATION
The critical value for the Lilliefors test at 5% significance level is 1.08. In 19 cases out of 20 the Lilliefors test fails to reject the null hypothesis. This conclusion, together with sample visual representation in Figure 3, allows us to state that the random variable c(s) indeed has tails that decrease like the Pareto distribution tails with quite a big shape parameter. Exact values of KS statistics and Hill's estimators of this parameter for different pairs of users are provided in the Table 3.
Table 4 shows the results for different values of  calculated by formula (7). In this table the value of  is the largest value of this parameter in all 20 experiments. The total number of users is 3 · 103 so it is reasonable to put  = 10-4. For this choice of  parameter  equals to 0.67. It means that our algorithm offers reasonable privacy guarantees (see (Papernot et al., 2017)). Additionally we provide values of  for smaller values of .
The results shown in Table 4 demonstrate that our scheme provides a very good level of privacy protection. However, it is necessary to say that we only aim to produce an empirical estimation of differential privacy which inevitably holds with some high probability but not almost surely (this fact makes our approach close to the so-called random differential privacy introduced in Hall et al. (2011)). In many machine learning algorithms, the outcome is initially deterministic and some wellknown distribution is used to generate noise in order to make the algorithm differentially private (e.g. Papernot et al. (2017)). In our mechanism the source of randomness lies inside the neural network and the output distributions can't be written explicitly. This is the reason why we are able to provide only empirical estimations of differential privacy parameters.
7

Under review as a conference paper at ICLR 2018
Table 4: Differential privacy results  10-4 10-5 10-6  0.67 0.83 0.99
4 CONCLUSION
We have presented our results in distributed fine-tuning of neural language models. We paid special attention to preventing a catastrophic forgetting of the general language after a model fine-tuning on the user devices. Our experiments showed that the performance of an initial model of the general English on user data can be improved significantly almost without a performance degradation on the standard English training data. We found that a combination of on-device training with random rehearsal and server-side model averaging provides the best performance for such distributed finetuning. We also measured on-device training time and it took less than 3 minutes with a realistic assessment of volume of the available user data. Finally, we provided an experimental evaluation of differential privacy of our method and showed that the method has a reasonable level of differential privacy compared to other solutions. We still have to note that we provided an empirical estimation of differential privacy which holds with some high probability but not almost surely.
REFERENCES
Yoshua Bengio. Deep learning of representations for unsupervised and transfer learning. In Proceedings of the 2011 International Conference on Unsupervised and Transfer Learning Workshop, UTLW'11, pp. 17­37. JMLR.org, 2011. URL http://dl.acm.org/citation.cfm?id= 3045796.3045800.
Rich Caruana. Multitask learning. Machine Learning, 28(1):41­75, 1997.
Cynthia Dwork and Aaron Roth. The Algorithmic Foundations of Differential Privacy, volume 9. Now Publishers Inc., Hanover, MA, USA, August 2014.
Robert M. French. Catastrophic forgetting in connectionist networks. Trends in cognitive sciences, 3(4):128­135, 1999.
Jean Dickinson Gibbons and Subhabrata Chakraborti. Nonparametric Statistical Inference, Fifth Edition. Taylor & Francis, 2010.
Ian Goodfellow, Mehdi Mirza, Xiao Da, Aaron Courville, and Yoshua Bengio. An Empirical Investigation of Catastrophic Forgetting in Gradient-Based Neural Networks. TR arXiv:1312.6211v2, 2014.
Joshua T. Goodman. A bit of progress in language modeling. Comput. Speech Lang., 15(4):403­434, 2001.
Rob Hall, Alessandro Rinaldo, and Larry Wasserman. Random Differential Privacy. ArXiv e-prints, December 2011.
Briland Hitaj, Giuseppe Ateniese, and Fernando Pe´rez-Cruz. Deep models under the GAN: information leakage from collaborative deep learning. CoRR, abs/1702.07464, 2017. URL http://arxiv.org/abs/1702.07464.
James Kirkpatrick, Razvan Pascanu, Neil C. Rabinowitz, Joel Veness, Guillaume Desjardins, Andrei A. Rusu, Kieran Milan, John Quan, Tiago Ramalho, Agnieszka Grabska-Barwinska, Demis Hassabis, Claudia Clopath, Dharshan Kumaran, and Raia Hadsell. Overcoming catastrophic forgetting in neural networks. CoRR, abs/1612.00796, 2016. URL http://arxiv.org/abs/ 1612.00796.
Alex J. Koning and Liang Peng. Goodness-of-fit Tests for a Heavy Tailed Distribution. Journal of Statistical Planning and Inference, 138(12):3960 ­ 3981, 2008.
8

Under review as a conference paper at ICLR 2018

Zhizhong Li and Derek Hoiem. Learning without forgetting. CoRR, abs/1606.09282, 2016. URL http://arxiv.org/abs/1606.09282.
Bruce M. Hill. A Simple General Approach to Inference About the Tail of a Distribution. Ann. Statist., 3, 09 1975.
Michael McCloskey and Neil J. Cohen. Catastrophic interference in connectionist networks: The sequential learning problem. The Psychology of Learning and Motivation, 24:104­169, 1989.
Scott McKenzie and William Soukoreff. Text entry for mobile computing: Models and methods, theory and practice. Human-Computer Interaction, 17, 2002.
Brendan H. McMahan, Eider Moore, Daniel Ramage, Seth Hampson, and Blaise Aguera y Arcas. Communication-efficient learning of deep networks from decentralized data. In Proceedings of the 20th International Conference on Artificial Intelligence and Statistics (AISTATS), 2016.
Mark J. Newman. Power laws, Pareto distributions and Zipf's law. Contemporary Physics, 46: 323­351, September 2005.
Nicolas Papernot, Martin Abadi, lfar Erlingsson, Ian Goodfellow, and Kunal Talwar. Semisupervised knowledge transfer for deep learning from private training data. In Proceedings of the International Conference on Learning Representations, 2017. URL https://arxiv.org/ abs/1610.05755.
Anthony V. Robins. Catastrophic Forgetting, Rehearsal and Pseudorehearsal. Connect. Sci., 7: 123­146, 1995.
Sungho Shin, Kyuyeon Hwang, and Wonyong Sung. Generative Knowledge Transfer for Neural Language Models. ArXiv e-prints, August 2016.
Zhiyuan Tang, Dong Wang, and Zhiyong Zhang. Recurrent neural network training with dark knowledge transfer. ICASSP 2016, 2016. URL https://arxiv.org/abs/1505.04630.
Hubert W. Lilliefors. On the Kolmogorov-Smirnov Test for the Exponential Distribution with Mean Unknown. Journal of the American Statistical Association, 64:387­389, 03 1969.
Seunghyun Yoon, Hyeongu Yun, Yuna Kim, Gyu-tae Park, and Kyomin Jung. Efficient transfer learning schemes for personalized language modeling using recurrent neural network. CoRR, abs/1701.03578, 2017. URL http://arxiv.org/abs/1701.03578.
Wojciech Zaremba, Ilya Sutskever, and Oriol Vinyals. Recurrent neural network regularization. CoRR, abs/1409.2329, 2014.

A EXPERIMENTAL EVALUATION OF DIFFERENTIAL PRIVACY FOR TEXTS

One can usually identify that samples come from a power-law distribution by looking at its tail distribution function F (x) = 1 - F (x) where F (x) is a cumulative distribution function (e.g. Newman (2005) describes this method). If F (x) = C/x then log F (x) = log C -  log x, i.e. the plot should be linear on logarithmic axes.
Figure 3 shows the empirical tail distribution function of the observed variable c(s). We generated n = 3 · 104 samples (10-word sequences) with the model with parameters  to get observations of c(s). It can be seen that the tail of c(s) is linear on logarithmic axes like the tail of the Pareto distribution in the region {log c(s) > 0.35}.
So we suppose that F (x) = C/x for big values of x. More precisely, we suppose that the distribution function of c(s) for x > x0 can be represented by the following formula:

F (x) = 1 - F (x0) ·

x0 x



(8)

9

Under review as a conference paper at ICLR 2018

for some x0. Parameter  plays the most important role in the further analysis of differential privacy. A common way to estimate it is to use Hill's estimator:

=

k

logk
i=1

c(ni) cn(k)

(9)

where c(ni) are the order statistics c(n1)  cn(2)  ...  c(nk)  ...  cn(n) and n is the number of samples. This estimator is described in M. Hill (1975). It is a maximum likelihood estimator and

it converges in probability to  when n  , k = k(n)   and k(n)/n  0. Note that the

estimator depends only on outliers of c(s). This is a very helpful property because it allows us to

use the

it even when we need whole distribution. In

to estimate only the experiments

the we

tail distribution take k(n) = 2

F (x) n.

for We

large values of put x0 = cn(k).

x rather than For different

pairs of adjacent sets of users d and d values of  vary from 14.4 to 20.9. Values of x0 vary from

1.33 to 1.43, so log x0 lies in the interval [0.28; 0.36] in our experiments.

Then we tested the null hypothesis that the cumulative distribution function F (x) of the random variable c(s) is of the Pareto law with the shape parameter  for all x > x0. The KolmogorovSmirnov (KS) test is often used for this purpose (Koning & Peng (2008) illustrates this approach).
Since we tested a composite hypothesis, we needed to use modification of the KS test that is called
the Lilliefors test. In the same way as in Koning & Peng (2008) we introduced new random variables ri = log c(ni)/c(nk) for i = 1, .., k. Since c(ni) are order statistics, we have cn(i)/cn(k)  1 for i = 1, .., k and it can be shown that these variables are jointly equal in distribution to ordered samples from Pareto law with the shape parameter  and the scale parameter 1. So, under the null hypothesis {ri}1,..,k are exponential with the parameter  and we can apply the Lilliefors test to check whether these samples really come from an exponential distribution with an unknown mean estimated by r = 1/.

The method that we use (the Lilliefors test for exponential distributions) is described in Gibbons &
Chakraborti (2010). Essentially, we calculate a KS statistic for the exponential distribution with a mean that's equal to 1 and an empirical distribution function Fk(r) of the values {ri/r}1,..,k:

 k sup |Fk(r) - (1 - e-r)|
r1

(10)

This statistic doesn't converge to the Kolmogorov distribution as shown in W. Lilliefors (1969). It converges to the distribution with smaller critical values at the same significance levels because we overfit on the sample data when the estimator r is plugged in. We chose a 5% significance level and critical value for it is 1.08. In 19 cases out of 20 the Lilliefors test failed to reject the null hypothesis at a 5% significance level. Table 3 provides exact values obtained during the application of the statistical test. Relying on these values along with data visualization in 3 we can state that random variable c(s) has tails that decrease like the Pareto distribution tails.

The hypothesis that we accepted suggests that the cumulative distribution function of c(s) is given by the formula (8). It means that the tail distribution function for all x > x0 is given by

F (x)

=

F (x0)x0 x

=

C x

We chose x0 = cn(k), so F (x0) is just the ratio k/n. Thus, C can be estimated by

(11)

C

=

k n

·

(c(nk))

(12)

Values of C are given in the Table 3. Finally, from formula (11) and proposition 1 it is easy to derive that (, )-differential privacy is provided by the values ,  that satisfy

1C  = log


(13)

10

