Under review as a conference paper at ICLR 2018
SOBOLEV GAN
Anonymous authors Paper under double-blind review
ABSTRACT
We propose a new Integral Probability Metric (IPM) between distributions: the Sobolev IPM. The Sobolev IPM compares the mean discrepancy of two distributions for functions (critic) restricted to a Sobolev ball defined with respect to a dominant measure µ. We show that the Sobolev IPM compares two distributions in high dimensions based on weighted conditional Cumulative Distribution Functions (CDF) of each coordinate on a leave one out basis. The Dominant measure µ plays a crucial role as it defines the support on which conditional CDFs are compared. Sobolev IPM can be seen as an extension of the one dimensional VonMises Crame´r statistics to high dimensional distributions. We show how Sobolev IPM can be used to train Generative Adversarial Networks (GANs). We then exploit the intrinsic conditioning implied by Sobolev IPM in text generation. Finally we show that a variant of Sobolev GAN achieves competitive results in semisupervised learning on CIFAR-10, thanks to the smoothness enforced on the critic by Sobolev GAN which relates to Laplacian regularization.
1 INTRODUCTION
In order to learn Generative Adversarial Networks (Goodfellow et al., 2014), it is now well established that the generator should mimic the distribution of real data, in the sense of a certain discrepancy measure. Discrepancies between distributions that measure the goodness of the fit of the neural generator to the real data distribution has been the subject of many recent studies (Arjovsky & Bottou, 2017; Nowozin et al., 2016; Kaae Sønderby et al., 2017; Mao et al., 2017; Arjovsky et al., 2017; Gulrajani et al., 2017; Mroueh et al., 2017; Mroueh & Sercu, 2017; Li et al., 2017), most of which focus on training stability.
In terms of data modalities, most success was booked in plausible natural image generation after the introduction of Deep Convolutional Generative Adversarial Networks (DCGAN) (Radford et al., 2015). This success is not only due to advances in training generative adversarial networks in terms of loss functions (Arjovsky et al., 2017) and stable algorithms, but also to the representation power of convolutional neural networks in modeling images and in finding sufficient statistics that capture the continuous density function of natural images. When moving to neural generators of discrete sequences generative adversarial networks theory and practice are still not very well understood. Maximum likelihood pre-training or augmentation, in conjunction with the use of reinforcement learning techniques were proposed in many recent works for training GAN for discrete sequences generation (Yu et al., 2016; Che et al., 2017; Hjelm et al., 2017; Rajeswar et al., 2017). Other methods included using the Gumbel Softmax trick (Kusner & Herna´ndez-Lobato, 2016) and the use of auto-encoders to generate adversarially discrete sequences from a continuous space (Zhao et al., 2017). End to end training of GANs for discrete sequence generation is still an open problem (Press et al., 2017). Empirical successes of end to end training have been reported within the framework of WGAN-GP (Gulrajani et al., 2017), using a proxy for the Wasserstein distance via a pointwise gradient penalty on the critic. Inspired by this success, we propose in this paper a new Integral Probability Metric (IPM) between distributions that we coin Sobolev IPM. Intuitively an IPM (Mu¨ller, 1997) between two probability distributions looks for a witness function f , called critic, that maximally discriminates between samples coming from the two distributions:
sup ExPf (x) - ExQf (x).
f F
Traditionally, the function f is defined over a function class F that is independent to the distributions at hand (Sriperumbudur et al., 2012). The Wasserstein-1 distance corresponds for instance to an IPM
1

Under review as a conference paper at ICLR 2018

where the witness functions are defined over the space of Lipschitz functions; The MMD distance (Gretton et al., 2012) corresponds to witness functions defined over a ball in a Reproducing Kernel Hilbert Space (RKHS).

We will revisit in this paper Fisher IPM defined in (Mroueh & Sercu, 2017), which extends the IPM
definition to function classes defined with norms that depend on the distributions. Fisher IPM can be seen as restricting the critic to a Lebsegue ball defined with respect to a dominant measure µ. The Lebsegue norm is defined as follows:

f 2(x)µ(x)dx.
X
where µ is a dominant measure of P and Q.

In this paper we extend the IPM framework to critics bounded in the Sobolev norm:

xf (x)

2 2

µ(x)dx,

X

In contrast to Fisher IPM, which compares joint probability density functions of all coordinates

between two distributions, we will show that Sobolev IPM compares weighted (coordinate-wise)

conditional Cumulative Distribution Functions for all coordinates on a leave on out basis. Matching

conditional dependencies between coordinates is crucial for sequence modeling.

Our analysis and empirical verification show that the modeling of the conditional dependencies can be built in to the metric used to learn GANs as in Sobolev IPM. For instance, this gives an advantage to Sobolev IPM in comparing sequences over Fisher IPM. Nevertheless, in sequence modeling when we parametrize the critic and the generator with a neural network, we find an interesting tradeoff between the metric used and the architectures used to parametrize the critic and the generator as well as the conditioning used in the generator. The burden of modeling the conditional long term dependencies can be handled by the IPM loss function as in Sobolev IPM (more accurately the choice of the data dependent function class of the critic) or by a simpler metric such as Fisher IPM together with a powerful architecture for the critic that models conditional long term dependencies such as LSTM or GRUs in conjunction with a curriculum conditioning of the generator as done in (Press et al., 2017). Highlighting those interesting tradeoffs between metrics, data dependent functions classes for the critic (Fisher or Sobolev) and architectures is crucial to advance sequence modeling and more broadly structured data generation using GANs.

On the other hand, Sobolev norms have been widely used in manifold regularization in the so called Laplacian framework for semi-supervised learning (SSL) (Belkin et al., 2006). GANs have shown success in semi-supervised learning (Salimans et al., 2016; Dumoulin et al., 2017; Dai et al., 2017; Kumar et al., 2017). Nevertheless, many normalizations and additional tricks were needed. We show in this paper that a variant of Sobolev GAN achieves strong results in semi-supervised learning on CIFAR-10, without the need of any activation normalization in the critic.

The main contributions of this paper can be summarized as follows:

1. We overview in Section 2 different metrics between distribution used in the GAN literature. We then generalize Fisher IPM in Section 3 with a general dominant measure µ and show how it compares distributions based on their PDFs.
2. We introduce Sobolev IPM in Section 4 by restricting the critic of an IPM to a Sobolev ball defined with respect to a dominant measure µ. We then show that Sobolev IPM defines a discrepancy between weighted (coordinate-wise) conditional CDFs of distributions.
3. The intrinsic conditioning and the CDF matching make Sobolev IPM suitable for discrete sequence matching and explain the success of the gradient pernalty in WGAN-GP and Sobolev GAN in discrete sequence generation.
4. We give in Section 5 an ALM (Augmented Lagrangian Multiplier) algorithm for training Sobolev GAN. Similar to Fisher GAN, this algorithm is stable and does not compromise the capacity of the critic.
5. We show in Appendix A that the critic of Sobolev IPM satisfies an elliptic Partial Differential Equation (PDE). We relate this diffusion to the Fokker-Planck equation and show the behavior of the gradient of the optimal Sobolev critic as a transportation plan between distributions.

2

Under review as a conference paper at ICLR 2018

6. We empirically study Sobolev GAN in character level text generation (Section 6.1). We validate that the conditioning implied by Sobolev GAN is crucial for the success and stability of GAN in text generation. As a take home message from this study, we see that text generation succeeds either by implicit conditioning i.e using Sobolev GAN (or WGANGP) together with convolutional critics and generators, or by explicit conditioning i.e using Fisher IPM together with recurrent critic and generator and curriculum learning.
7. We finally show in Section 6.2 that a variant of Sobolev GAN achieves competitive semisupervised learning results on CIFAR-10, thanks to the smoothness implied by the Sobolev regularizer.

2 OVERVIEW OF METRICS BETWEEN DISTRIBUTIONS

In this Section, we review different representations of probability distributions and metrics for com-

paring distributions that use those representations. Those metrics are at the core of training GAN.

In what follows, we consider probability measures with a positive weakly differentiable probability density functions (PDF). Let P and Q be two probability measures with PDFs P(x) and Q(x) defined on X  Rd. Let FP and FQ be the Cumulative Distribution Functions (CDF) of P and Q

respectively:

x1 xd

FP(x) = . . . P(x1, . . . xd)dx.

-

-

The score function of a density function is defined as: sP(x) = x log(P(x))  Rd.
In this work, we are interested in metrics between distributions that have a variational form and can be written as a suprema of mean discrepancies of functions defined on a specific function class. This type of metrics include -divergences as well as Integral Probability Metrics (Sriperumbudur et al., 2009) and have the following form:
dF (P, Q) = sup |(f ; P, Q)| ,
f F
where F is a function class defined on X and  is a mean discrepancy,  : F  R. The variational form given above leads in certain cases to closed form expressions in terms of the PDFs P, Q or in terms of the CDFs FP, FQ or the score functions sP, sQ.
In Table 1, we give a comparison of different discrepancies  and function spaces F used in the literature for GAN training together with our proposed Sobolev IPM. We see from Table 1 that Sobolev IPM, compared to Wasserstein Distance, imposes a tractable smoothness constraint on the critic on points sampled from a distribution µ, rather then imposing a Lipschitz constraint on all points in the space X . We also see that Sobolev IPM is the natural generalization of the Crame´r Von-Mises Distance from one dimension to high dimensions. We note that the Energy Distance, a form of Maximum Mean Discrepancy for a special kernel, was used in (Bellemare et al., 2017b) as a generalization of the Crame´r distance in GAN training but still needed a gradient penalty in its algorithmic counterpart leading to a mis-specified distance between distributions. Finally it is worth noting that when comparing Fisher IPM and Sobolev IPM we see that while Fisher IPM compares joint PDF of the distributions, Sobolev IPM compares weighted (coordinate-wise) conditional CDFs. As we will see later, this conditioning nature of the metric makes Sobolev IPM suitable for comparing sequences. Note that the Stein metric (Liu et al., 2016; Liu, 2017) uses the score function to match distributions. We will show later how Sobolev IPM relates to the Stein discrepancy (Appendix A).

3 GENERALIZING FISHER IPM: PDF COMPARISON
Imposing data-independent constraints on the function class in the IPM framework, such as the Lipschitz constraint in the Wasserstein distance is computationally challenging and intractable for the general case. In this Section, we generalize the Fisher IPM introduced in (Mroueh & Sercu, 2017), where the function class is relaxed to a tractable data dependent constraint on the second order moment of the critic, in other words the critic is constrained to be in a Lebsegue ball.

3

Under review as a conference paper at ICLR 2018

(f ; P, Q)

-Divergence
(Goodfellow et al., 2014) (Nowozin et al., 2016)

ExPf (x) - ExQ(f (x))  Fenchel Conjugate

F Function class
f : X  R, f  dom

dF (P, Q) Closed Form

ExQ

(

P(x) Q(x)

)

Wasserstein -1 (Arjovsky et al., 2017) (Gulrajani et al., 2017)
MMD (Li et al., 2017) (Li et al., 2015) (Dziugaite et al., 2015)

ExPf (x) - ExQf (x) ExPf (x) - ExQf (x)

f : X  R, f lip  1 f : X  R, f Hk  1

NA ExPkx - ExQkx Hk

Stein Distance (Wang & Liu, 2016)

ExQ [T (P)f (x)] T (P) = (x log(P(x)) + x.

f : X  Rd f smooth with zero
boundary condition

NA in general has a closed form
in RKHS

Crame´r for d = 1 (Bellemare et al., 2017a)

ExPf (x) - ExQf (x)

f

:

X



R,

ExP

(

df (x) dx

)2

 1,

f smooth with zero

boundary condition

ExP xR

FP(x)-FQ(x) 2 P(x)

µ-Fisher
IPM (Mroueh & Sercu, 2017)

ExPf (x) - ExQf (x)

f : X  R, f  L2(X , µ), Exµf 2(x)  1

Exµ

P(x)-Q(x) 2 µ(x)

µ-Sobolev IPM (This work)

ExPf (x) - ExQf (x)

f : X  R, f  W01,2(X , µ), Exµ xf (x) 2  1, with zero boundary condition

1 d

Exµ

d i(P)-i(Q) 2 i=1 µ(x)

where i(P) =

xP-Xi-=i (x(-xi1),F. .P.[Xxii|-X-1,i

=x-i] (xi) xi+1, . . . xd

)

Table 1: Comparison of different metrics between distributions used for GAN training. References are for papers using those metrics for GAN training.

Fisher IPM. Let X  Rd and P(X ) be the space of distributions defined on X . Let P, Q  P(X ), and µ be a dominant measure of P and Q, in the sense that
µ(x) = 0 = P(x) = 0 and Q(x) = 0.
We assume µ to be also a distribution in P(X ), and assume µ(x) > 0, x  X . Let L2(X , µ) be the space of µ-measurable functions. For f, g  L2(X , µ), we define the following dot product and its corresponding norm:

f, g L2(X ,µ) =

f (x)g(x)µ(x)dx,
X

f L2(X ,µ) =

f 2(x)µ(x)dx.
X

Note that L2(X , µ), can be formally defined as follows: L2(X , µ) = {f : X  R s.t f L2(X ,µ) < }.

We define the unit Lebesgue ball as follows:

B2(X , µ) = {f  L2(X , µ), f L2(X ,µ)  1}.

Fisher IPM defined in (Mroueh & Sercu, 2017), searches for the critic function in the Lebesgue Ball

B2(X , µ) that maximizes the mean discrepancy between P and Q. Fisher GAN (Mroueh & Sercu,

2lo0n1g7)aswiat sdoomrigininaatellsyPfoarnmduQla.teWdesdpeeficinfiecGalelynefroarliµze=d F21is(hPer+IPQM).

We consider as follows:

here

a

general

µ

as

Fµ(P, Q) = sup ExPf (x) - ExQf (x)
f B2(X ,µ)

(1)

4

Under review as a conference paper at ICLR 2018

Note that:

ExPf (x) - ExQf (x) =

f,

P

- µ

Q

.
L2(X ,µ)

Hence Fisher IPM can be written as follows:

Fµ(P, Q) = sup
f B2(X ,µ)

f,

P

- µ

Q

L2(X ,µ)

(2)

We have the following result:

Theorem 1 (Generalized Fisher IPM). The Fisher distance and the optimal critic are as follows:

1. The Fisher distance is given by:

Fµ(P, Q) =

P-Q

=

µ L2(X ,µ)

Exµ

P(x) - Q(x) µ(x)

2
.

2. The optimal f achieving the Fisher distance Fµ(P, Q) is:

f

=

1 F (P, Q)

P

- µ

Q

,

µ

almost

surely.

Proof of Theorem 1. From Equation (2), the op-

timal f belong to the intersection of the hy-

perplane that has normal n

=

P-Q µ

,

and

the

ball B2(X , µ), hence f = F (P, Q) = n L2(X ,µ).

.n
n L2(X ,µ)

Hence

PQ µ f
kf kL2(X ,µ) = 1

We see from Theorem 1 the role of the dominant measure µ: the optimal critic is defined with respect
to this measure and the overall Fisher distance can be seen as an average weighted distance between probability density functions, where the average is taken on points sampled from µ. We give here some choices of µ:

1.

For µ =

1 2

(P

+

Q),

we

obtain

the

symmetric

chi-squared

distance

as

defined

in

(Mroueh

&

Sercu, 2017).

2. µGP , the implicit distribution defined by the interpolation lines between Pr and Q as in (Gulrajani et al., 2017).

3. When µ does not dominate P, and Q, we obtain a non symmetric divergence. For example

for µ = P, FP2(P, Q) =

X

(P(x)-Q(x))2 P(x)

dx.

We see

here

that for

this

particular

choice we

obtain the Pearson divergence.

4 SOBOLEV IPM
In this Section, we introduce the Sobolev IPM. In a nutshell, the Sobolev IPM constrains the critic function to belong to a ball in the restricted Sobolev Space. In other words we constrain the norm of the gradient of the critic xf (x). We will show that by moving from a Lebesgue constraint as in Fisher IPM to a Sobolev constraint as in Sobolev IPM, the metric changes from a joint PDF matching to weighted (ccordinate-wise) conditional CDFs matching. The intrinsic conditioning built in to the Sobolev IPM and the comparison of cumulative distributions makes Sobolev IPM suitable for comparing discrete sequences.
4.1 DEFINITION AND EXPRESSION OF SOBOLEV IPM IN TERMS OF COORDINATE CONDITIONAL CDFS
We will start by recalling some definitions on Sobolev Spaces. We assume in the following that X is compact and consider functions in the Sobolev space W 1,2(X , µ):
W 1,2(X , µ) = f : X  R, xf (x) 2 µ(x)dx <  ,
X

5

Under review as a conference paper at ICLR 2018

We restrict ourselves to functions in W 1,2(X , µ) vanishing at the boundary, and note this space

W01,2(X , µ). Note that in this case: f W01,2(X ,µ) =

X xf (x) 2 µ(x)dx defines a semi-

norm. We can similarly define a dot product in W01,2(X , µ), for f, g  W01,2(X , µ):

f, g W01,2(X ,µ) = X xf (x), xg(x) Rd µ(x)dx.

Hence we define the following Sobolev IPM, by restricting the critic of the mean discrepancy to the Sobolev unit ball :

Sµ(P, Q) =

sup

ExPf (x) - ExQf (x)

f W01,2, f W01,2(X ,µ)1

(3)

Let FP and FQ be the cumulative distribution functions of P and Q respectively. We have:

P(x)

=

x1

d ...



xd

FP

(x),

and we define

D-i

=



x1

.

.

.



 d-1 xi-1  xi+1

.

.

.



xd

,

for

i

=

1 . . . d.

D-i computes the (d - 1) high-order partial derivative excluding the variable i.

(4)

Our main result is presented in Theorem 2. Additional theoretical results are given in Appendix A. All proofs are given in Appendix B. Theorem 2 (Sobolev IPM). Assume that FP, and FQ and its d derivatives exist and are continuous: FP and FQ  Cd(X ). Define the differential operator D- :
D- = (D-1, . . . D-d). For x = (x1, . . . xi-1, xi, xi+1, . . . xd), let x-i = (x1, . . . xi-1, xi+1, . . . xd).
The Sobolev IPM given in Equation (3) has the following equivalent forms:

1. Sobolev IPM as comparison of high order partial derivatives of CDFs. The Sobolev IPM has the following form:

Sµ(P, Q)

=

1 d

X

di=1(D-iFP(x) - µ(x)

D-i

FQ(x))2

dx.

2. Sobolev IPM as comparison of weighted (coordinate-wise) conditional CDFs. The Sobolev IPM can be written in the following equivalent form:

Sµ2(P, Q)

=

1 d2

Exµ

d

i=1

PX -i

(x )F-i
P[Xi |X -i =x-i ]

(xi)

-

QX -i

(x )F-i
Q[Xi |X -i =x-i ]

(xi)

µ(x)

(5)

2
.

3. The optimal critic f  satisfies the following identity:

xf (x)

=

1 dSµ(P, Q)

D-

FQ(x) - D-FP(x) µ(x)

,

µ

- almost

surely.

(6)

We show in Appendix A that the optimal Sobolev critic is the solution of the following elliptic PDE (with zero boundary conditions):

P-Q Sµ(P, Q)

=

-div(µ(x)xf (x)).

(7)

Appendix A gives additional theoretical results of Sobolev IPM in terms of 1) approximating Sobolev critic in a function hypothesis class such as neural networks 2) Linking the elliptic PDE

given in Equation (7) and the Fokker-Planck diffusion. As we illustrate in Figure 1(b) the gradient of the critic defines a transportation plan for moving the distribution mass from Q to P.

6

Under review as a conference paper at ICLR 2018

Discussion of Theorem 2. We make the following remarks on Theorem 2:

1. From Theorem 2, we see that the Sobolev IPM compares d higher order partial derivatives of the cumulative distributions FP and FQ, while Fisher IPM compares the probability density functions.
2. The dominant measure µ plays a similar role to Fisher:

Sµ2(P, Q)

=

1 d2

d

Exµ

D-iFP(x) - D-iFQ(x) µ(x)

2
,

i=1

the average distance is defined with respect to points sampled from µ.
3. Comparison of coordinate-wise Conditional CDFs. We note in the following x-i = (x1, . . . xi-1, xi+1, . . . xd). Note that we have:

D-iFP(x)

=

 d-1 x1 . . . xi-1xi+1

. . . xd

x1 xd

. . . P(u1 . . . ud)du1 . . . dud

-

-

xi
= P(x1, . . . , xi-1, u, xi+1, . . . , xd)du

-

xi

= PX-i (x1, . . . , xi-1, xi+1, . . . xd)

P[Xi|X-i=x-i](u|x1, . . . , xi-1, xi+1, . . . xd)du

-

(Using Bayes rule)

= PX-i (x-i)FP[Xi|X-i=x-i] (xi),

Note that for each i, D-iFP(x) is the cumulative distribution of the variable Xi given the other variables X-i = x-i, weighted by the density function of X-i at x-i. This leads us to the form given in Equation 5.
We see that the Sobolev IPM compares for each dimension i the conditional cumulative distribution of each variable given the other variables, weighted by their density function. We refer to this as comparison of coordinate-wise CDFs on a leave one out basis. From this we see that we are comparing CDFs, which are better behaved on discrete distributions. Moreover, the conditioning built in to this metric will play a crucial role in comparing sequences as the conditioning is important in this context (See section 6.1).

4.2 ILLUSTRATIVE EXAMPLES

Sobolev IPM / Crame´r Distance and Wasserstein-1 in one Dimension. In one dimension, Sobolev IPM is the Crame´r Distance (for µ uniform on X , we note this µ := 1). While Sobolev IPM in one dimension measures the discrepancy between CDFs, the one dimensional Wasserstein-p
distance measures the discrepancy between inverse CDFs:

Sµ2:=1(P, Q) = (FP(x) - FQ(x))2dx versus Wpp(P, Q) =
X
Recall also that the Fisher IPM for uniform µ is given by :

1
|FP-1(u) - FQ-1(u)|pdu,
0

Fµ2:=1(P, Q) = (P(x) - Q(x))2dx.
X
Consider for instance two point masses P = a1 and Q = a2 with a1, a2  R. The rationale behind using Wasserstein distance for GAN training is that since it is a weak metric, for far distributions Wasserstein distance provides some signal (Arjovsky et al., 2017). In this case, it is easy to see that W11(P, Q) = Sµ2:=1 = |a1 - a2|, while Fµ2:=1(P, Q) = 2. As we see from this simple example, CDF comparison is more suitable than PDF for comparing distributions on discrete spaces.

Sobolev IPM between two 2D Gaussians. We consider P and Q to be two dimensional Gaussians

with means µ1 and µ2 and covariances 1 and 2. Let (x, y) be the coordinates in 2D. We note FP

and

FQ

the

CDFs

of

P

and

Q

respectively.

We

consider

in

this

example

µ

=

P+Q 2

.

We

know

from

7

Under review as a conference paper at ICLR 2018

(a) Numerical solution of the PDE satisfied by the optimal Sobolev critic.

(b) Optimal Sobolev Transport Vector Field xf (x) (arrows are the vector field xf (x) evaluated on the 2D grid. Magnitude of arrows was rescaled for visualization.)

Figure 1: Numerical solution of the PDE satisfied by the optimal Sobolev critic and the transporta-

tion Plan induced by the gradient of Sobolev critic. The gradient of the critic (wrt to the input),

defines on to P. For a

the support of µ = theoretical analysis

P+Q 2

a

of this

transportation plan for moving the distribution mass from Q transportation plan and its relation to Fokker-Planck diffusion

the reader is invited to check Appendix A.

Theorem 2 that the gradient of the Sobolev optimal critic is proportional to the following vector

field:

f (x, y)



1 µ(x, y)

 y

(FQ(x,

y

)

-

FP

(x,

y))

 x

(FQ

(x,

y)

-

FP

(x,

y))

(8)

In Figure 1 we consider µ1 = [1, 0], 1 =

1.9 0.8

0.8 1.3

µ2 = [1, -2], 2 =

1.9 -0.8

-0.8 1.3

.

In Figure 1(a) we plot the numerical solution of the PDE satisfied by the optimal Sobolev

critic given in Equation (7), using MATLAB solver for elliptic PDEs (more accurately we solve

-div(µ(x)xf (x)) = P(x) - Q(x), hence we obtain the solution of Equation (7) up to a nor-

malization

constant

(

Sµ

1 (P,Q)

)).

We

numerically solve

the

PDE

on

a

rectangle

with

zero

boundary

conditions. We see that the optimal Sobolev critic separates the two distributions well. In Figure

1(b) we then numerically compute the gradient of the optimal Sobolev critic on a 2D grid as given

in Equation 8 (using numerical evaluation of the CDF and finite difference for the evaluation of the partial derivatives). We plot in Figure 1(b) the density functions of P and Q as well as the vector field

of the gradient of the optimal Sobolev critic. As discussed in Section A.2, we see that the gradient

of the critic (wrt to the input), defines the distribution mass from Q to P.

on

the

support

of

µ

=

P+Q 2

a

transportation

plan

for

moving

5 SOBOLEV GAN

Now we turn to the problem of learning GANs with Sobolev IPM. Given the "real distribution"

Pr  P(X ), our goal is to learn a generator g : Z  Rnz  X , such that for z  pz, the

distribution of g(z) is close to the real data distribution Pr, where pz is a fixed distribution on Z

(for instance z  {xi, i = 1 . . . N }

N 

(0, Pr ,

Inz )). {zi, i

We =1

note Q for the "fake . . . N }  N (0, Inz ),

distribution" and {x~i, i =

of 1.

g(z), z ..N} 

 pz. Consider µ. We consider

these choices for µ:

1.

µ=

Pr +Q 2

i.e x~  Pr

or x~ = g(z), z

 pz

with equal probability

1 2

.

2. µGP is the implicit distribution defined by the interpolation lines between Pr and Q as in (Gulrajani et al., 2017) i.e : x~ = ux + (1 - u)y, x  Pr, y = g(z), z  pz and

u  Unif[0, 1].

8

Under review as a conference paper at ICLR 2018

Sobolev GAN can be written as follows:

min

g

fp

,

1 N

sup E^(fp, g) =

N i=1

x fp (x~i )

2 =1

1 N

N
fp(xi) -
i=1

1 N

N
fp (g (zi ))
i=1

For any choice of the parametric function class Hp , note the constraint by ^ S(fp, g) =

1 N

N i=1

xfp(x~i) 2 . For example if µ

=

Pr

+Q 2

,

^ S(fp, g)

=

1 2N

N i=1

xfp(xi) 2 +

1 2N

N i=1

x fp (g (zi ))

2. Note that, since the optimal theoretical critic is achieved on the sphere,

we impose a sphere constraint rather than a ball constraint. Similar to (Mroueh & Sercu, 2017) we

define the Augmented Lagrangian corresponding to Sobolev GAN objective and constraint

LS (p,

,

)

=

E^(fp,

g )

+

(1

-

^ S(fp,

g ))

-

 2

(^ S

(fp

,

g

)

-

1)2

(9)

where  is the Lagrange multiplier and  > 0 is the quadratic penalty weight. We alternate between
optimizing the critic and the generator. We impose the constraint when training the critic only. Given , we solve maxp min LS(p, , ), for training the critic. Then given the critic parameters p we optimize the generator weights  to minimize the objective min E^(fp, g). See Algorithm 1.

Algorithm 1 Sobolev GAN

Input:  penalty weight,  Learning rate, nc number of iterations for training the critic, N batch size Initialize p, ,  = 0

repeat

for j = 1 to nc do Sample a minibatch xi, i = 1 . . . N, xi  Pr Sample a minibatch zi, i = 1 . . . N, zi  pz (gp, g)  (pLS, LS)(p, , ) p  p +  ADAM (p, gp)    - g {SGD rule on  with learning rate }

end for

Sample zi, i = 1 . . . N, zi  pz

d



 E^(fp ,

g )

=

-

1 N

N i=1

fp(g

(zi))

   -  ADAM (, d)

until  converges

Relation to WGAN-GP. WGAN-GP can be written as follows:

min
g f,

sup E^(fp, g) =
xfp(x~i) =1,x~iµGP

1 N

N
fp(xi) -
i=1

1 N

N
fp (g (zi ))
i=1

The main difference between WGAN-GP and our setting, is that WGAN-GP enforces pointwise constraints on points drawn from µ = µGP via a point-wise quadratic penalty (E^(fp, g) -  iN=1(1 -
xf (x~i) )2) while we enforce that constraint on average as a Sobolev norm, allowing us the co-
ordinate weighted conditional CDF interpretation of the IPM.

6 APPLICATIONS OF SOBOLEV GAN
Sobolev IPM has two important properties; The first stems from the conditioning built in to the metric through the weighted conditional CDF interpretation. The second stems from the diffusion properties that the critic of Sobolev IPM satisfies (Appendix A) that has theoretical and practical ties to the Laplacian regularizer and diffusion on manifolds used in semi-supervised learning (Belkin et al., 2006).
In this Section, we exploit those two important properties in two applications of Sobolev GAN: Text generation and semi-supervised learning. First in text generation, which can be seen as a discrete sequence generation, Sobolev GAN (and WGAN-GP) enable training GANs without need to do explicit brute-force conditioning. We attribute this to the built-in conditioning in Sobolev IPM (for the sequence aspect) and to the CDF matching (for the discrete aspect). Secondly using GANs in

9

Under review as a conference paper at ICLR 2018

semi-supervised learning is a promising avenue for learning using unlabeled data. We show that a variant of Sobolev GAN can achieve strong SSL results on the CIFAR-10 dataset, without the need of any form of activation normalization in the networks or any extra ad hoc tricks.
6.1 TEXT GENERATION WITH SOBOLEV GAN
In this Section, we present an empirical study of Sobolev GAN in character level text generation. Our empirical study on end to end training of character-level GAN for text generation is articulated on four dimensions (loss, critic, generator, µ). (1) the loss used (GP: WGAN-GP (Gulrajani et al., 2017), S: Sobolev or F: Fisher) (2) the architecture of the critic (Resnets or RNN) (3) the architecture of the generator (Resnets or RNN or RNN with curriculum learning) (4) the sampling distribution µ in the constraint.
Text Generation Experiments. We train a character-level GAN on Google Billion Word dataset and follow the same experimental setup used in (Gulrajani et al., 2017). The generated sequence length is 32 and the evaluation is based on Jensen-Shannon divergence on empirical 4-gram probabilities (JS-4) of validation data and generated data. JS-4 may not be an ideal evaluation criteria, but it is a reasonable metric for current character-level GAN results, which is still far from generating meaningful sentences.
Annealed Smoothing of discrete Pr in the constraint µ. Since the generator distribution will always be defined on a continuous space, we can replace the discrete "real" distribution Pr with a smoothed version (Gaussian kernel smoothing) Pr N (0, 2Id). This corresponds to doing the following sampling for Pr : x + , x  Pr, and   N (0, 2Id). Note that we only inject noise to the "real" distribution with the goal of smoothing the support of the discrete distribution, as opposed to instance noise on both "real" and "fake" to stabilize the training, as introduced in (Kaae Sønderby et al., 2017; Arjovsky & Bottou, 2017). As it is common in optimization by continuation (Mobahi & III, 2015), we also anneal the noise level  as the training progresses on a linear schedule.

JS-4 JS-4

0.50

0.48 0.46

((SG,PD, D==rerse,sG, G==rerse,sµ,GµPG)P)

0.44

0.42

0.40

0.38

0.36

0.34

0.320

5000

10000 g

it1e5r0a0t0ions20000

25000 30000

(a) Comparing Sobolev with µGP and WGAN-GP. The JS-4 are 0.3363 and

0.3302 respectively.

0.50

0.48 0.46 0.44

((((SGSS,,,PDDD, D====rrreeerssse,,,sGGG, G====rrreeerssse,,,s(µµ,ssaaµr((G+P00)==11)/.. 052)))))

0.42

0.40

0.38

0.36

0.34

0.320

5000

10000 g

it1e5r0a0t0ions20000

25000

30000

(b) Comparing Sobolev with different µ
dominant measures and WGAN-GP. The JS4 of µsa(0 = 1.5) is 0.3268.

Figure 2: Result of Sobolev GAN for various dominating measure µ, for resnets as architectures of the critic and the generator.

Sobolev GAN versus WGAN-GP with Resnets. In this setting, we compare (WGAN-

GP,G=Resnet,D=Resnet,µ = µGP ) to (Sobolev,G=Resnet,D=Resnet,µ) where µ is one of: (1)

µGP , (2) the noise µas (0) with 0 the

smoothed µs() initial noise level.

= Pr N We use

(0, 2 Id )+Q 2

or

(3) noise smoothed

with

annealing

the same architectures of Resnet with 1D convolu-

tion for the critic and the generator as in (Gulrajani et al., 2017) (4 resnet blocks with hidden layer

size of 512). In order to implement the noise smoothing we transform the data into one-hot vec-

tors. Each one hot vector x is transformed to a probability vector p with 0.9 replacing the one and

0.1/(dictsize - 1) replacing the zero. We then sample from a Gaussian distribution N (0, 2), and

use softmax to normalize log p + . We use algorithm 1 for Sobolev GAN and fix the learning rate

to 10-4 and  to 10-5. The noise level  was annealed following a linear schedule starting from an

initial

noise

level

0

(at

iteration

i,

i

=

0(1

-

M

i axiter

),

Maxiter=30K).

For

WGAN-GP

we

used

the open source implementation with the penalty  = 10 as in (Gulrajani et al., 2017). Results are

given in Figure 2(a) for the JS-4 evaluation of both WGAN-GP and Sobolev GAN for µ = µGP .

10

Under review as a conference paper at ICLR 2018

In Figure 2(b) we show the JS-4 evaluation of Sobolev GAN with the annealed noise smoothing µsa(0), for various values of the initial noise level 0. We see that the training succeeds in both cases. Sobolev GAN achieves slightly better results than WGAN-GP for the annealing that starts

with high noise level 0 = Sobolev GAN is behind.

A1.n5n.eWaleednosmteothoatht iwngithoofuPt rsm, hoeoltphsintgheantrdaianninnegalaisngthie.eruesailndgiµstr=ibuPtrio+2nQis,

slowly going from a continuous distribution to a discrete distribution. See Appendix C (Figure 5)

for a comparison between annealed and non annealed smoothing.

We give in Appendix C a comparison of WGAN-GP and Sobolev GAN for a Resnet generator architecture and an RNN critic. The RNN has degraded performance due to optimization difficulties.

Fisher GAN Curriculum Conditioning versus Sobolev GAN: Explicit versus Implicit condi-
tioning. We analyze how Fisher GAN behaves under different architectures of generators and critics.
We first fix the generator to be ResNet. We study 3 different architectures of critics: ResNet, GRU
(we follow the experimental setup from (Press et al., 2017)), and hybrid ResNet+GRU (Reed et al., 2016). We notice that RNN is unstable, we need to clip the gradient values of critics in [-0.5, 0.5], and the gradient of the Lagrange multiplier F to [-104, 104]. We fix F = 10-7 and we use µ = µGP . We search the value for the learning rate in [10-5, 10-4]. We see that for µ = µGP and G = Resnet for various critic architectures, Fisher GAN fails at the task of text generation (Figure 3 a-c). Nevertheless, when using RNN critics (Fig 3 b, c) a marginal improvement happens over the
fully collapsed state when using a resnet critic (Fig 3 a). We hypothesize that RNN critics enable
some conditioning and factoring of the distribution, which is lacking in Fisher IPM.

JS-4

1.0

0.9

0.8

0.7

0.6 0.5 0.40

a: b: c: d:

(F, (F, (F, (F,

DDDD====rrrreennssnn+,,,GrGGn===nrrr,eneGssn,=,+µµrGceGPuPs)r),rµ,G(P

)
r

+

)/2)

5000

10000 g

it1e5r0a0t0ions20000

25000

30000

Figure 3: Fisher GAN with different architectures for critics: (a-c) We see that for µ = µGP and G = Resnet for various critic architectures, Fisher GAN fails at the task of text generation. We notice small improvements for RNN critics (b-c) due to the conditioning and factoring of the distribution. (d) Fisher GAN with recurrent generator and critic, trained on a curriculum conditioning for increasing lengths , increments indicated by gridlines. In this curriculum conditioning setup, with recurrent critics and generators, the training of Fisher GAN succeeds and reaches similar levels of Sobolev GAN (and WGAN-GP). It is important to note that by doing this explicit curriculum conditioning for Fisher GAN, we highlight the implicit conditioning induced by Sobolev GAN, via the gradient regularizer.

Finally Figure 3 (d) shows the result of training with recurrent generator and critic. We follow (Press

et al., 2017) in terms of GRU architecture, but differ by using Fisher GAN rather than WGAN-GP.

We

use

µ

=

Pr +Q 2

i.e.

without annealed

noise

smoothing.

We

train

(F,

D=RNN,G=RNN,

Pr

+Q 2

)

using curriculum conditioning of the generator for all lengths as done in (Press et al., 2017): the

generator is conditioned on 32 - characters and predicts the remaining characters. We increment

= 1 to 32 on a regular schedule (every 15k updates). JS-4 is only computed when > 4. We see

in Figure 3 that under curriculum conditioning with recurrent critics and generators, the training of

Fisher GAN succeeds and reaches similar levels of Sobolev GAN (and WGAN-GP). Note that the

need of this explicit brute force conditioning for Fisher GAN, highlights the implicit conditioning

induced by Sobolev GAN via the gradient regularizer, without the need for curriculum conditioning.

11

Under review as a conference paper at ICLR 2018

6.2 SEMI-SUPERVISED LEARNING WITH SOBOLEV GAN

A proper and promising framework for evaluating GANs consists in using it as a regularizer in the semi-supervised learning setting (Salimans et al., 2016; Dumoulin et al., 2017; Kumar et al., 2017). As mentioned before, the Sobolev norm as a regularizer for the Sobolev IPM draws connections with the Laplacian regularization in manifold learning (Belkin et al., 2006). In the Laplacian framework of semi-supervised learning, the classifier satisfies a smoothness constraint imposed by controlling its Sobolev norm: X xf (x) 2 µ2(x)dx (Alaoui et al., 2016). In this Section, we present a variant of Sobolev GAN that achieves competitive performance in semi-supervised learning on the CIFAR10 dataset Krizhevsky & Hinton (2009) without using any internal activation normalization in the critic, such as batch normalization (BN) (Ioffe & Szegedy, 2015), layer normalization (LN) (Ba et al., 2016), or weight normalization (Salimans & Kingma, 2016).
In this setting, a convolutional neural network  : X  Rm is shared between the cross entropy (CE) training of a K-class classifier (S  RK×m) and the critic of GAN (See Figure 4). We have the following training equations for the (critic + classifer) and the generator:

Critic + Classifier:

max
S, ,f

LD

=

LaGlmAN(f, g)

-

CE

CE(p(y|x), y)
(x,y)lab

(10)

Generator:

max


LG

= E^(f, g)

(11)

where

the

main

IPM

objective

with

N

samples:

E^(f, g)

=

1 N

xunl f (x) - zpz f (g(z)) .

Following (Mroueh & Sercu, 2017) we use the following "K + 1 parametrization" for the critic (See

Figure 4) :

K

f (x) = p(y|x) Sy, (x) - v, (x)

y=1

f-:"fake" critic

f+: "real" critic

Note that p(y|x) = Softmax( S, (x) )y appears both in the critic formulation and in the CrossEntropy term in Equation (10). Intuitively this critic uses the K class directions of the classifier Sy to define the "real" direction, which competes with another K+1th direction v that indicates fake
samples. This parametrization adapts the idea of (Salimans et al., 2016), which was formulated

specifically for the classic KL / JSD based GANs, to IPM-based GANs. We saw consistently better
results with the K + 1 formulation over the regular formulation where the classification layer S doesn't interact with the critic direction v. We also note that when applying a gradient penalty based constraint (either WGAN-GP or Sobolev) on the full critic f = f+ - f-, it is impossible for the network to fit even the small labeled training set (underfitting), causing bad SSL performance. This

leads us to the formulation below, where we apply the Sobolev constraint only on f-. Throughout

this

Section

we

fix

µ

=

Pr +Q 2

.

We propose the following two schemes for constraining the K+1 critic f (x) = f+(x) - f-(x):

p(y|x) =
Softmax(hS, !(x)i)y

K

"real" critic

f+(x)

=

PK
y=1

p(y|x)

hSy ,

! (x)i

x! CNN

"fake" critic
f (x) = hv, !(x)i

f (x) = f+(x) f (x) GAN critic

hv, !(x)i

Figure 4: "K+1" parametrization of the critic for semi-supervised learning.

12

Under review as a conference paper at ICLR 2018

1) Fisher constraint on the critic: We restrict the critic to the following set:

f

f = f+ - f-,

^ F (f, g)

=

1 2N

f 2(x) +

f 2(g(z))

xunl

zpz

=1 .

This constraint translates to the following ALM objective in Equation (10):

LGalAmN(f,

g )

=

E^(f,

g )

+

F

(1

-

^ F

(f,

g ))

-

F 2

(^ F (f, g)

-

1)2,

where the Fisher constraint ensures the stability of the training through an implicit whitened mean matching (Mroueh & Sercu, 2017).

2) Fisher+Sobolev constraint: We impose 2 constraints on the critic: Fisher on f & Sobolev on f-

f  f = f+ - f-, ^ F (f , g) = 1 and ^ S(f-, g) = 1 ,

where

^ S(f-, g)

=

1 2N

xunl xf-(x) 2 + zpz xf-(g(z)) 2 .

This constraint translates to the following ALM in Equation (10):

LGalAmN(f, g) = E^(f, g) + F (1 - ^ F (f , g)) + S(1 - ^ S(f-, g))

-

F 2

(^ F (f ,

g )

-

1)2

-

S 2

(^ S(f-, g)

-

1)2.

Note that the fisher constraint on f ensures the stability of the training, and the Sobolev constraints on the "fake" critic f- enforces smoothness of the "fake" critic and thus the shared CNN (x). This is related to the classic Laplacian regularization in semi-supervised learning (Belkin et al.,
2006).

Table 2 shows results of SSL on CIFAR-10 comparing the two proposed formulations. Similar to the standard procedure in other GAN papers, we do hyperparameter and model selection on the validation set. We present baselines with a similar model architecture and leave out results with significantly larger convnets. We indicate baselines with * which use either additional models like PixelCNN, or do data augmentation (translations and flips), or use a much larger model, either of which gives an advantage over our plain simple training method. G and D architectures and hyperparameters are in Appendix D.  is similar to (Salimans et al., 2016; Dumoulin et al., 2017; Mroueh & Sercu, 2017) in architecture, but note that we do not use any batch, layer, or weight normalization yet obtain strong competitive accuracies. We hypothesize that we don't need any normalization in the critic, because of the implicit whitening of the feature maps introduced by the Fisher and Sobolev constraints as explained in (Mroueh & Sercu, 2017).

Table 2: CIFAR-10 error rates for varying number of labeled samples in the training set. Mean and standard deviation computed over 5 runs. We only use the K + 1 formulation of the critic. Note that we achieve strong SSL performance without any additional tricks, and even though the critic does
not have any batch, layer or weight normalization.

Number of labeled examples Model

1000

2000

4000

Misclassification rate

8000

CatGAN (Springenberg, 2015) FM (Salimans et al., 2016) ALI (Dumoulin et al., 2017) Tangents Reg (Kumar et al., 2017) -model (Laine & Aila, 2016) * VAT (Miyato et al., 2017) Bad Gan (Dai et al., 2017) * VAT+EntMin+Large (Miyato et al., 2017) * Sajjadi (Sajjadi et al., 2016) *

21.83 ± 2.01 19.98 ± 0.3 20.06 ± 0.5

19.61 ± 2.09 19.09 ± 0.15

19.58 18.63 ± 2.32 17.99 ± 0.54 16.78 ± 0.6 16.55 ± 0.29 14.87 14.41 ± 0.30 13.15 11.29

17.72 ± 1.82 17.05 ± 0.50

Fisher, layer norm (Mroueh & Sercu, 2017) Fisher, no norm (Mroueh & Sercu, 2017)
Fisher+Sobolev, no norm (This Work)

19.74 ± 0.21 21.49 ± 0.18
20.14 ± 0.21

17.87 ± 0.38 19.20 ± 0.46
17.38 ± 0.10

16.13 ± 0.53 17.30 ± 0.30
15.77 ± 0.19

14.81 ± 0.16 15.57 ± 0.33
14.20 ± 0.08

13

Under review as a conference paper at ICLR 2018
7 CONCLUSION
We introduced the Sobolev IPM and showed that it amounts to a comparison between weighted (coordinate-wise) CDFs. We presented an ALM algorithm for training Sobolev GAN. The intrinsic conditioning implied by the Sobolev IPM explains the success of gradient regularization in Sobolev GAN and WGAN-GP on discrete sequence data, and particularly in text generation. We highlighted the important tradeoffs between the implicit conditioning introduced by the gradient regularizer in Sobolev IPM, and the explicit conditioning of Fisher IPM via recurrent critics and generators in conjunction with the curriculum conditioning. Both approaches succeed in text generation. We showed that Sobolev GAN achieves competitive semi-supervised learning results without the need of any normalization, thanks to the smoothness induced by the gradient regularizer. We think the Sobolev IPM point of view will open the door for designing new regularizers that induce different types of conditioning for general structured/discrete/graph data beyond sequences.
REFERENCES
Ahmed El Alaoui, Xiang Cheng, Aaditya Ramdas, Martin J. Wainwright, and Michael I. Jordan. Asymptotic behavior of p-based laplacian regularization in semi-supervised learning. CoRR, abs/1603.00564, 2016.
Martin Arjovsky and Le´on Bottou. Towards principled methods for training generative adversarial networks. In ICLR, 2017.
Martin Arjovsky, Soumith Chintala, and Le´on Bottou. Wasserstein gan. ICML, 2017.
Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv:1607.06450, 2016.
Mikhail Belkin, Partha Niyogi, and Vikas Sindhwani. Manifold regularization: A geometric framework for learning from labeled and unlabeled examples. JMLR, 2006.
Marc G. Bellemare, Ivo Danihelka, Will Dabney, Shakir Mohamed, Balaji Lakshminarayanan, Stephan Hoyer, and Re´mi Munos. The cramer distance as a solution to biased wasserstein gradients. CoRR, abs/1705.10743, 2017a.
Marc G Bellemare, Ivo Danihelka, Will Dabney, Shakir Mohamed, Balaji Lakshminarayanan, Stephan Hoyer, and Re´mi Munos. The cramer distance as a solution to biased wasserstein gradients. arXiv:1705.10743, 2017b.
Tong Che, Yanran Li, Ruixiang Zhang, Devon R Hjelm, Wenjie Li, Yangqiu Song, and Yoshua Bengio. Maximum-likelihood augmented discrete generative adversarial networks. arXiv:1702.07983, 2017.
Zihang Dai, Zhilin Yang, Fan Yang, William W Cohen, and Ruslan Salakhutdinov. Good semisupervised learning that requires a bad gan. arXiv:1705.09783, 2017.
Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Alex Lamb, Martin Arjovsky, Olivier Mastropietro, and Aaron Courville. Adversarially learned inference. ICLR, 2017.
Gintare Karolina Dziugaite, Daniel M. Roy, and Zoubin Ghahramani. Training generative neural networks via maximum mean discrepancy optimization. In UAI, 2015.
I. Ekeland and T. Turnbull. Infinite-dimensional Optimization and Convexity. The University of Chicago Press, 1983.
Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial nets. In NIPS, 2014.
Arthur Gretton, Karsten M Borgwardt, Malte J Rasch, Bernhard Scho¨lkopf, and Alexander Smola. A kernel two-sample test. JMLR, 2012.
Ishaan Gulrajani, Faruk Ahmed, Martin Arjovsky, Vincent Dumoulin, and Aaron Courville. Improved training of wasserstein gans. arXiv:1704.00028, 2017.
14

Under review as a conference paper at ICLR 2018

R. Devon Hjelm, Athul Paul Jacob, Tong Che, Kyunghyun Cho, and Yoshua Bengio. Boundaryseeking generative adversarial networks. arXiv:1702.08431, 2017.

Sergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by reducing internal covariate shift. Proc. ICML, 2015.

Casper Kaae Sønderby, Jose Caballero, Lucas Theis, Wenzhe Shi, and Ferenc Husza´r. Amortised map inference for image super-resolution. ICLR, 2017.

A. Krizhevsky and G. Hinton. Learning multiple layers of features from tiny images. Master's thesis, 2009.

Abhishek Kumar, Prasanna Sattigeri, and P Thomas Fletcher. Improved semi-supervised learning with gans using manifold invariances. NIPS, 2017.

Matt J. Kusner and Jose´ Miguel Herna´ndez-Lobato. Gans for sequences of discrete elements with the gumbel-softmax distribution. arXiv:1611.04051, 2016.

Samuli Laine and Timo Aila. arXiv:1610.02242, 2016.

Temporal ensembling for semi-supervised learning.

Chun-Liang Li, Wei-Cheng Chang, Yu Cheng, Yiming Yang, and Barnaba´s Po´czos. MMD GAN: towards deeper understanding of moment matching network. NIPS, abs/1705.08584, 2017.

Yujia Li, Kevin Swersky, and Richard Zemel. Generative moment matching networks. In ICML, 2015.

Qiang Liu. Stein variational descent as a gradient flow. NIPS, 2017.

Qiang Liu and Dilin Wang. Stein variational gradient descent: A general purpose bayesian inference algorithm. In Advances in Neural Information Processing Systems 29. 2016.

Qiang Liu, Jason D. Lee, and Michael I. Jordan. A kernelized stein discrepancy for goodness-of-fit tests. In Proceedings of the 33nd International Conference on Machine Learning, ICML 2016, New York City, NY, USA, June 19-24, 2016, 2016.

Xudong Mao, Qing Li, Haoran Xie, Raymond YK Lau, and Zhen Wang. Least squares generative adversarial networks. arXiv:1611.04076 ICCV, 2017.

Takeru Miyato, Shin-ichi Maeda, Masanori Koyama, and Shin Ishii. Virtual adversarial training: a regularization method for supervised and semi-supervised learning. arXiv:1704.03976, 2017.

Hossein Mobahi and John W. Fisher III. A Theoretical Analysis of Optimization by Gaussian Continuation. In Proc. of 29th Conf. Artificial Intelligence (AAAI'15), 2015.

Youssef Mroueh and Tom Sercu. Fisher gan. arXiv:1705.09675 NIPS, 2017.

Youssef Mroueh, Tom Sercu, and Vaibhava Goel. Mcgan: Mean and covariance feature matching gan. arXiv:1702.08398 ICML, 2017.

Alfred Mu¨ller. Integral probability metrics and their generating classes of functions. Advances in Applied Probability, 1997.

Sebastian Nowozin, Botond Cseke, and Ryota Tomioka. f-gan: Training generative neural samplers using variational divergence minimization. In NIPS, 2016.

Ofir Press, Amir Bar, Ben Bogin, Jonathan Berant, and Lior Wolf. Language generation with recurrent generative adversarial networks without pre-training. arXiv:1706.01399, 2017.

Alec Radford, Luke Metz, and Soumith Chintala. Unsupervised representation learning with deep convolutional generative adversarial networks. arXiv:1511.06434, 2015.

Sai Rajeswar, Sandeep Subramanian, Francis Dutil, Christopher Pal, and Aaron Courville. Adversarial generation of natural language. arXiv:1705.10929, 2017.

15

Under review as a conference paper at ICLR 2018
Scott E Reed, Zeynep Akata, Santosh Mohan, Samuel Tenka, Bernt Schiele, and Honglak Lee. Learning what and where to draw. In Advances In Neural Information Processing Systems, pp. 217­225, 2016.
Mehdi Sajjadi, Mehran Javanmardi, and Tolga Tasdizen. Regularization with stochastic transformations and perturbations for deep semi-supervised learning. In Advances in Neural Information Processing Systems, pp. 1163­1171, 2016.
Tim Salimans and Diederik P Kingma. Weight normalization: A simple reparameterization to accelerate training of deep neural networks. In Advances in Neural Information Processing Systems, pp. 901­901, 2016.
Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung, Alec Radford, and Xi Chen. Improved techniques for training gans. NIPS, 2016.
Jost Tobias Springenberg. Unsupervised and semi-supervised learning with categorical generative adversarial networks. arXiv:1511.06390, 2015.
Bharath K. Sriperumbudur, Kenji Fukumizu, Arthur Gretton, Bernhard Scholkopf, and Gert R. G. Lanckriet. On integral probability metrics, -divergences and binary classification. 2009.
Bharath K. Sriperumbudur, Kenji Fukumizu, Arthur Gretton, Bernhard Scho¨lkopf, and Gert R. G. Lanckriet. On the empirical estimation of integral probability metrics. Electronic Journal of Statistics, 2012.
Dilin Wang and Qiang Liu. Learning to draw samples: With application to amortized MLE for generative adversarial learning. CoRR, abs/1611.01722, 2016.
Lantao Yu, Weinan Zhang, Jun Wang, and Yong Yu. Seqgan: Sequence generative adversarial nets with policy gradient. CoRR, abs/1609.05473, 2016.
Junbo Jake Zhao, Yoon Kim, Kelly Zhang, Alexander M. Rush, and Yann LeCun. Adversarially regularized autoencoders for generating discrete structures. CoRR, 2017.
16

Under review as a conference paper at ICLR 2018

A THEORY: APPROXIMATION AND TRANSPORT INTERPRETATION

In this Section we present the theoretical properties of Sobolev IPM and how it relates to distributions transport theory and other known metrics between distributions, notably the Stein distance.

A.1 APPROXIMATING SOBOLEV IPM IN A HYPOTHESIS CLASS

Learning in the whole Sobolev space W01,2 is intractable hence we need to restrict our function class to a hypothesis class H , such as neural networks. We assume in the following that functions in

H vanish on the boundary of X , and restrict the optimization to the function space H . H can

be a Reproducing Kernel Hilbert Space as in the MMD case or parametrized by a neural network.

Define:

SH ,µ(P, Q) =

sup

ExPf (x) - ExQf (x)

f H , f W01,2 1

(12)

The following Lemma shows that the relative approximation of the Sobolev IPM in a function

space H (whose functions vanish at the boundary) is proportional to the approximation of the optimal Sobolev Critic f  in H . This approximation error is measured in the sense of the Sobolev norm.

Lemma 1 (Sobolev IPM Approximation in a Hypothesis Class). Let H be a function space with

function vanishing at the boundary. For any f  H and for f  the optimal critic in W01,2, we have:

SH ,µ(P, Q) = Sµ(P, Q)
f H ,

sup
f W01,2(X ,µ)1

f, f

.W01,2(X ,µ)

Note that this Lemma means that the Sobolev IPM is well approximated if the space H has an enough representation power to express xf (x). This is parallel to the Fisher IPM approximation

(Mroueh & Sercu, 2017) where it is shown that the Fisher IPM approximation error is proportional

to the critic approximation in the Lebesgue sense:

FH ,µ(P, Q) = Fµ(P, Q)
f H ,

sup
f L2(X ,µ)1

f, f

L2(X ,µ) .

A.2 DISTRIBUTION TRANSPORT PERSPECTIVE ON SOBOLEV IPM

In this Section, we characterize the optimal critic of the Sobolev IPM as a solution of a non linear

PDE. The solution of the variational problem of the Sobolev IPM satisfies a non linear PDE that can

be derived using standard tools from calculus of variations (Ekeland & Turnbull, 1983; Alaoui et al.,

2016).

Theorem 3 (PDE satisfied by the Sobolev Critic). The optimal critic of Sobolev IPM f  satisfies

the following PDE:

f (x) +

x log µ(x), xf (x)

+

P(x) - Q(x) Sµ(P, Q)µ(x)

=

0.

(13)

Define

the

Stein

Operator:

T (µ)g(x)

=

1 2

x log(µ(x)), g(x) + div(g(x)) . Hence we have the

following Transport Equation of P to Q:

Q(x) = P(x) + 2Sµ(P, Q)µ(x)T (µ)xf (x).

Recall the definition of Stein Discrepancy :

S(Q, µ) = sup |ExQ [T (µ)g(x)]| , g : X  Rd.
g

Theorem 4 (Sobolev and Stein Discrepanices). The following inequality holds true:

ExQ

Q(x) - P(x) µ(x)

2

S(Q, µ)

Sµ(P, Q)

(14)

Stein Good fitness of the model Q w.r.t to µ Sobolev Distance

Consider for example µ = P, and sequence Qn. If the Sobolev distance goes SP(P, Qn)  0, the

ratio rn(x)

=

Qn (x) P(x)

converges in expectation (w.r.t to Q) to 1.

The speed of the convergence is

given by the Stein Discrepancy S(Qn, P).

17

Under review as a conference paper at ICLR 2018

Relation to Fokker-Planck Diffusion Equation and Particles dynamics. Note that PDE satisifed by the Sobolev critic given in Equation (13) can be equivalently written:

P-Q Sµ(P, Q)

=

-div(µ(x)xf (x)),

(15)

written in this form, we draw a connection with the Fokker-Planck Equation for the evolution of a density function qt that is the density of particles Xt  Rd evolving with a drift (a velocity field) V (x, t) : X × [0, [ Rd:

dXt = V (Xt, t)dt, where the density of X0 is given by q0(x) = Q(x),

The Fokker-Planck Equation states that the evolution of the particles density qt satisfies:

dqt dt

(x)

=

-div(qt(x)V

(x,

t))

(16)

Comparing Equation (15) and Equation (16), we identify then the gradient of Sobolev critic as a drift. This suggests that one can define "Sobolev descent" as the evolution of particles along the gradient flow:

dXt = xft(Xt)dt, where the density of X0 is given by q0(x) = Q(x),

wpahretircelefstisisPt.heTSheobaonlaelvyscirsitoicf

between qt and P. "Sobolev descent"

One can show and its relation

that the limit distribution to Stein Descent (Liu &

of the Wang,

2016; Liu, 2017) is beyond the scope of this paper and will be studied in a separate work. Hence

we see that the gradient of the Sobolev critic defines a transportation plan to move particles whose distribution is Q to particles whose distribution is P (See Figure 1). This highlights the role of the gradient of the critic in the context of GAN training in term of transporting the distribution of the

generator to the real distribution.

B PROOFS

Proof of Theorem 2. Let FP and FQ, be the cumulative distribution functions of P and Q respectively. We have:

P(x)

=

x1

d ...



xd

FP

(x),

(17)

We

note

D

=

d  x1 ...

xd

,

and

D-i

=

,d-1
 x1 ... xi-1  xi+1 ... xd

for

i

=

1 . . . d.

D-i computes the d - 1 partial derivative excluding the variable i.
In the following we assume that FP, and FQ and its d derivatives exist and are continuous meaning that FP and FQ  Cd(X ). The objective function in Equation (3) can be written as follows:

ExPf (x) - ExQf (x) = f (x)D FP(x) - FQ(x) dx
X

=

X

f

(x)

 xi

D-i(FP(x)

-

FQ(x))dx

(for any i, since FP and FQ  Cd(X ))

=-

X

f xi

D-i

(FP

(x)

-

FQ

(x))dx

(f vanishes at the boundary in W01,2(X , µ) )

Let D- = (D-1, . . . , D-d) it follows that:

ExPf (x) - ExQf (x)

=

1d d
i=1

X

f xi

D-i(FQ

(x)

-

FP(x))dx

=

1 d

X

xf (x), D-(FQ(x) - FP(x)) Rd dx

(18)

18

Under review as a conference paper at ICLR 2018

Let us define L2(X , µ)d the space of measurable functions from X  Rd. For g, h  L2(X , µ)d the dot product is defined as follows:

and the norm is given :

g, h L2(X ,µ)d = X g(x), h(x) Rd µ(x)dx

g L2(X ,µ)d =

X

g

2 Rd

µ(x)dx.

We can write the objective in Equation (18) in term of the dot product in L2(X , µ)d :

ExPf (x)

-

ExQf (x)

=

1 d

xf

,

D-(FQ µ

-

FP)

.
L2(X ,µ)d

(19)

On the other hand the constraint in Equation (3) can be written in terms of the norm in L2(X , µ)d:

f =W01,2(X ,µ) xf L2(X ,µ)d

(20)

Replacing the objective and constraint given in Equations (19) and (20) in Equation (3), we obtain:

S(P, Q) =

1 d f,

x f

sup
L2(X ,µ)d 1

xf

,

D-(FQ µ

-

FP)

L2(X ,µ)d

= 1 sup d gL2(X ,µ)d, g L2(X ,µ)d 1

g,

D-(FQ µ

-

FP)

L2(X ,µ)d

=

1 d



D-(FQ - FP) µ L2(X ,µ)d



By definition of

.

L2(X ,µ)d , g =

D-FQ(x) - D-FP(x) µ(x)

1
D- (FQ -FP )



µ L2(X ,µ)d

=

1 d

X

D-FQ(x) - D-FP(x) µ(x)

2
dx.

Hence we find also that the optimal critic f  satisfies:

xf (x)

=

D-FQ(x) - D-FP(x) µ(x)

1
D- (FQ -FP )

.

µ L2(X ,µ)d

Proof of Lemma 1.

ExPf (x) - ExQf (x)

=

1 d

X

xf (x), D-(FQ(x) - FP(x)) Rd dx

=

Sµ(P, Q)
X

xf

(x),

D-(FQ(x) - FP(x)) µ(x)dSµ(P, Q)

µ(x)dx
Rd

= Sµ(P, Q) xf (x), xf (x) µ(x)dx
X
= Sµ(P, Q) f, f  W01,2

Hence we have:

sup ExPf (x) - ExQf (x) = Sµ(P, Q) sup

f H , f W01,2 1

f H , f W01,2 1

f, f

,W01,2

It follows therefore that:

SH (P, Q) = Sµ(P, Q)

sup

f H , f W01,2 1

f, f

W01,2

19

Under review as a conference paper at ICLR 2018

We conclude that the Sobolev IPM can be approximated in arbitrary space as long as it has enough capacity to approximate the optimal critic. Interestingly the approximation error is measured now with the Sobolev semi-norm, while in Fisher it was measured with the Lebesgue norm. Approximations with Sobolev Semi-norms are stronger then Lebesgue norms as given by the Poincare inequality (||f ||L2  C f W01,2 ), meaning if the error goes to zero in Sobolev sense it also goes to zero in the Lebesgue sense , but the converse is not true.
Proof of Theorem 3. The proof follows similar arguments in the proofs of the analysis of Laplacian regularization in semi-supervised learning studied by (Alaoui et al., 2016).

Sµ(P, Q) s.t.

= supfW01,2 ExP [f (x)] - ExQ [f (x)]

Exµ

f (x)

2 2

 1,

(21)

Note that this problem is convex in f (Ekeland & Turnbull, 1983). Writing the lagrangian for equation (21) we get :

L(f,

)

=

ExP

[f (x)]

-

ExQ

[f (x)]

+

 2

1 - Exµ

xf (x)

2 2

=

f (x)
X

P(x) - Q(x)

dx

+

 2

1-

X

xf (x) 22µ(x)dx

=

X

f (x)

µ1(x)

dx

+

 2

1-

X

xf (x)

2 2

µ(x) dx

We denote P(x) - Q(x) as µ1(x).To get the optimal f , we need to apply KKT conditions on the above equation.

L(f, ) =

X

f (x)

µ1(x)

dx

+

 2

1-

X

xf (x)

2 2

µ(x) dx

From the calculus of variations:

L(f + h, ) = =

(f +
X

h)(x)

µ1(x)

dx

+

 2

1-

X

(f (x) +
X

h(x))

µ1(x)

dx

+

 2

1-

x

f+

h

(x)

2 2

µ(x) dx

x f + h (x), x f + h (x)
X

µ(x) dx

= (f (x) + h(x)) µ1(x) dx

X

+

 2

1-

X

xf (x)

2 2

+

2

xf (x), xh(x)

+ O( 2)

µ(x)dx

= L(f, ) + h(x) µ1(x) dx -  xf (x), xh(x) µ(x) dx + O( 2)
XX

= L(f, ) +

h(x) µ1(x) dx -  xf (x), xh(x) µ(x) dx + O( 2)

XX

Now we apply integration by part and set h to be zero at boundary as in (Alaoui et al., 2016). We get :

xf (x), xh(x) µ(x) dx = xf (x) µ(x), xh(x) dx
XX

=

h(x), xf (x) µ(x)

-
X

div µ(x)xf (x)
X

h(x) dx

= - div µ(x)xf (x) h(x) dx
X

20

Under review as a conference paper at ICLR 2018

Hence,

L(f + h, ) = L(f, ) + = L(f, ) +

µ1(x) h(x) dx +  div µ(x)xf (x) h(x) dx + O( 2)
XX
µ1(x) +  div µ(x)xf (x) h(x) dx + O( 2)
X

The functional derivative of L(f, ), at any test function h vanishing on the boundary:

X

L(f, f

)

(x)h(x)dx

=

lim L(f + h, ) - L(f, )
0

= µ1(x) +  div µ(x)xf (x)
X

Hence we have:

L(f, f

)

(x)

=

µ1(x)

+



div

µ(x)xf (x)

For the optimal f ,  first order optimality condition gives us:

µ1(x) +  div µ(x)xf (x) = 0

and

h(x) dx

xf (x) 2 µ(x)dx = 1
X
Note that (See for example (Alaoui et al., 2016)) : div µ(x)xf (x) = µ(x)2f (x) + xµ(x), xf (x) ,
since div(xf (x)) = 2f (x). Hence from equation (22) µ1(x) +  div µ(x)xf (x) = 0
 µ1(x) +  µ(x)2f (x) + xµ(x), xf (x) = 0
 µ1(x) +  µ(x)2f (x) +  xµ(x), xf (x) = 0

 2f (x) +

xµ(x) µ(x)

,

xf

(x)

+

µ1(x) µ(x)

=

0

 2f (x) +

x log µ(x), xf (x)

+

P(x) - Q(x) µ(x)

=

0

(22) (23)
(24)

Hence f ,  satisfies :

2f (x) +

x log µ(x), xf (x)

+

P(x) - Q(x) µ(x)

=

0

(25)

and

xf (x) 2 µ(x)dx = 1.

(26)

X

Let us verify that the optimal critic as found in the geometric definition (Theorem 2) of Sobolev IPM

that satisfies:

if (x)

=

f (X) xi

=

D-iFQ(x) - D-iFP(x) d µ(x)

 i  [d],

(27)

satisfies indeed the PDE.

From

equation

(27),

we

want

to

compute

2f (x)  x2i

for

all

i:

2f (x) x2i

=

1 d

µ(x)

 xi

(D-iFQ(x)

-

D-iFP(x))

-

D-iFQ(x) - D-iFP(x) iµ(X)

µ2(x)

=

1 d

µ(x) Q(x) - P(x)

-

D-iFQ(x) - D-iFP(x) iµ(X) µ2(x)

=

Q(x) - P(x) d µ(x)

-

iµ(x) µ(x)

if

(x)

21

Under review as a conference paper at ICLR 2018

Hence,

2f (x) x2i

+

iµ(x) µ(x)

if

(x)

+

P(x) - Q(x) d µ(x)

=0

(28)

Adding equation (28) for all i  [d], we get :

d i=1

2f (x) x2i

+

iµ(x) µ(x)

if

(x)

+

P(x) - Q(x) d µ(x)

=0

As a result, the solution f  of the partial differential equation given in equation (25) satisfies the

following :

f (x) xi

=

D-iFQ(x) - D-iFP(x) d µ(x)

 i  [d]

Using the constraint in (26) we can get the value of  :

f (x) 2 µ(x) dx = 1



d i=1

f (x) xi

2
µ(x) dx = 1



=

1 d

d i=1

D-iFQ(x) - D-iFP(x) µ(x)

2

dx

=

Sµ(P, Q).

Proof of Corollary 4. Define the Stein operator (Liu et al., 2016; Liu, 2017):

T (µ)[xf (x)]

=

1 2

xf (x), x log µ(x)

+

1 2

x, xf (x)

=

1 2

xf (x), x log µ(x)

+

1 2

2

f

(x).

Recall that Barbour generator theory provides us a way of constructing such operators that produce mean zero function under µ. It is easy to verify that:

ExµT (µ)xf (x) = 0.

Recall that this operator arises from the overdamped Langevin diffusion, defined by the stochastic

differential equation:

dxt

=

1 2

x

log µ(xt)

+

dWt

where (Wt)t0 is a Wiener process. This is related to plug and play networks for generating samples if the distribution is known, using the stochastic differential equation.

From Theorem 3, it is easy to see that the PDE the Sobolev Critic (f ,  = Sµ(P, Q)) can be written in term of Stein Operator as follows:

T (µ)[xf ](x)

=

1 2

Q(x) - P(x) µ(x)

Taking absolute values and the expectation with respect to Q:

|ExQ [T (µ)xf (x)]| =

1 2Sµ(P, Q)

ExQ

Q(x) - P(x) µ(x)

22

Under review as a conference paper at ICLR 2018

Recall that the definition of Stein Discrepancy : S(Q, µ) = sup |ExQ [T (µ)g(x)]|
g
It follows that Sobolev IPM critic satisfies: |ExQ [T (µ)xf (x)]|  S(Q, µ),
Hence we have the following inequality:

This is equivalent to:

1 2Sµ(P, Q)

ExQ

Q(x) - P(x) µ(x)

 S(Q, µ)

ExQ

Q(x) - P(x) µ(x)

 2 S(Q, µ)

Sµ(P, Q)

Stein Good fitness of the model Q w.r.t to µ Sobolev Distance

Similarly we obtain:

ExP

Q(x) - P(x) µ(x)

 2 S(P, µ)

Sµ(P, Q)

Stein Good fitness of µ w.r.t to P Sobolev Distance

For instance consider µ = P, we have therefore:

1 2

ExQ

Q(x) P(x)

- 1  S(Q, P)SP(P, Q).

Note that the left hand side of the inequality is not the total variation distance.

Hence for a sequence Qn

if the Sobolev distance goes SP(P, Qn)



0, the ratio rn(x)

=

Qn (x) P(x)

converges in expectation (w.r.t to Q) to 1. The speed of the convergence is given by the Stein

Discrepancy S(Qn, P).

One important observation here is that convergence of PDF ratio is weaker than the conditional CDF as given by the Sobolev distance and of the good fitness of score function as given by Stein discrepancy.

C TEXT EXPERIMENTS: ADDITIONAL PLOTS
Comparison of annealed versus non annealed smoothing of Pr in Sobolev GAN.

JS-4

0.65 0.60 0.55 0.50 0.45 0.40 0.35
0

(S, (S, (S, (S, (S, (S,

D=res, D=res, D=res, D=res, D=res, D=res,

G=res, G=res, G=res, G=res, G=res, G=res,

µµµµµµssssssaaa((((((000======101...101105... )))105)))))))))

5000 10000 15000 20000 25000 30000 g iterations

Figure 5: Comparison of annealed versus non annealed smoothing of Pr in Sobolev GAN. We see that annealed smoothing outperforms the non annealed smoothing experiments.

Sobolev GAN versus WGAN-GP with RNN. We fix the generator architecture to Resnets. The experiments of using RNN (GRU) as the critic architecture for WGAN-GP and Sobolev is shown

23

Under review as a conference paper at ICLR 2018

in Figure 6 where we used µ = µGP for both cases. We only apply gradient clipping to stabilize the performance without other tricks. We can observe that using RNN degrades the performance.
We think that this is due to an optimization issue and a difficulty in training RNN under the GAN
objective without any pre-training or conditioning.

JS-4 JS-4

1.0

0.9

0.8

0.7

0.6

0.5 0.4

(GP, (GP, (GP,

D=res, D=rnn, D=rnn,

GGG===rrreenssn,,,µµµGGGPPP)))

0.30

5000

10000 g

it1e5r0a0t0ions20000

25000

30000

(a) WGAN-GP

1.0

0.9

0.8

0.7

0.6

0.5 0.4

(S, (S, (S,

D=res, D=rnn, D=rnn,

GGG===rrrenessn,,,µµµGGGPPP)))

0.30

5000

10000 g

it1e5r0a0t0ions20000

25000

30000

(b) Sobolev

Figure 6: Result of WGAN-GP and Sobolev with RNNs.

That time out very came of their But it Gaylen was strosd of the The case had caurgr thing it las Gropate evong hould exficioul pa The See qust , so make starter S Cauntsrs of oprnnd accused there Compara Tizo is thene ano hastin With Earaie Ïpptaring very woutd When livht think not Braoph SPec The phan teiled " Policy , tor e Coydey GN11 ) -s pail is uniled That 's conpect d larce antin-iu But it 's familions a, IHican er Nit was bad a year hitoloy hodat And prenches gless fram Avers aa If 's might , comp-rime at overg Jeads years lead of gonguied to Asong he into get his ressson ' Nou projecti y bated with te de CradfsCuel sad out the Gutoor .`
(WGAN-GP,D=res,G=res,µGP )
In reperted a "aMametan 's Gegtn Sime Vmone onerge recighed a an Rechardty ) " Gush 's womes it l Catious paice of an sepurying or The vews dolerated badds to appe Orgarda of to the cheek-ng nees You all tnl torgave takely his e " Ancrops than , Mumine of the s " The Bontement is shouts will b One if the rops of the Cutlent h While paliless streaghal dustist Everyial with a Ecenbers are car It has an atton<ent ligges of ha Hçwnton , ¡- one in aroed that I Anmithingly country cestents toa The odtitians exptolises , began The may last stoct was anso stad But the antinf moted chapimabie The saysuthat yearthand on the d Even the gime was shopld on pist

The Loraia arnup to Nou ands in Nany tecalliexpeace in that veel " It not has allown ourn Ehough This bastly , suphoriation almo " The pasts of a nummers said Nh A loved the Cam feal switht with Apenole 's no. on walling any Cc Furaymand chainting suppinally s Larts Ginis , R-Ra tarkedment st It what wowed night a chiols as Overy shy really -- " Cyphil mad She wore will be also a marged w But Rere tained the sian hoy at Hends to Won) ).--u2- 2y this he Felecter indoadoy is ne rtlayne Pet isser juastivus also first i But you had not of hiscered tnd Thoir Taray taked an intervatter She vagger conmisurespis herkied His juestor foy not ar oreeoon t Buile president up thepunsit an In ealled osficers in a rould a The mome of tot of not shodld ye It 'snsacopprctionialso muss y ,
(Sobolev GAN,D=res,G=res,µGP )
If you ad someone bidding at a t ITas t ian at train , who is a m " Be pls sahs this car and , you
I can reminere several wok sine " I tihne the animal soun like a No , I hsn hen am afra i tak th Wel , maybe the a lost good tal Binan and I han an met is to boo Since tins the the and shime bro I tihne thn aimar thin you wasn

(Sobolev GAN,D=res,G=res,µsa( 0 = 1.5))

(Fisher

GAN,D=GRU,G=GRU+curr,

Pr

+Q 2

)

Figure 7: Text samples from various GANs considered in this paper.

D SSL: HYPERPARAMETERS AND ARCHITECTURE
For our SSL experiments on CIFAR-10, we use Adam with learning rate  = 2e-4, 1 = 0.5 and 2 = 0.999, both for critic f (without BN) and Generator (with BN). We selected CE = 1.5 from [0.8, 1.5, 3.0, 5.0]. We train all models for 350 epochs. We used some L2 weight decay: 1e-6 on , S (i.e. all layers except last) and 1e-3 weight decay on the last layer v. For formulation 1 (Fisher only) we have F = 1e-7, modified critic learning rate D = 1e-4, critic iters nc = 2. For formulation 2 (Sobolev + Fisher) we have F = 5e-8, S = 2e-8, critic iters nc = 1.
Architecture:
### CIFAR-10: 32x32. G is dcgan with G_extra_layers=2. ### D is in the flavor of OpenAI Improved GAN, ALI. G(
(main): Sequential ( (0): ConvTranspose2d(100, 256, kernel_size=(4, 4), stride=(1, 1), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True) (2): ReLU (inplace) (3): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False) (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True) (5): ReLU (inplace) (6): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
24

Under review as a conference paper at ICLR 2018
(7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True) (8): ReLU (inplace) (9): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (10): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True) (11): ReLU (inplace) (12): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True) (14): ReLU (inplace) (15): ConvTranspose2d(64, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False) (16): Tanh () ) ) D( (main): Sequential ( (0): Dropout (p = 0.2) (1): Conv2d(3, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) (2): LeakyReLU (0.2, inplace) (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (5): LeakyReLU (0.2, inplace) (6): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (8): LeakyReLU (0.2, inplace) (9): Dropout (p = 0.5) (10): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (12): LeakyReLU (0.2, inplace) (13): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (15): LeakyReLU (0.2, inplace) (16): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (18): LeakyReLU (0.2, inplace) (19): Dropout (p = 0.5) (20): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), bias=False) (22): LeakyReLU (0.2, inplace) (23): Dropout (p = 0.5) (24): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), bias=False) (26): LeakyReLU (0.2, inplace) (27): Dropout (p = 0.5) (28): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), bias=False) (30): LeakyReLU (0.2, inplace) (31): Dropout (p = 0.5) ) (V): Linear (6144 -> 1) (S): Linear (6144 -> 10) )
25

